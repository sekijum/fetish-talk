package service

import (
	"context"
	"fmt"
	"server/domain/model"
	"server/infrastructure/datasource"
	board "server/presentation/request/board"
	"time"

	"github.com/gin-gonic/gin"
)

type BoardClientService struct {
	boardClientDatasource *datasource.BoardClientDatasource
}

func NewBoardClientService(boardClientDatasource *datasource.BoardClientDatasource) *BoardClientService {
	return &BoardClientService{boardClientDatasource: boardClientDatasource}
}

func (boardClientService *BoardClientService) Create(ctx context.Context, ginCtx *gin.Context, body board.BoardCreateClientRequest) (*model.Board, error) {
	board := &model.Board{
		Title:        body.Title,
		Description:  body.Description,
		UserId:       1,
		ThumbnailUrl: body.ThumbnailUrl,
		Status:       model.BoardStatusPublic,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}

	thread := &model.Thread{
		Title:             fmt.Sprintf("%d", time.Now().Unix()),
		IsAutoGenerated:   true,
		UserId:            1,
		IsNotifyOnComment: body.Thread.IsNotifyOnComment,
		IpAddress:         ginCtx.ClientIP(),
		Status:            model.ThreadStatusOpen,
		CreatedAt:         time.Now(),
		UpdatedAt:         time.Now(),
	}
	savedBoard, err := boardClientService.boardClientDatasource.Create(ctx, board, thread)
	if err != nil {
		return nil, err
	}

	return savedBoard, nil
}
