package service

import (
	"context"
	"errors"
	"server/domain/model"
	domainService "server/domain/service"
	"server/infrastructure/datasource"
	board "server/presentation/request/board"
	"time"

	"github.com/gin-gonic/gin"
)

type BoardClientService struct {
	boardClientDatasource *datasource.BoardClientDatasource
	boardDomainService    *domainService.BoardDomainService
}

func NewBoardClientService(
	boardClientDatasource *datasource.BoardClientDatasource,
	boardDomainService *domainService.BoardDomainService,
) *BoardClientService {
	return &BoardClientService{
		boardClientDatasource: boardClientDatasource,
		boardDomainService:    boardDomainService,
	}
}

func (svc *BoardClientService) Create(
	ctx context.Context,
	ginCtx *gin.Context,
	body board.BoardCreateClientRequest,
) error {
	if duplicated, err := svc.boardDomainService.IsTitleDuplicated(ctx, body.Title); err != nil || duplicated {
		if err != nil {
			return err
		}
		return errors.New("板タイトルが重複しています")
	}
	thread := &model.Thread{
		IsAutoGenerated:   true,
		Title:             body.DefaultThread.Title,
		Description:       body.DefaultThread.Description,
		UserId:            1,
		ThumbnailUrl:      body.DefaultThread.ThumbnailUrl,
		IsNotifyOnComment: body.DefaultThread.IsNotifyOnComment,
		IpAddress:         ginCtx.ClientIP(),
		Status:            model.ThreadStatusOpen,
		CreatedAt:         time.Now(),
		UpdatedAt:         time.Now(),
	}

	board := &model.Board{
		Title:        body.Title,
		Description:  body.Description,
		UserId:       1,
		ThumbnailUrl: body.ThumbnailUrl,
		Status:       model.BoardStatusPublic,
		Threads:      []*model.Thread{thread},
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}
	if err := board.Validate(); err != nil {
		return err
	}
	if err := board.ValidateDefaultThreads(); err != nil {
		return err
	}

	_, err := svc.boardClientDatasource.Create(ctx, board)
	if err != nil {
		return err
	}

	return nil
}
