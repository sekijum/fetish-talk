// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadtag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadTagUpdate is the builder for updating ThreadTag entities.
type ThreadTagUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadTagMutation
}

// Where appends a list predicates to the ThreadTagUpdate builder.
func (ttu *ThreadTagUpdate) Where(ps ...predicate.ThreadTag) *ThreadTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "name" field.
func (ttu *ThreadTagUpdate) SetName(s string) *ThreadTagUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttu *ThreadTagUpdate) SetNillableName(s *string) *ThreadTagUpdate {
	if s != nil {
		ttu.SetName(*s)
	}
	return ttu
}

// SetCreatedAt sets the "createdAt" field.
func (ttu *ThreadTagUpdate) SetCreatedAt(t time.Time) *ThreadTagUpdate {
	ttu.mutation.SetCreatedAt(t)
	return ttu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ttu *ThreadTagUpdate) SetNillableCreatedAt(t *time.Time) *ThreadTagUpdate {
	if t != nil {
		ttu.SetCreatedAt(*t)
	}
	return ttu
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (ttu *ThreadTagUpdate) AddThreadIDs(ids ...int) *ThreadTagUpdate {
	ttu.mutation.AddThreadIDs(ids...)
	return ttu
}

// AddThreads adds the "threads" edges to the Thread entity.
func (ttu *ThreadTagUpdate) AddThreads(t ...*Thread) *ThreadTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddThreadIDs(ids...)
}

// Mutation returns the ThreadTagMutation object of the builder.
func (ttu *ThreadTagUpdate) Mutation() *ThreadTagMutation {
	return ttu.mutation
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (ttu *ThreadTagUpdate) ClearThreads() *ThreadTagUpdate {
	ttu.mutation.ClearThreads()
	return ttu
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (ttu *ThreadTagUpdate) RemoveThreadIDs(ids ...int) *ThreadTagUpdate {
	ttu.mutation.RemoveThreadIDs(ids...)
	return ttu
}

// RemoveThreads removes "threads" edges to Thread entities.
func (ttu *ThreadTagUpdate) RemoveThreads(t ...*Thread) *ThreadTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveThreadIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *ThreadTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *ThreadTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *ThreadTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *ThreadTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *ThreadTagUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := threadtag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ThreadTag.name": %w`, err)}
		}
	}
	return nil
}

func (ttu *ThreadTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadtag.Table, threadtag.Columns, sqlgraph.NewFieldSpec(threadtag.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(threadtag.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.CreatedAt(); ok {
		_spec.SetField(threadtag.FieldCreatedAt, field.TypeTime, value)
	}
	if ttu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !ttu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// ThreadTagUpdateOne is the builder for updating a single ThreadTag entity.
type ThreadTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadTagMutation
}

// SetName sets the "name" field.
func (ttuo *ThreadTagUpdateOne) SetName(s string) *ThreadTagUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttuo *ThreadTagUpdateOne) SetNillableName(s *string) *ThreadTagUpdateOne {
	if s != nil {
		ttuo.SetName(*s)
	}
	return ttuo
}

// SetCreatedAt sets the "createdAt" field.
func (ttuo *ThreadTagUpdateOne) SetCreatedAt(t time.Time) *ThreadTagUpdateOne {
	ttuo.mutation.SetCreatedAt(t)
	return ttuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ttuo *ThreadTagUpdateOne) SetNillableCreatedAt(t *time.Time) *ThreadTagUpdateOne {
	if t != nil {
		ttuo.SetCreatedAt(*t)
	}
	return ttuo
}

// AddThreadIDs adds the "threads" edge to the Thread entity by IDs.
func (ttuo *ThreadTagUpdateOne) AddThreadIDs(ids ...int) *ThreadTagUpdateOne {
	ttuo.mutation.AddThreadIDs(ids...)
	return ttuo
}

// AddThreads adds the "threads" edges to the Thread entity.
func (ttuo *ThreadTagUpdateOne) AddThreads(t ...*Thread) *ThreadTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddThreadIDs(ids...)
}

// Mutation returns the ThreadTagMutation object of the builder.
func (ttuo *ThreadTagUpdateOne) Mutation() *ThreadTagMutation {
	return ttuo.mutation
}

// ClearThreads clears all "threads" edges to the Thread entity.
func (ttuo *ThreadTagUpdateOne) ClearThreads() *ThreadTagUpdateOne {
	ttuo.mutation.ClearThreads()
	return ttuo
}

// RemoveThreadIDs removes the "threads" edge to Thread entities by IDs.
func (ttuo *ThreadTagUpdateOne) RemoveThreadIDs(ids ...int) *ThreadTagUpdateOne {
	ttuo.mutation.RemoveThreadIDs(ids...)
	return ttuo
}

// RemoveThreads removes "threads" edges to Thread entities.
func (ttuo *ThreadTagUpdateOne) RemoveThreads(t ...*Thread) *ThreadTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveThreadIDs(ids...)
}

// Where appends a list predicates to the ThreadTagUpdate builder.
func (ttuo *ThreadTagUpdateOne) Where(ps ...predicate.ThreadTag) *ThreadTagUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *ThreadTagUpdateOne) Select(field string, fields ...string) *ThreadTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated ThreadTag entity.
func (ttuo *ThreadTagUpdateOne) Save(ctx context.Context) (*ThreadTag, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *ThreadTagUpdateOne) SaveX(ctx context.Context) *ThreadTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *ThreadTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *ThreadTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *ThreadTagUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := threadtag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ThreadTag.name": %w`, err)}
		}
	}
	return nil
}

func (ttuo *ThreadTagUpdateOne) sqlSave(ctx context.Context) (_node *ThreadTag, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadtag.Table, threadtag.Columns, sqlgraph.NewFieldSpec(threadtag.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadtag.FieldID)
		for _, f := range fields {
			if !threadtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(threadtag.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.CreatedAt(); ok {
		_spec.SetField(threadtag.FieldCreatedAt, field.TypeTime, value)
	}
	if ttuo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !ttuo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadtag.ThreadsTable,
			Columns: threadtag.ThreadsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThreadTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
