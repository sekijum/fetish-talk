// Code generated by ent, DO NOT EDIT.

package topictagging

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the topictagging type in the database.
	Label = "topic_tagging"
	// FieldTopicId holds the string denoting the topicid field in the database.
	FieldTopicId = "topic_id"
	// FieldTagId holds the string denoting the tagid field in the database.
	FieldTagId = "tag_id"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// TopicFieldID holds the string denoting the ID field of the Topic.
	TopicFieldID = "id"
	// TopicTagFieldID holds the string denoting the ID field of the TopicTag.
	TopicTagFieldID = "id"
	// Table holds the table name of the topictagging in the database.
	Table = "topic_taggings"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "topic_taggings"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "topic_taggings"
	// TagInverseTable is the table name for the TopicTag entity.
	// It exists in this package in order to avoid circular dependency with the "topictag" package.
	TagInverseTable = "topic_tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "tag_id"
)

// Columns holds all SQL columns for topictagging fields.
var Columns = []string{
	FieldTopicId,
	FieldTagId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TopicTagging queries.
type OrderOption func(*sql.Selector)

// ByTopicId orders the results by the topicId field.
func ByTopicId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicId, opts...).ToFunc()
}

// ByTagId orders the results by the tagId field.
func ByTagId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagId, opts...).ToFunc()
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagField orders the results by tag field.
func ByTagField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagStep(), sql.OrderByField(field, opts...))
	}
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TopicColumn),
		sqlgraph.To(TopicInverseTable, TopicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
	)
}
func newTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TagColumn),
		sqlgraph.To(TagInverseTable, TopicTagFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
	)
}
