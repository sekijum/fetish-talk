// Code generated by ent, DO NOT EDIT.

package topictagging

import (
	"server/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// TopicId applies equality check predicate on the "topicId" field. It's identical to TopicIdEQ.
func TopicId(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldEQ(FieldTopicId, v))
}

// TagId applies equality check predicate on the "tagId" field. It's identical to TagIdEQ.
func TagId(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldEQ(FieldTagId, v))
}

// TopicIdEQ applies the EQ predicate on the "topicId" field.
func TopicIdEQ(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldEQ(FieldTopicId, v))
}

// TopicIdNEQ applies the NEQ predicate on the "topicId" field.
func TopicIdNEQ(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldNEQ(FieldTopicId, v))
}

// TopicIdIn applies the In predicate on the "topicId" field.
func TopicIdIn(vs ...int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldIn(FieldTopicId, vs...))
}

// TopicIdNotIn applies the NotIn predicate on the "topicId" field.
func TopicIdNotIn(vs ...int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldNotIn(FieldTopicId, vs...))
}

// TagIdEQ applies the EQ predicate on the "tagId" field.
func TagIdEQ(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldEQ(FieldTagId, v))
}

// TagIdNEQ applies the NEQ predicate on the "tagId" field.
func TagIdNEQ(v int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldNEQ(FieldTagId, v))
}

// TagIdIn applies the In predicate on the "tagId" field.
func TagIdIn(vs ...int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldIn(FieldTagId, vs...))
}

// TagIdNotIn applies the NotIn predicate on the "tagId" field.
func TagIdNotIn(vs ...int) predicate.TopicTagging {
	return predicate.TopicTagging(sql.FieldNotIn(FieldTagId, vs...))
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.TopicTagging {
	return predicate.TopicTagging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TopicColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.TopicTagging {
	return predicate.TopicTagging(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.TopicTagging {
	return predicate.TopicTagging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TagColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.TopicTag) predicate.TopicTagging {
	return predicate.TopicTagging(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TopicTagging) predicate.TopicTagging {
	return predicate.TopicTagging(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TopicTagging) predicate.TopicTagging {
	return predicate.TopicTagging(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TopicTagging) predicate.TopicTagging {
	return predicate.TopicTagging(sql.NotPredicates(p))
}
