// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userboardsubscription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBoardSubscription is the model entity for the UserBoardSubscription schema.
type UserBoardSubscription struct {
	config `json:"-"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// BoardId holds the value of the "boardId" field.
	BoardId int `json:"boardId,omitempty"`
	// メール通知を受け取るかどうかのフラグ
	IsNotified bool `json:"isNotified,omitempty"`
	// 通知画面で確認したかどうかのフラグ
	IsChecked bool `json:"isChecked,omitempty"`
	// SubscribedAt holds the value of the "subscribedAt" field.
	SubscribedAt time.Time `json:"subscribedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserBoardSubscriptionQuery when eager-loading is set.
	Edges        UserBoardSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserBoardSubscriptionEdges holds the relations/edges for other nodes in the graph.
type UserBoardSubscriptionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Board holds the value of the board edge.
	Board *Board `json:"board,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBoardSubscriptionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BoardOrErr returns the Board value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBoardSubscriptionEdges) BoardOrErr() (*Board, error) {
	if e.Board != nil {
		return e.Board, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: board.Label}
	}
	return nil, &NotLoadedError{edge: "board"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBoardSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userboardsubscription.FieldIsNotified, userboardsubscription.FieldIsChecked:
			values[i] = new(sql.NullBool)
		case userboardsubscription.FieldUserId, userboardsubscription.FieldBoardId:
			values[i] = new(sql.NullInt64)
		case userboardsubscription.FieldSubscribedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBoardSubscription fields.
func (ubs *UserBoardSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userboardsubscription.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ubs.UserId = int(value.Int64)
			}
		case userboardsubscription.FieldBoardId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field boardId", values[i])
			} else if value.Valid {
				ubs.BoardId = int(value.Int64)
			}
		case userboardsubscription.FieldIsNotified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isNotified", values[i])
			} else if value.Valid {
				ubs.IsNotified = value.Bool
			}
		case userboardsubscription.FieldIsChecked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isChecked", values[i])
			} else if value.Valid {
				ubs.IsChecked = value.Bool
			}
		case userboardsubscription.FieldSubscribedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscribedAt", values[i])
			} else if value.Valid {
				ubs.SubscribedAt = value.Time
			}
		default:
			ubs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBoardSubscription.
// This includes values selected through modifiers, order, etc.
func (ubs *UserBoardSubscription) Value(name string) (ent.Value, error) {
	return ubs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserBoardSubscription entity.
func (ubs *UserBoardSubscription) QueryUser() *UserQuery {
	return NewUserBoardSubscriptionClient(ubs.config).QueryUser(ubs)
}

// QueryBoard queries the "board" edge of the UserBoardSubscription entity.
func (ubs *UserBoardSubscription) QueryBoard() *BoardQuery {
	return NewUserBoardSubscriptionClient(ubs.config).QueryBoard(ubs)
}

// Update returns a builder for updating this UserBoardSubscription.
// Note that you need to call UserBoardSubscription.Unwrap() before calling this method if this UserBoardSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ubs *UserBoardSubscription) Update() *UserBoardSubscriptionUpdateOne {
	return NewUserBoardSubscriptionClient(ubs.config).UpdateOne(ubs)
}

// Unwrap unwraps the UserBoardSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ubs *UserBoardSubscription) Unwrap() *UserBoardSubscription {
	_tx, ok := ubs.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBoardSubscription is not a transactional entity")
	}
	ubs.config.driver = _tx.drv
	return ubs
}

// String implements the fmt.Stringer.
func (ubs *UserBoardSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("UserBoardSubscription(")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", ubs.UserId))
	builder.WriteString(", ")
	builder.WriteString("boardId=")
	builder.WriteString(fmt.Sprintf("%v", ubs.BoardId))
	builder.WriteString(", ")
	builder.WriteString("isNotified=")
	builder.WriteString(fmt.Sprintf("%v", ubs.IsNotified))
	builder.WriteString(", ")
	builder.WriteString("isChecked=")
	builder.WriteString(fmt.Sprintf("%v", ubs.IsChecked))
	builder.WriteString(", ")
	builder.WriteString("subscribedAt=")
	builder.WriteString(ubs.SubscribedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserBoardSubscriptions is a parsable slice of UserBoardSubscription.
type UserBoardSubscriptions []*UserBoardSubscription
