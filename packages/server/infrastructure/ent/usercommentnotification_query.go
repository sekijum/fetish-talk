// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentnotification"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCommentNotificationQuery is the builder for querying UserCommentNotification entities.
type UserCommentNotificationQuery struct {
	config
	ctx         *QueryContext
	order       []usercommentnotification.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserCommentNotification
	withUser    *UserQuery
	withComment *CommentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCommentNotificationQuery builder.
func (ucnq *UserCommentNotificationQuery) Where(ps ...predicate.UserCommentNotification) *UserCommentNotificationQuery {
	ucnq.predicates = append(ucnq.predicates, ps...)
	return ucnq
}

// Limit the number of records to be returned by this query.
func (ucnq *UserCommentNotificationQuery) Limit(limit int) *UserCommentNotificationQuery {
	ucnq.ctx.Limit = &limit
	return ucnq
}

// Offset to start from.
func (ucnq *UserCommentNotificationQuery) Offset(offset int) *UserCommentNotificationQuery {
	ucnq.ctx.Offset = &offset
	return ucnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucnq *UserCommentNotificationQuery) Unique(unique bool) *UserCommentNotificationQuery {
	ucnq.ctx.Unique = &unique
	return ucnq
}

// Order specifies how the records should be ordered.
func (ucnq *UserCommentNotificationQuery) Order(o ...usercommentnotification.OrderOption) *UserCommentNotificationQuery {
	ucnq.order = append(ucnq.order, o...)
	return ucnq
}

// QueryUser chains the current query on the "user" edge.
func (ucnq *UserCommentNotificationQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ucnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercommentnotification.Table, usercommentnotification.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercommentnotification.UserTable, usercommentnotification.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComment chains the current query on the "comment" edge.
func (ucnq *UserCommentNotificationQuery) QueryComment() *CommentQuery {
	query := (&CommentClient{config: ucnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercommentnotification.Table, usercommentnotification.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usercommentnotification.CommentTable, usercommentnotification.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCommentNotification entity from the query.
// Returns a *NotFoundError when no UserCommentNotification was found.
func (ucnq *UserCommentNotificationQuery) First(ctx context.Context) (*UserCommentNotification, error) {
	nodes, err := ucnq.Limit(1).All(setContextOp(ctx, ucnq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercommentnotification.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) FirstX(ctx context.Context) *UserCommentNotification {
	node, err := ucnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCommentNotification ID from the query.
// Returns a *NotFoundError when no UserCommentNotification ID was found.
func (ucnq *UserCommentNotificationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucnq.Limit(1).IDs(setContextOp(ctx, ucnq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercommentnotification.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) FirstIDX(ctx context.Context) int {
	id, err := ucnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCommentNotification entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCommentNotification entity is found.
// Returns a *NotFoundError when no UserCommentNotification entities are found.
func (ucnq *UserCommentNotificationQuery) Only(ctx context.Context) (*UserCommentNotification, error) {
	nodes, err := ucnq.Limit(2).All(setContextOp(ctx, ucnq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercommentnotification.Label}
	default:
		return nil, &NotSingularError{usercommentnotification.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) OnlyX(ctx context.Context) *UserCommentNotification {
	node, err := ucnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCommentNotification ID in the query.
// Returns a *NotSingularError when more than one UserCommentNotification ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucnq *UserCommentNotificationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucnq.Limit(2).IDs(setContextOp(ctx, ucnq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercommentnotification.Label}
	default:
		err = &NotSingularError{usercommentnotification.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) OnlyIDX(ctx context.Context) int {
	id, err := ucnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCommentNotifications.
func (ucnq *UserCommentNotificationQuery) All(ctx context.Context) ([]*UserCommentNotification, error) {
	ctx = setContextOp(ctx, ucnq.ctx, "All")
	if err := ucnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserCommentNotification, *UserCommentNotificationQuery]()
	return withInterceptors[[]*UserCommentNotification](ctx, ucnq, qr, ucnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) AllX(ctx context.Context) []*UserCommentNotification {
	nodes, err := ucnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCommentNotification IDs.
func (ucnq *UserCommentNotificationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ucnq.ctx.Unique == nil && ucnq.path != nil {
		ucnq.Unique(true)
	}
	ctx = setContextOp(ctx, ucnq.ctx, "IDs")
	if err = ucnq.Select(usercommentnotification.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) IDsX(ctx context.Context) []int {
	ids, err := ucnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucnq *UserCommentNotificationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucnq.ctx, "Count")
	if err := ucnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucnq, querierCount[*UserCommentNotificationQuery](), ucnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) CountX(ctx context.Context) int {
	count, err := ucnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucnq *UserCommentNotificationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucnq.ctx, "Exist")
	switch _, err := ucnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucnq *UserCommentNotificationQuery) ExistX(ctx context.Context) bool {
	exist, err := ucnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCommentNotificationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucnq *UserCommentNotificationQuery) Clone() *UserCommentNotificationQuery {
	if ucnq == nil {
		return nil
	}
	return &UserCommentNotificationQuery{
		config:      ucnq.config,
		ctx:         ucnq.ctx.Clone(),
		order:       append([]usercommentnotification.OrderOption{}, ucnq.order...),
		inters:      append([]Interceptor{}, ucnq.inters...),
		predicates:  append([]predicate.UserCommentNotification{}, ucnq.predicates...),
		withUser:    ucnq.withUser.Clone(),
		withComment: ucnq.withComment.Clone(),
		// clone intermediate query.
		sql:  ucnq.sql.Clone(),
		path: ucnq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucnq *UserCommentNotificationQuery) WithUser(opts ...func(*UserQuery)) *UserCommentNotificationQuery {
	query := (&UserClient{config: ucnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucnq.withUser = query
	return ucnq
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (ucnq *UserCommentNotificationQuery) WithComment(opts ...func(*CommentQuery)) *UserCommentNotificationQuery {
	query := (&CommentClient{config: ucnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucnq.withComment = query
	return ucnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCommentNotification.Query().
//		GroupBy(usercommentnotification.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucnq *UserCommentNotificationQuery) GroupBy(field string, fields ...string) *UserCommentNotificationGroupBy {
	ucnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserCommentNotificationGroupBy{build: ucnq}
	grbuild.flds = &ucnq.ctx.Fields
	grbuild.label = usercommentnotification.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.UserCommentNotification.Query().
//		Select(usercommentnotification.FieldUserID).
//		Scan(ctx, &v)
func (ucnq *UserCommentNotificationQuery) Select(fields ...string) *UserCommentNotificationSelect {
	ucnq.ctx.Fields = append(ucnq.ctx.Fields, fields...)
	sbuild := &UserCommentNotificationSelect{UserCommentNotificationQuery: ucnq}
	sbuild.label = usercommentnotification.Label
	sbuild.flds, sbuild.scan = &ucnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserCommentNotificationSelect configured with the given aggregations.
func (ucnq *UserCommentNotificationQuery) Aggregate(fns ...AggregateFunc) *UserCommentNotificationSelect {
	return ucnq.Select().Aggregate(fns...)
}

func (ucnq *UserCommentNotificationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucnq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucnq.ctx.Fields {
		if !usercommentnotification.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucnq.path != nil {
		prev, err := ucnq.path(ctx)
		if err != nil {
			return err
		}
		ucnq.sql = prev
	}
	return nil
}

func (ucnq *UserCommentNotificationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCommentNotification, error) {
	var (
		nodes       = []*UserCommentNotification{}
		_spec       = ucnq.querySpec()
		loadedTypes = [2]bool{
			ucnq.withUser != nil,
			ucnq.withComment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserCommentNotification).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserCommentNotification{config: ucnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucnq.withUser; query != nil {
		if err := ucnq.loadUser(ctx, query, nodes, nil,
			func(n *UserCommentNotification, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ucnq.withComment; query != nil {
		if err := ucnq.loadComment(ctx, query, nodes, nil,
			func(n *UserCommentNotification, e *Comment) { n.Edges.Comment = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucnq *UserCommentNotificationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserCommentNotification, init func(*UserCommentNotification), assign func(*UserCommentNotification, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserCommentNotification)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ucnq *UserCommentNotificationQuery) loadComment(ctx context.Context, query *CommentQuery, nodes []*UserCommentNotification, init func(*UserCommentNotification), assign func(*UserCommentNotification, *Comment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserCommentNotification)
	for i := range nodes {
		fk := nodes[i].CommentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(comment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "comment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ucnq *UserCommentNotificationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucnq.querySpec()
	_spec.Node.Columns = ucnq.ctx.Fields
	if len(ucnq.ctx.Fields) > 0 {
		_spec.Unique = ucnq.ctx.Unique != nil && *ucnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ucnq.driver, _spec)
}

func (ucnq *UserCommentNotificationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercommentnotification.Table, usercommentnotification.Columns, sqlgraph.NewFieldSpec(usercommentnotification.FieldID, field.TypeInt))
	_spec.From = ucnq.sql
	if unique := ucnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucnq.path != nil {
		_spec.Unique = true
	}
	if fields := ucnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercommentnotification.FieldID)
		for i := range fields {
			if fields[i] != usercommentnotification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ucnq.withUser != nil {
			_spec.Node.AddColumnOnce(usercommentnotification.FieldUserID)
		}
		if ucnq.withComment != nil {
			_spec.Node.AddColumnOnce(usercommentnotification.FieldCommentID)
		}
	}
	if ps := ucnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucnq *UserCommentNotificationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucnq.driver.Dialect())
	t1 := builder.Table(usercommentnotification.Table)
	columns := ucnq.ctx.Fields
	if len(columns) == 0 {
		columns = usercommentnotification.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucnq.sql != nil {
		selector = ucnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucnq.ctx.Unique != nil && *ucnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ucnq.predicates {
		p(selector)
	}
	for _, p := range ucnq.order {
		p(selector)
	}
	if offset := ucnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCommentNotificationGroupBy is the group-by builder for UserCommentNotification entities.
type UserCommentNotificationGroupBy struct {
	selector
	build *UserCommentNotificationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucngb *UserCommentNotificationGroupBy) Aggregate(fns ...AggregateFunc) *UserCommentNotificationGroupBy {
	ucngb.fns = append(ucngb.fns, fns...)
	return ucngb
}

// Scan applies the selector query and scans the result into the given value.
func (ucngb *UserCommentNotificationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucngb.build.ctx, "GroupBy")
	if err := ucngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCommentNotificationQuery, *UserCommentNotificationGroupBy](ctx, ucngb.build, ucngb, ucngb.build.inters, v)
}

func (ucngb *UserCommentNotificationGroupBy) sqlScan(ctx context.Context, root *UserCommentNotificationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucngb.fns))
	for _, fn := range ucngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucngb.flds)+len(ucngb.fns))
		for _, f := range *ucngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserCommentNotificationSelect is the builder for selecting fields of UserCommentNotification entities.
type UserCommentNotificationSelect struct {
	*UserCommentNotificationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucns *UserCommentNotificationSelect) Aggregate(fns ...AggregateFunc) *UserCommentNotificationSelect {
	ucns.fns = append(ucns.fns, fns...)
	return ucns
}

// Scan applies the selector query and scans the result into the given value.
func (ucns *UserCommentNotificationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucns.ctx, "Select")
	if err := ucns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCommentNotificationQuery, *UserCommentNotificationSelect](ctx, ucns.UserCommentNotificationQuery, ucns, ucns.inters, v)
}

func (ucns *UserCommentNotificationSelect) sqlScan(ctx context.Context, root *UserCommentNotificationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucns.fns))
	for _, fn := range ucns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
