// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userforumlike"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserForumLike is the model entity for the UserForumLike schema.
type UserForumLike struct {
	config `json:"-"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// ForumId holds the value of the "forumId" field.
	ForumId int `json:"forumId,omitempty"`
	// Type holds the value of the "type" field.
	Type userforumlike.Type `json:"type,omitempty"`
	// LikedAt holds the value of the "likedAt" field.
	LikedAt time.Time `json:"likedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserForumLikeQuery when eager-loading is set.
	Edges        UserForumLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserForumLikeEdges holds the relations/edges for other nodes in the graph.
type UserForumLikeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Forum holds the value of the forum edge.
	Forum *Forum `json:"forum,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserForumLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ForumOrErr returns the Forum value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserForumLikeEdges) ForumOrErr() (*Forum, error) {
	if e.Forum != nil {
		return e.Forum, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: forum.Label}
	}
	return nil, &NotLoadedError{edge: "forum"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserForumLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userforumlike.FieldUserId, userforumlike.FieldForumId:
			values[i] = new(sql.NullInt64)
		case userforumlike.FieldType:
			values[i] = new(sql.NullString)
		case userforumlike.FieldLikedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserForumLike fields.
func (ufl *UserForumLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userforumlike.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ufl.UserId = int(value.Int64)
			}
		case userforumlike.FieldForumId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forumId", values[i])
			} else if value.Valid {
				ufl.ForumId = int(value.Int64)
			}
		case userforumlike.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ufl.Type = userforumlike.Type(value.String)
			}
		case userforumlike.FieldLikedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field likedAt", values[i])
			} else if value.Valid {
				ufl.LikedAt = value.Time
			}
		default:
			ufl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserForumLike.
// This includes values selected through modifiers, order, etc.
func (ufl *UserForumLike) Value(name string) (ent.Value, error) {
	return ufl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserForumLike entity.
func (ufl *UserForumLike) QueryUser() *UserQuery {
	return NewUserForumLikeClient(ufl.config).QueryUser(ufl)
}

// QueryForum queries the "forum" edge of the UserForumLike entity.
func (ufl *UserForumLike) QueryForum() *ForumQuery {
	return NewUserForumLikeClient(ufl.config).QueryForum(ufl)
}

// Update returns a builder for updating this UserForumLike.
// Note that you need to call UserForumLike.Unwrap() before calling this method if this UserForumLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufl *UserForumLike) Update() *UserForumLikeUpdateOne {
	return NewUserForumLikeClient(ufl.config).UpdateOne(ufl)
}

// Unwrap unwraps the UserForumLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufl *UserForumLike) Unwrap() *UserForumLike {
	_tx, ok := ufl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserForumLike is not a transactional entity")
	}
	ufl.config.driver = _tx.drv
	return ufl
}

// String implements the fmt.Stringer.
func (ufl *UserForumLike) String() string {
	var builder strings.Builder
	builder.WriteString("UserForumLike(")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", ufl.UserId))
	builder.WriteString(", ")
	builder.WriteString("forumId=")
	builder.WriteString(fmt.Sprintf("%v", ufl.ForumId))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ufl.Type))
	builder.WriteString(", ")
	builder.WriteString("likedAt=")
	builder.WriteString(ufl.LikedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserForumLikes is a parsable slice of UserForumLike.
type UserForumLikes []*UserForumLike
