// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentattachment"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetThreadId sets the "threadId" field.
func (cu *CommentUpdate) SetThreadId(i int) *CommentUpdate {
	cu.mutation.SetThreadId(i)
	return cu
}

// SetNillableThreadId sets the "threadId" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableThreadId(i *int) *CommentUpdate {
	if i != nil {
		cu.SetThreadId(*i)
	}
	return cu
}

// SetParentCommentId sets the "parentCommentId" field.
func (cu *CommentUpdate) SetParentCommentId(i int) *CommentUpdate {
	cu.mutation.SetParentCommentId(i)
	return cu
}

// SetNillableParentCommentId sets the "parentCommentId" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentCommentId(i *int) *CommentUpdate {
	if i != nil {
		cu.SetParentCommentId(*i)
	}
	return cu
}

// ClearParentCommentId clears the value of the "parentCommentId" field.
func (cu *CommentUpdate) ClearParentCommentId() *CommentUpdate {
	cu.mutation.ClearParentCommentId()
	return cu
}

// SetUserId sets the "userId" field.
func (cu *CommentUpdate) SetUserId(i int) *CommentUpdate {
	cu.mutation.SetUserId(i)
	return cu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserId(i *int) *CommentUpdate {
	if i != nil {
		cu.SetUserId(*i)
	}
	return cu
}

// ClearUserId clears the value of the "userId" field.
func (cu *CommentUpdate) ClearUserId() *CommentUpdate {
	cu.mutation.ClearUserId()
	return cu
}

// SetGuestName sets the "guestName" field.
func (cu *CommentUpdate) SetGuestName(s string) *CommentUpdate {
	cu.mutation.SetGuestName(s)
	return cu
}

// SetNillableGuestName sets the "guestName" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableGuestName(s *string) *CommentUpdate {
	if s != nil {
		cu.SetGuestName(*s)
	}
	return cu
}

// ClearGuestName clears the value of the "guestName" field.
func (cu *CommentUpdate) ClearGuestName() *CommentUpdate {
	cu.mutation.ClearGuestName()
	return cu
}

// SetMessage sets the "message" field.
func (cu *CommentUpdate) SetMessage(s string) *CommentUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableMessage(s *string) *CommentUpdate {
	if s != nil {
		cu.SetMessage(*s)
	}
	return cu
}

// SetIPAddress sets the "ip_address" field.
func (cu *CommentUpdate) SetIPAddress(s string) *CommentUpdate {
	cu.mutation.SetIPAddress(s)
	return cu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIPAddress(s *string) *CommentUpdate {
	if s != nil {
		cu.SetIPAddress(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommentUpdate) SetStatus(c comment.Status) *CommentUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableStatus(c *comment.Status) *CommentUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetCreatedAt sets the "createdAt" field.
func (cu *CommentUpdate) SetCreatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableCreatedAt(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetThreadID sets the "thread" edge to the Thread entity by ID.
func (cu *CommentUpdate) SetThreadID(id int) *CommentUpdate {
	cu.mutation.SetThreadID(id)
	return cu
}

// SetThread sets the "thread" edge to the Thread entity.
func (cu *CommentUpdate) SetThread(t *Thread) *CommentUpdate {
	return cu.SetThreadID(t.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cu *CommentUpdate) SetAuthorID(id int) *CommentUpdate {
	cu.mutation.SetAuthorID(id)
	return cu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorID(id *int) *CommentUpdate {
	if id != nil {
		cu = cu.SetAuthorID(*id)
	}
	return cu
}

// SetAuthor sets the "author" edge to the User entity.
func (cu *CommentUpdate) SetAuthor(u *User) *CommentUpdate {
	return cu.SetAuthorID(u.ID)
}

// SetParentCommentID sets the "parent_comment" edge to the Comment entity by ID.
func (cu *CommentUpdate) SetParentCommentID(id int) *CommentUpdate {
	cu.mutation.SetParentCommentID(id)
	return cu
}

// SetNillableParentCommentID sets the "parent_comment" edge to the Comment entity by ID if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentCommentID(id *int) *CommentUpdate {
	if id != nil {
		cu = cu.SetParentCommentID(*id)
	}
	return cu
}

// SetParentComment sets the "parent_comment" edge to the Comment entity.
func (cu *CommentUpdate) SetParentComment(c *Comment) *CommentUpdate {
	return cu.SetParentCommentID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (cu *CommentUpdate) AddReplyIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddReplyIDs(ids...)
	return cu
}

// AddReplies adds the "replies" edges to the Comment entity.
func (cu *CommentUpdate) AddReplies(c ...*Comment) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddReplyIDs(ids...)
}

// AddCommentAttachmentIDs adds the "comment_attachments" edge to the CommentAttachment entity by IDs.
func (cu *CommentUpdate) AddCommentAttachmentIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddCommentAttachmentIDs(ids...)
	return cu
}

// AddCommentAttachments adds the "comment_attachments" edges to the CommentAttachment entity.
func (cu *CommentUpdate) AddCommentAttachments(c ...*CommentAttachment) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCommentAttachmentIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (cu *CommentUpdate) AddLikedUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddLikedUserIDs(ids...)
	return cu
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (cu *CommentUpdate) AddLikedUsers(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (cu *CommentUpdate) AddSubscribedUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.AddSubscribedUserIDs(ids...)
	return cu
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (cu *CommentUpdate) AddSubscribedUsers(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddSubscribedUserIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (cu *CommentUpdate) ClearThread() *CommentUpdate {
	cu.mutation.ClearThread()
	return cu
}

// ClearAuthor clears the "author" edge to the User entity.
func (cu *CommentUpdate) ClearAuthor() *CommentUpdate {
	cu.mutation.ClearAuthor()
	return cu
}

// ClearParentComment clears the "parent_comment" edge to the Comment entity.
func (cu *CommentUpdate) ClearParentComment() *CommentUpdate {
	cu.mutation.ClearParentComment()
	return cu
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (cu *CommentUpdate) ClearReplies() *CommentUpdate {
	cu.mutation.ClearReplies()
	return cu
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (cu *CommentUpdate) RemoveReplyIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveReplyIDs(ids...)
	return cu
}

// RemoveReplies removes "replies" edges to Comment entities.
func (cu *CommentUpdate) RemoveReplies(c ...*Comment) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveReplyIDs(ids...)
}

// ClearCommentAttachments clears all "comment_attachments" edges to the CommentAttachment entity.
func (cu *CommentUpdate) ClearCommentAttachments() *CommentUpdate {
	cu.mutation.ClearCommentAttachments()
	return cu
}

// RemoveCommentAttachmentIDs removes the "comment_attachments" edge to CommentAttachment entities by IDs.
func (cu *CommentUpdate) RemoveCommentAttachmentIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveCommentAttachmentIDs(ids...)
	return cu
}

// RemoveCommentAttachments removes "comment_attachments" edges to CommentAttachment entities.
func (cu *CommentUpdate) RemoveCommentAttachments(c ...*CommentAttachment) *CommentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCommentAttachmentIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (cu *CommentUpdate) ClearLikedUsers() *CommentUpdate {
	cu.mutation.ClearLikedUsers()
	return cu
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (cu *CommentUpdate) RemoveLikedUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveLikedUserIDs(ids...)
	return cu
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (cu *CommentUpdate) RemoveLikedUsers(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveLikedUserIDs(ids...)
}

// ClearSubscribedUsers clears all "subscribed_users" edges to the User entity.
func (cu *CommentUpdate) ClearSubscribedUsers() *CommentUpdate {
	cu.mutation.ClearSubscribedUsers()
	return cu
}

// RemoveSubscribedUserIDs removes the "subscribed_users" edge to User entities by IDs.
func (cu *CommentUpdate) RemoveSubscribedUserIDs(ids ...int) *CommentUpdate {
	cu.mutation.RemoveSubscribedUserIDs(ids...)
	return cu
}

// RemoveSubscribedUsers removes "subscribed_users" edges to User entities.
func (cu *CommentUpdate) RemoveSubscribedUsers(u ...*User) *CommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveSubscribedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.GuestName(); ok {
		if err := comment.GuestNameValidator(v); err != nil {
			return &ValidationError{Name: "guestName", err: fmt.Errorf(`ent: validator failed for field "Comment.guestName": %w`, err)}
		}
	}
	if v, ok := cu.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := comment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Comment.status": %w`, err)}
		}
	}
	if _, ok := cu.mutation.ThreadID(); cu.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.thread"`)
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GuestName(); ok {
		_spec.SetField(comment.FieldGuestName, field.TypeString, value)
	}
	if cu.mutation.GuestNameCleared() {
		_spec.ClearField(comment.FieldGuestName, field.TypeString)
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.SetField(comment.FieldMessage, field.TypeString, value)
	}
	if value, ok := cu.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ThreadTable,
			Columns: []string{comment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ThreadTable,
			Columns: []string{comment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParentCommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentCommentTable,
			Columns: []string{comment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentCommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentCommentTable,
			Columns: []string{comment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CommentAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommentAttachmentsIDs(); len(nodes) > 0 && !cu.mutation.CommentAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommentAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: cu.config, mutation: newUserCommentLikeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !cu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: cu.config, mutation: newUserCommentLikeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: cu.config, mutation: newUserCommentLikeMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentSubscriptionCreate{config: cu.config, mutation: newUserCommentSubscriptionMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSubscribedUsersIDs(); len(nodes) > 0 && !cu.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: cu.config, mutation: newUserCommentSubscriptionMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: cu.config, mutation: newUserCommentSubscriptionMutation(cu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetThreadId sets the "threadId" field.
func (cuo *CommentUpdateOne) SetThreadId(i int) *CommentUpdateOne {
	cuo.mutation.SetThreadId(i)
	return cuo
}

// SetNillableThreadId sets the "threadId" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableThreadId(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetThreadId(*i)
	}
	return cuo
}

// SetParentCommentId sets the "parentCommentId" field.
func (cuo *CommentUpdateOne) SetParentCommentId(i int) *CommentUpdateOne {
	cuo.mutation.SetParentCommentId(i)
	return cuo
}

// SetNillableParentCommentId sets the "parentCommentId" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentCommentId(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetParentCommentId(*i)
	}
	return cuo
}

// ClearParentCommentId clears the value of the "parentCommentId" field.
func (cuo *CommentUpdateOne) ClearParentCommentId() *CommentUpdateOne {
	cuo.mutation.ClearParentCommentId()
	return cuo
}

// SetUserId sets the "userId" field.
func (cuo *CommentUpdateOne) SetUserId(i int) *CommentUpdateOne {
	cuo.mutation.SetUserId(i)
	return cuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserId(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetUserId(*i)
	}
	return cuo
}

// ClearUserId clears the value of the "userId" field.
func (cuo *CommentUpdateOne) ClearUserId() *CommentUpdateOne {
	cuo.mutation.ClearUserId()
	return cuo
}

// SetGuestName sets the "guestName" field.
func (cuo *CommentUpdateOne) SetGuestName(s string) *CommentUpdateOne {
	cuo.mutation.SetGuestName(s)
	return cuo
}

// SetNillableGuestName sets the "guestName" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableGuestName(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetGuestName(*s)
	}
	return cuo
}

// ClearGuestName clears the value of the "guestName" field.
func (cuo *CommentUpdateOne) ClearGuestName() *CommentUpdateOne {
	cuo.mutation.ClearGuestName()
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *CommentUpdateOne) SetMessage(s string) *CommentUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableMessage(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetMessage(*s)
	}
	return cuo
}

// SetIPAddress sets the "ip_address" field.
func (cuo *CommentUpdateOne) SetIPAddress(s string) *CommentUpdateOne {
	cuo.mutation.SetIPAddress(s)
	return cuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIPAddress(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetIPAddress(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommentUpdateOne) SetStatus(c comment.Status) *CommentUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableStatus(c *comment.Status) *CommentUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetCreatedAt sets the "createdAt" field.
func (cuo *CommentUpdateOne) SetCreatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetThreadID sets the "thread" edge to the Thread entity by ID.
func (cuo *CommentUpdateOne) SetThreadID(id int) *CommentUpdateOne {
	cuo.mutation.SetThreadID(id)
	return cuo
}

// SetThread sets the "thread" edge to the Thread entity.
func (cuo *CommentUpdateOne) SetThread(t *Thread) *CommentUpdateOne {
	return cuo.SetThreadID(t.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (cuo *CommentUpdateOne) SetAuthorID(id int) *CommentUpdateOne {
	cuo.mutation.SetAuthorID(id)
	return cuo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorID(id *int) *CommentUpdateOne {
	if id != nil {
		cuo = cuo.SetAuthorID(*id)
	}
	return cuo
}

// SetAuthor sets the "author" edge to the User entity.
func (cuo *CommentUpdateOne) SetAuthor(u *User) *CommentUpdateOne {
	return cuo.SetAuthorID(u.ID)
}

// SetParentCommentID sets the "parent_comment" edge to the Comment entity by ID.
func (cuo *CommentUpdateOne) SetParentCommentID(id int) *CommentUpdateOne {
	cuo.mutation.SetParentCommentID(id)
	return cuo
}

// SetNillableParentCommentID sets the "parent_comment" edge to the Comment entity by ID if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentCommentID(id *int) *CommentUpdateOne {
	if id != nil {
		cuo = cuo.SetParentCommentID(*id)
	}
	return cuo
}

// SetParentComment sets the "parent_comment" edge to the Comment entity.
func (cuo *CommentUpdateOne) SetParentComment(c *Comment) *CommentUpdateOne {
	return cuo.SetParentCommentID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Comment entity by IDs.
func (cuo *CommentUpdateOne) AddReplyIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddReplyIDs(ids...)
	return cuo
}

// AddReplies adds the "replies" edges to the Comment entity.
func (cuo *CommentUpdateOne) AddReplies(c ...*Comment) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddReplyIDs(ids...)
}

// AddCommentAttachmentIDs adds the "comment_attachments" edge to the CommentAttachment entity by IDs.
func (cuo *CommentUpdateOne) AddCommentAttachmentIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddCommentAttachmentIDs(ids...)
	return cuo
}

// AddCommentAttachments adds the "comment_attachments" edges to the CommentAttachment entity.
func (cuo *CommentUpdateOne) AddCommentAttachments(c ...*CommentAttachment) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCommentAttachmentIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (cuo *CommentUpdateOne) AddLikedUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddLikedUserIDs(ids...)
	return cuo
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (cuo *CommentUpdateOne) AddLikedUsers(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (cuo *CommentUpdateOne) AddSubscribedUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.AddSubscribedUserIDs(ids...)
	return cuo
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (cuo *CommentUpdateOne) AddSubscribedUsers(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddSubscribedUserIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (cuo *CommentUpdateOne) ClearThread() *CommentUpdateOne {
	cuo.mutation.ClearThread()
	return cuo
}

// ClearAuthor clears the "author" edge to the User entity.
func (cuo *CommentUpdateOne) ClearAuthor() *CommentUpdateOne {
	cuo.mutation.ClearAuthor()
	return cuo
}

// ClearParentComment clears the "parent_comment" edge to the Comment entity.
func (cuo *CommentUpdateOne) ClearParentComment() *CommentUpdateOne {
	cuo.mutation.ClearParentComment()
	return cuo
}

// ClearReplies clears all "replies" edges to the Comment entity.
func (cuo *CommentUpdateOne) ClearReplies() *CommentUpdateOne {
	cuo.mutation.ClearReplies()
	return cuo
}

// RemoveReplyIDs removes the "replies" edge to Comment entities by IDs.
func (cuo *CommentUpdateOne) RemoveReplyIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveReplyIDs(ids...)
	return cuo
}

// RemoveReplies removes "replies" edges to Comment entities.
func (cuo *CommentUpdateOne) RemoveReplies(c ...*Comment) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveReplyIDs(ids...)
}

// ClearCommentAttachments clears all "comment_attachments" edges to the CommentAttachment entity.
func (cuo *CommentUpdateOne) ClearCommentAttachments() *CommentUpdateOne {
	cuo.mutation.ClearCommentAttachments()
	return cuo
}

// RemoveCommentAttachmentIDs removes the "comment_attachments" edge to CommentAttachment entities by IDs.
func (cuo *CommentUpdateOne) RemoveCommentAttachmentIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveCommentAttachmentIDs(ids...)
	return cuo
}

// RemoveCommentAttachments removes "comment_attachments" edges to CommentAttachment entities.
func (cuo *CommentUpdateOne) RemoveCommentAttachments(c ...*CommentAttachment) *CommentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCommentAttachmentIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (cuo *CommentUpdateOne) ClearLikedUsers() *CommentUpdateOne {
	cuo.mutation.ClearLikedUsers()
	return cuo
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (cuo *CommentUpdateOne) RemoveLikedUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveLikedUserIDs(ids...)
	return cuo
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (cuo *CommentUpdateOne) RemoveLikedUsers(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveLikedUserIDs(ids...)
}

// ClearSubscribedUsers clears all "subscribed_users" edges to the User entity.
func (cuo *CommentUpdateOne) ClearSubscribedUsers() *CommentUpdateOne {
	cuo.mutation.ClearSubscribedUsers()
	return cuo
}

// RemoveSubscribedUserIDs removes the "subscribed_users" edge to User entities by IDs.
func (cuo *CommentUpdateOne) RemoveSubscribedUserIDs(ids ...int) *CommentUpdateOne {
	cuo.mutation.RemoveSubscribedUserIDs(ids...)
	return cuo
}

// RemoveSubscribedUsers removes "subscribed_users" edges to User entities.
func (cuo *CommentUpdateOne) RemoveSubscribedUsers(u ...*User) *CommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveSubscribedUserIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.GuestName(); ok {
		if err := comment.GuestNameValidator(v); err != nil {
			return &ValidationError{Name: "guestName", err: fmt.Errorf(`ent: validator failed for field "Comment.guestName": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := comment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Comment.status": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.ThreadID(); cuo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.thread"`)
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GuestName(); ok {
		_spec.SetField(comment.FieldGuestName, field.TypeString, value)
	}
	if cuo.mutation.GuestNameCleared() {
		_spec.ClearField(comment.FieldGuestName, field.TypeString)
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.SetField(comment.FieldMessage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ThreadTable,
			Columns: []string{comment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ThreadTable,
			Columns: []string{comment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParentCommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentCommentTable,
			Columns: []string{comment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentCommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ParentCommentTable,
			Columns: []string{comment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CommentAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommentAttachmentsIDs(); len(nodes) > 0 && !cuo.mutation.CommentAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommentAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.CommentAttachmentsTable,
			Columns: []string{comment.CommentAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: cuo.config, mutation: newUserCommentLikeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !cuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: cuo.config, mutation: newUserCommentLikeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.LikedUsersTable,
			Columns: comment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: cuo.config, mutation: newUserCommentLikeMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentSubscriptionCreate{config: cuo.config, mutation: newUserCommentSubscriptionMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSubscribedUsersIDs(); len(nodes) > 0 && !cuo.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: cuo.config, mutation: newUserCommentSubscriptionMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.SubscribedUsersTable,
			Columns: comment.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: cuo.config, mutation: newUserCommentSubscriptionMutation(cuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
