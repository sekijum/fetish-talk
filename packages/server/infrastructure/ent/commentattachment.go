// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentattachment"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CommentAttachment is the model entity for the CommentAttachment schema.
type CommentAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID int `json:"comment_id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Type holds the value of the "type" field.
	Type commentattachment.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentAttachmentQuery when eager-loading is set.
	Edges        CommentAttachmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentAttachmentEdges holds the relations/edges for other nodes in the graph.
type CommentAttachmentEdges struct {
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentAttachmentEdges) CommentOrErr() (*Comment, error) {
	if e.Comment != nil {
		return e.Comment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentAttachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentattachment.FieldID, commentattachment.FieldCommentID:
			values[i] = new(sql.NullInt64)
		case commentattachment.FieldPath, commentattachment.FieldType:
			values[i] = new(sql.NullString)
		case commentattachment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentAttachment fields.
func (ca *CommentAttachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = int(value.Int64)
		case commentattachment.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				ca.CommentID = int(value.Int64)
			}
		case commentattachment.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				ca.Path = value.String
			}
		case commentattachment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ca.Type = commentattachment.Type(value.String)
			}
		case commentattachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommentAttachment.
// This includes values selected through modifiers, order, etc.
func (ca *CommentAttachment) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryComment queries the "comment" edge of the CommentAttachment entity.
func (ca *CommentAttachment) QueryComment() *CommentQuery {
	return NewCommentAttachmentClient(ca.config).QueryComment(ca)
}

// Update returns a builder for updating this CommentAttachment.
// Note that you need to call CommentAttachment.Unwrap() before calling this method if this CommentAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CommentAttachment) Update() *CommentAttachmentUpdateOne {
	return NewCommentAttachmentClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CommentAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CommentAttachment) Unwrap() *CommentAttachment {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommentAttachment is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CommentAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("CommentAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.CommentID))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(ca.Path)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ca.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommentAttachments is a parsable slice of CommentAttachment.
type CommentAttachments []*CommentAttachment
