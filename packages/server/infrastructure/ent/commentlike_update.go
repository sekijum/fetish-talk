// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentlike"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentLikeUpdate is the builder for updating CommentLike entities.
type CommentLikeUpdate struct {
	config
	hooks    []Hook
	mutation *CommentLikeMutation
}

// Where appends a list predicates to the CommentLikeUpdate builder.
func (clu *CommentLikeUpdate) Where(ps ...predicate.CommentLike) *CommentLikeUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetCommentID sets the "comment_id" field.
func (clu *CommentLikeUpdate) SetCommentID(i int) *CommentLikeUpdate {
	clu.mutation.SetCommentID(i)
	return clu
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableCommentID(i *int) *CommentLikeUpdate {
	if i != nil {
		clu.SetCommentID(*i)
	}
	return clu
}

// SetUserID sets the "user_id" field.
func (clu *CommentLikeUpdate) SetUserID(i int) *CommentLikeUpdate {
	clu.mutation.SetUserID(i)
	return clu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableUserID(i *int) *CommentLikeUpdate {
	if i != nil {
		clu.SetUserID(*i)
	}
	return clu
}

// SetCreatedAt sets the "created_at" field.
func (clu *CommentLikeUpdate) SetCreatedAt(t time.Time) *CommentLikeUpdate {
	clu.mutation.SetCreatedAt(t)
	return clu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clu *CommentLikeUpdate) SetNillableCreatedAt(t *time.Time) *CommentLikeUpdate {
	if t != nil {
		clu.SetCreatedAt(*t)
	}
	return clu
}

// SetComment sets the "comment" edge to the Comment entity.
func (clu *CommentLikeUpdate) SetComment(c *Comment) *CommentLikeUpdate {
	return clu.SetCommentID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (clu *CommentLikeUpdate) SetUser(u *User) *CommentLikeUpdate {
	return clu.SetUserID(u.ID)
}

// Mutation returns the CommentLikeMutation object of the builder.
func (clu *CommentLikeUpdate) Mutation() *CommentLikeMutation {
	return clu.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (clu *CommentLikeUpdate) ClearComment() *CommentLikeUpdate {
	clu.mutation.ClearComment()
	return clu
}

// ClearUser clears the "user" edge to the User entity.
func (clu *CommentLikeUpdate) ClearUser() *CommentLikeUpdate {
	clu.mutation.ClearUser()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CommentLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CommentLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CommentLikeUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CommentLikeUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CommentLikeUpdate) check() error {
	if _, ok := clu.mutation.CommentID(); clu.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentLike.comment"`)
	}
	if _, ok := clu.mutation.UserID(); clu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentLike.user"`)
	}
	return nil
}

func (clu *CommentLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentlike.Table, commentlike.Columns, sqlgraph.NewFieldSpec(commentlike.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.CreatedAt(); ok {
		_spec.SetField(commentlike.FieldCreatedAt, field.TypeTime, value)
	}
	if clu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.CommentTable,
			Columns: []string{commentlike.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.CommentTable,
			Columns: []string{commentlike.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.UserTable,
			Columns: []string{commentlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.UserTable,
			Columns: []string{commentlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CommentLikeUpdateOne is the builder for updating a single CommentLike entity.
type CommentLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentLikeMutation
}

// SetCommentID sets the "comment_id" field.
func (cluo *CommentLikeUpdateOne) SetCommentID(i int) *CommentLikeUpdateOne {
	cluo.mutation.SetCommentID(i)
	return cluo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableCommentID(i *int) *CommentLikeUpdateOne {
	if i != nil {
		cluo.SetCommentID(*i)
	}
	return cluo
}

// SetUserID sets the "user_id" field.
func (cluo *CommentLikeUpdateOne) SetUserID(i int) *CommentLikeUpdateOne {
	cluo.mutation.SetUserID(i)
	return cluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableUserID(i *int) *CommentLikeUpdateOne {
	if i != nil {
		cluo.SetUserID(*i)
	}
	return cluo
}

// SetCreatedAt sets the "created_at" field.
func (cluo *CommentLikeUpdateOne) SetCreatedAt(t time.Time) *CommentLikeUpdateOne {
	cluo.mutation.SetCreatedAt(t)
	return cluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cluo *CommentLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentLikeUpdateOne {
	if t != nil {
		cluo.SetCreatedAt(*t)
	}
	return cluo
}

// SetComment sets the "comment" edge to the Comment entity.
func (cluo *CommentLikeUpdateOne) SetComment(c *Comment) *CommentLikeUpdateOne {
	return cluo.SetCommentID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cluo *CommentLikeUpdateOne) SetUser(u *User) *CommentLikeUpdateOne {
	return cluo.SetUserID(u.ID)
}

// Mutation returns the CommentLikeMutation object of the builder.
func (cluo *CommentLikeUpdateOne) Mutation() *CommentLikeMutation {
	return cluo.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cluo *CommentLikeUpdateOne) ClearComment() *CommentLikeUpdateOne {
	cluo.mutation.ClearComment()
	return cluo
}

// ClearUser clears the "user" edge to the User entity.
func (cluo *CommentLikeUpdateOne) ClearUser() *CommentLikeUpdateOne {
	cluo.mutation.ClearUser()
	return cluo
}

// Where appends a list predicates to the CommentLikeUpdate builder.
func (cluo *CommentLikeUpdateOne) Where(ps ...predicate.CommentLike) *CommentLikeUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CommentLikeUpdateOne) Select(field string, fields ...string) *CommentLikeUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CommentLike entity.
func (cluo *CommentLikeUpdateOne) Save(ctx context.Context) (*CommentLike, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CommentLikeUpdateOne) SaveX(ctx context.Context) *CommentLike {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CommentLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CommentLikeUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CommentLikeUpdateOne) check() error {
	if _, ok := cluo.mutation.CommentID(); cluo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentLike.comment"`)
	}
	if _, ok := cluo.mutation.UserID(); cluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentLike.user"`)
	}
	return nil
}

func (cluo *CommentLikeUpdateOne) sqlSave(ctx context.Context) (_node *CommentLike, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentlike.Table, commentlike.Columns, sqlgraph.NewFieldSpec(commentlike.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentlike.FieldID)
		for _, f := range fields {
			if !commentlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.CreatedAt(); ok {
		_spec.SetField(commentlike.FieldCreatedAt, field.TypeTime, value)
	}
	if cluo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.CommentTable,
			Columns: []string{commentlike.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.CommentTable,
			Columns: []string{commentlike.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.UserTable,
			Columns: []string{commentlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentlike.UserTable,
			Columns: []string{commentlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommentLike{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
