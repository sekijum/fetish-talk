// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicTagQuery is the builder for querying TopicTag entities.
type TopicTagQuery struct {
	config
	ctx               *QueryContext
	order             []topictag.OrderOption
	inters            []Interceptor
	predicates        []predicate.TopicTag
	withTopics        *TopicQuery
	withTopicTaggings *TopicTaggingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TopicTagQuery builder.
func (ttq *TopicTagQuery) Where(ps ...predicate.TopicTag) *TopicTagQuery {
	ttq.predicates = append(ttq.predicates, ps...)
	return ttq
}

// Limit the number of records to be returned by this query.
func (ttq *TopicTagQuery) Limit(limit int) *TopicTagQuery {
	ttq.ctx.Limit = &limit
	return ttq
}

// Offset to start from.
func (ttq *TopicTagQuery) Offset(offset int) *TopicTagQuery {
	ttq.ctx.Offset = &offset
	return ttq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttq *TopicTagQuery) Unique(unique bool) *TopicTagQuery {
	ttq.ctx.Unique = &unique
	return ttq
}

// Order specifies how the records should be ordered.
func (ttq *TopicTagQuery) Order(o ...topictag.OrderOption) *TopicTagQuery {
	ttq.order = append(ttq.order, o...)
	return ttq
}

// QueryTopics chains the current query on the "topics" edge.
func (ttq *TopicTagQuery) QueryTopics() *TopicQuery {
	query := (&TopicClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topictag.Table, topictag.FieldID, selector),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topictag.TopicsTable, topictag.TopicsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTopicTaggings chains the current query on the "topic_taggings" edge.
func (ttq *TopicTagQuery) QueryTopicTaggings() *TopicTaggingQuery {
	query := (&TopicTaggingClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topictag.Table, topictag.FieldID, selector),
			sqlgraph.To(topictagging.Table, topictagging.TagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topictag.TopicTaggingsTable, topictag.TopicTaggingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TopicTag entity from the query.
// Returns a *NotFoundError when no TopicTag was found.
func (ttq *TopicTagQuery) First(ctx context.Context) (*TopicTag, error) {
	nodes, err := ttq.Limit(1).All(setContextOp(ctx, ttq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{topictag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttq *TopicTagQuery) FirstX(ctx context.Context) *TopicTag {
	node, err := ttq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TopicTag ID from the query.
// Returns a *NotFoundError when no TopicTag ID was found.
func (ttq *TopicTagQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttq.Limit(1).IDs(setContextOp(ctx, ttq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{topictag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttq *TopicTagQuery) FirstIDX(ctx context.Context) int {
	id, err := ttq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TopicTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TopicTag entity is found.
// Returns a *NotFoundError when no TopicTag entities are found.
func (ttq *TopicTagQuery) Only(ctx context.Context) (*TopicTag, error) {
	nodes, err := ttq.Limit(2).All(setContextOp(ctx, ttq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{topictag.Label}
	default:
		return nil, &NotSingularError{topictag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttq *TopicTagQuery) OnlyX(ctx context.Context) *TopicTag {
	node, err := ttq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TopicTag ID in the query.
// Returns a *NotSingularError when more than one TopicTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttq *TopicTagQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttq.Limit(2).IDs(setContextOp(ctx, ttq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{topictag.Label}
	default:
		err = &NotSingularError{topictag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttq *TopicTagQuery) OnlyIDX(ctx context.Context) int {
	id, err := ttq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TopicTags.
func (ttq *TopicTagQuery) All(ctx context.Context) ([]*TopicTag, error) {
	ctx = setContextOp(ctx, ttq.ctx, "All")
	if err := ttq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TopicTag, *TopicTagQuery]()
	return withInterceptors[[]*TopicTag](ctx, ttq, qr, ttq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttq *TopicTagQuery) AllX(ctx context.Context) []*TopicTag {
	nodes, err := ttq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TopicTag IDs.
func (ttq *TopicTagQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ttq.ctx.Unique == nil && ttq.path != nil {
		ttq.Unique(true)
	}
	ctx = setContextOp(ctx, ttq.ctx, "IDs")
	if err = ttq.Select(topictag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttq *TopicTagQuery) IDsX(ctx context.Context) []int {
	ids, err := ttq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttq *TopicTagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Count")
	if err := ttq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttq, querierCount[*TopicTagQuery](), ttq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttq *TopicTagQuery) CountX(ctx context.Context) int {
	count, err := ttq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttq *TopicTagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Exist")
	switch _, err := ttq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttq *TopicTagQuery) ExistX(ctx context.Context) bool {
	exist, err := ttq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TopicTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttq *TopicTagQuery) Clone() *TopicTagQuery {
	if ttq == nil {
		return nil
	}
	return &TopicTagQuery{
		config:            ttq.config,
		ctx:               ttq.ctx.Clone(),
		order:             append([]topictag.OrderOption{}, ttq.order...),
		inters:            append([]Interceptor{}, ttq.inters...),
		predicates:        append([]predicate.TopicTag{}, ttq.predicates...),
		withTopics:        ttq.withTopics.Clone(),
		withTopicTaggings: ttq.withTopicTaggings.Clone(),
		// clone intermediate query.
		sql:  ttq.sql.Clone(),
		path: ttq.path,
	}
}

// WithTopics tells the query-builder to eager-load the nodes that are connected to
// the "topics" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TopicTagQuery) WithTopics(opts ...func(*TopicQuery)) *TopicTagQuery {
	query := (&TopicClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withTopics = query
	return ttq
}

// WithTopicTaggings tells the query-builder to eager-load the nodes that are connected to
// the "topic_taggings" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TopicTagQuery) WithTopicTaggings(opts ...func(*TopicTaggingQuery)) *TopicTagQuery {
	query := (&TopicTaggingClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withTopicTaggings = query
	return ttq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TopicTag.Query().
//		GroupBy(topictag.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttq *TopicTagQuery) GroupBy(field string, fields ...string) *TopicTagGroupBy {
	ttq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TopicTagGroupBy{build: ttq}
	grbuild.flds = &ttq.ctx.Fields
	grbuild.label = topictag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TopicTag.Query().
//		Select(topictag.FieldName).
//		Scan(ctx, &v)
func (ttq *TopicTagQuery) Select(fields ...string) *TopicTagSelect {
	ttq.ctx.Fields = append(ttq.ctx.Fields, fields...)
	sbuild := &TopicTagSelect{TopicTagQuery: ttq}
	sbuild.label = topictag.Label
	sbuild.flds, sbuild.scan = &ttq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TopicTagSelect configured with the given aggregations.
func (ttq *TopicTagQuery) Aggregate(fns ...AggregateFunc) *TopicTagSelect {
	return ttq.Select().Aggregate(fns...)
}

func (ttq *TopicTagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttq.ctx.Fields {
		if !topictag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttq.path != nil {
		prev, err := ttq.path(ctx)
		if err != nil {
			return err
		}
		ttq.sql = prev
	}
	return nil
}

func (ttq *TopicTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TopicTag, error) {
	var (
		nodes       = []*TopicTag{}
		_spec       = ttq.querySpec()
		loadedTypes = [2]bool{
			ttq.withTopics != nil,
			ttq.withTopicTaggings != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TopicTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TopicTag{config: ttq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttq.withTopics; query != nil {
		if err := ttq.loadTopics(ctx, query, nodes,
			func(n *TopicTag) { n.Edges.Topics = []*Topic{} },
			func(n *TopicTag, e *Topic) { n.Edges.Topics = append(n.Edges.Topics, e) }); err != nil {
			return nil, err
		}
	}
	if query := ttq.withTopicTaggings; query != nil {
		if err := ttq.loadTopicTaggings(ctx, query, nodes,
			func(n *TopicTag) { n.Edges.TopicTaggings = []*TopicTagging{} },
			func(n *TopicTag, e *TopicTagging) { n.Edges.TopicTaggings = append(n.Edges.TopicTaggings, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttq *TopicTagQuery) loadTopics(ctx context.Context, query *TopicQuery, nodes []*TopicTag, init func(*TopicTag), assign func(*TopicTag, *Topic)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TopicTag)
	nids := make(map[int]map[*TopicTag]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(topictag.TopicsTable)
		s.Join(joinT).On(s.C(topic.FieldID), joinT.C(topictag.TopicsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(topictag.TopicsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(topictag.TopicsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*TopicTag]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Topic](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "topics" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ttq *TopicTagQuery) loadTopicTaggings(ctx context.Context, query *TopicTaggingQuery, nodes []*TopicTag, init func(*TopicTag), assign func(*TopicTag, *TopicTagging)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TopicTag)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(topictagging.FieldTagId)
	}
	query.Where(predicate.TopicTagging(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(topictag.TopicTaggingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TagId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tagId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (ttq *TopicTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttq.querySpec()
	_spec.Node.Columns = ttq.ctx.Fields
	if len(ttq.ctx.Fields) > 0 {
		_spec.Unique = ttq.ctx.Unique != nil && *ttq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttq.driver, _spec)
}

func (ttq *TopicTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(topictag.Table, topictag.Columns, sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt))
	_spec.From = ttq.sql
	if unique := ttq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttq.path != nil {
		_spec.Unique = true
	}
	if fields := ttq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topictag.FieldID)
		for i := range fields {
			if fields[i] != topictag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttq *TopicTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttq.driver.Dialect())
	t1 := builder.Table(topictag.Table)
	columns := ttq.ctx.Fields
	if len(columns) == 0 {
		columns = topictag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttq.sql != nil {
		selector = ttq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttq.ctx.Unique != nil && *ttq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttq.predicates {
		p(selector)
	}
	for _, p := range ttq.order {
		p(selector)
	}
	if offset := ttq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TopicTagGroupBy is the group-by builder for TopicTag entities.
type TopicTagGroupBy struct {
	selector
	build *TopicTagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttgb *TopicTagGroupBy) Aggregate(fns ...AggregateFunc) *TopicTagGroupBy {
	ttgb.fns = append(ttgb.fns, fns...)
	return ttgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttgb *TopicTagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttgb.build.ctx, "GroupBy")
	if err := ttgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TopicTagQuery, *TopicTagGroupBy](ctx, ttgb.build, ttgb, ttgb.build.inters, v)
}

func (ttgb *TopicTagGroupBy) sqlScan(ctx context.Context, root *TopicTagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttgb.fns))
	for _, fn := range ttgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttgb.flds)+len(ttgb.fns))
		for _, f := range *ttgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TopicTagSelect is the builder for selecting fields of TopicTag entities.
type TopicTagSelect struct {
	*TopicTagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tts *TopicTagSelect) Aggregate(fns ...AggregateFunc) *TopicTagSelect {
	tts.fns = append(tts.fns, fns...)
	return tts
}

// Scan applies the selector query and scans the result into the given value.
func (tts *TopicTagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tts.ctx, "Select")
	if err := tts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TopicTagQuery, *TopicTagSelect](ctx, tts.TopicTagQuery, tts, tts.inters, v)
}

func (tts *TopicTagSelect) sqlScan(ctx context.Context, root *TopicTagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tts.fns))
	for _, fn := range tts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
