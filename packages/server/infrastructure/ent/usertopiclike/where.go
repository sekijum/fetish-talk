// Code generated by ent, DO NOT EDIT.

package usertopiclike

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldUserId, v))
}

// TopicId applies equality check predicate on the "topicId" field. It's identical to TopicIdEQ.
func TopicId(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldTopicId, v))
}

// LikedAt applies equality check predicate on the "likedAt" field. It's identical to LikedAtEQ.
func LikedAt(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldLikedAt, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNotIn(FieldUserId, vs...))
}

// TopicIdEQ applies the EQ predicate on the "topicId" field.
func TopicIdEQ(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldTopicId, v))
}

// TopicIdNEQ applies the NEQ predicate on the "topicId" field.
func TopicIdNEQ(v int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNEQ(FieldTopicId, v))
}

// TopicIdIn applies the In predicate on the "topicId" field.
func TopicIdIn(vs ...int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldIn(FieldTopicId, vs...))
}

// TopicIdNotIn applies the NotIn predicate on the "topicId" field.
func TopicIdNotIn(vs ...int) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNotIn(FieldTopicId, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNotIn(FieldType, vs...))
}

// LikedAtEQ applies the EQ predicate on the "likedAt" field.
func LikedAtEQ(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldEQ(FieldLikedAt, v))
}

// LikedAtNEQ applies the NEQ predicate on the "likedAt" field.
func LikedAtNEQ(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNEQ(FieldLikedAt, v))
}

// LikedAtIn applies the In predicate on the "likedAt" field.
func LikedAtIn(vs ...time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldIn(FieldLikedAt, vs...))
}

// LikedAtNotIn applies the NotIn predicate on the "likedAt" field.
func LikedAtNotIn(vs ...time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldNotIn(FieldLikedAt, vs...))
}

// LikedAtGT applies the GT predicate on the "likedAt" field.
func LikedAtGT(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldGT(FieldLikedAt, v))
}

// LikedAtGTE applies the GTE predicate on the "likedAt" field.
func LikedAtGTE(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldGTE(FieldLikedAt, v))
}

// LikedAtLT applies the LT predicate on the "likedAt" field.
func LikedAtLT(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldLT(FieldLikedAt, v))
}

// LikedAtLTE applies the LTE predicate on the "likedAt" field.
func LikedAtLTE(v time.Time) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.FieldLTE(FieldLikedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserTopicLike {
	return predicate.UserTopicLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserTopicLike {
	return predicate.UserTopicLike(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.UserTopicLike {
	return predicate.UserTopicLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TopicColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.UserTopicLike {
	return predicate.UserTopicLike(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserTopicLike) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserTopicLike) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserTopicLike) predicate.UserTopicLike {
	return predicate.UserTopicLike(sql.NotPredicates(p))
}
