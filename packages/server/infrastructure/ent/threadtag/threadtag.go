// Code generated by ent, DO NOT EDIT.

package threadtag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the threadtag type in the database.
	Label = "thread_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeThreads holds the string denoting the threads edge name in mutations.
	EdgeThreads = "threads"
	// EdgeThreadTaggings holds the string denoting the thread_taggings edge name in mutations.
	EdgeThreadTaggings = "thread_taggings"
	// Table holds the table name of the threadtag in the database.
	Table = "thread_tags"
	// ThreadsTable is the table that holds the threads relation/edge. The primary key declared below.
	ThreadsTable = "thread_taggings"
	// ThreadsInverseTable is the table name for the Thread entity.
	// It exists in this package in order to avoid circular dependency with the "thread" package.
	ThreadsInverseTable = "threads"
	// ThreadTaggingsTable is the table that holds the thread_taggings relation/edge.
	ThreadTaggingsTable = "thread_taggings"
	// ThreadTaggingsInverseTable is the table name for the ThreadTagging entity.
	// It exists in this package in order to avoid circular dependency with the "threadtagging" package.
	ThreadTaggingsInverseTable = "thread_taggings"
	// ThreadTaggingsColumn is the table column denoting the thread_taggings relation/edge.
	ThreadTaggingsColumn = "tag_id"
)

// Columns holds all SQL columns for threadtag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

var (
	// ThreadsPrimaryKey and ThreadsColumn2 are the table columns denoting the
	// primary key for the threads relation (M2M).
	ThreadsPrimaryKey = []string{"threadId", "tagId"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ThreadTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByThreadsCount orders the results by threads count.
func ByThreadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newThreadsStep(), opts...)
	}
}

// ByThreads orders the results by threads terms.
func ByThreads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThreadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByThreadTaggingsCount orders the results by thread_taggings count.
func ByThreadTaggingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newThreadTaggingsStep(), opts...)
	}
}

// ByThreadTaggings orders the results by thread_taggings terms.
func ByThreadTaggings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThreadTaggingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newThreadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThreadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ThreadsTable, ThreadsPrimaryKey...),
	)
}
func newThreadTaggingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThreadTaggingsInverseTable, ThreadTaggingsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ThreadTaggingsTable, ThreadTaggingsColumn),
	)
}
