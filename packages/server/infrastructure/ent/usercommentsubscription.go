// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentsubscription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserCommentSubscription is the model entity for the UserCommentSubscription schema.
type UserCommentSubscription struct {
	config `json:"-"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// CommentId holds the value of the "commentId" field.
	CommentId int `json:"commentId,omitempty"`
	// メール通知を受け取るかどうかのフラグ
	IsNotified bool `json:"isNotified,omitempty"`
	// 通知画面で確認したかどうかのフラグ
	IsChecked bool `json:"isChecked,omitempty"`
	// SubscribedAt holds the value of the "subscribedAt" field.
	SubscribedAt time.Time `json:"subscribedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCommentSubscriptionQuery when eager-loading is set.
	Edges        UserCommentSubscriptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserCommentSubscriptionEdges holds the relations/edges for other nodes in the graph.
type UserCommentSubscriptionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCommentSubscriptionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCommentSubscriptionEdges) CommentOrErr() (*Comment, error) {
	if e.Comment != nil {
		return e.Comment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCommentSubscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercommentsubscription.FieldIsNotified, usercommentsubscription.FieldIsChecked:
			values[i] = new(sql.NullBool)
		case usercommentsubscription.FieldUserId, usercommentsubscription.FieldCommentId:
			values[i] = new(sql.NullInt64)
		case usercommentsubscription.FieldSubscribedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCommentSubscription fields.
func (ucs *UserCommentSubscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercommentsubscription.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ucs.UserId = int(value.Int64)
			}
		case usercommentsubscription.FieldCommentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field commentId", values[i])
			} else if value.Valid {
				ucs.CommentId = int(value.Int64)
			}
		case usercommentsubscription.FieldIsNotified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isNotified", values[i])
			} else if value.Valid {
				ucs.IsNotified = value.Bool
			}
		case usercommentsubscription.FieldIsChecked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isChecked", values[i])
			} else if value.Valid {
				ucs.IsChecked = value.Bool
			}
		case usercommentsubscription.FieldSubscribedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscribedAt", values[i])
			} else if value.Valid {
				ucs.SubscribedAt = value.Time
			}
		default:
			ucs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserCommentSubscription.
// This includes values selected through modifiers, order, etc.
func (ucs *UserCommentSubscription) Value(name string) (ent.Value, error) {
	return ucs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserCommentSubscription entity.
func (ucs *UserCommentSubscription) QueryUser() *UserQuery {
	return NewUserCommentSubscriptionClient(ucs.config).QueryUser(ucs)
}

// QueryComment queries the "comment" edge of the UserCommentSubscription entity.
func (ucs *UserCommentSubscription) QueryComment() *CommentQuery {
	return NewUserCommentSubscriptionClient(ucs.config).QueryComment(ucs)
}

// Update returns a builder for updating this UserCommentSubscription.
// Note that you need to call UserCommentSubscription.Unwrap() before calling this method if this UserCommentSubscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucs *UserCommentSubscription) Update() *UserCommentSubscriptionUpdateOne {
	return NewUserCommentSubscriptionClient(ucs.config).UpdateOne(ucs)
}

// Unwrap unwraps the UserCommentSubscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucs *UserCommentSubscription) Unwrap() *UserCommentSubscription {
	_tx, ok := ucs.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCommentSubscription is not a transactional entity")
	}
	ucs.config.driver = _tx.drv
	return ucs
}

// String implements the fmt.Stringer.
func (ucs *UserCommentSubscription) String() string {
	var builder strings.Builder
	builder.WriteString("UserCommentSubscription(")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", ucs.UserId))
	builder.WriteString(", ")
	builder.WriteString("commentId=")
	builder.WriteString(fmt.Sprintf("%v", ucs.CommentId))
	builder.WriteString(", ")
	builder.WriteString("isNotified=")
	builder.WriteString(fmt.Sprintf("%v", ucs.IsNotified))
	builder.WriteString(", ")
	builder.WriteString("isChecked=")
	builder.WriteString(fmt.Sprintf("%v", ucs.IsChecked))
	builder.WriteString(", ")
	builder.WriteString("subscribedAt=")
	builder.WriteString(ucs.SubscribedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserCommentSubscriptions is a parsable slice of UserCommentSubscription.
type UserCommentSubscriptions []*UserCommentSubscription
