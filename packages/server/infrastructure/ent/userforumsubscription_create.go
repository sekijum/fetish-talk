// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userforumsubscription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserForumSubscriptionCreate is the builder for creating a UserForumSubscription entity.
type UserForumSubscriptionCreate struct {
	config
	mutation *UserForumSubscriptionMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (ufsc *UserForumSubscriptionCreate) SetUserId(i int) *UserForumSubscriptionCreate {
	ufsc.mutation.SetUserId(i)
	return ufsc
}

// SetForumId sets the "forumId" field.
func (ufsc *UserForumSubscriptionCreate) SetForumId(i int) *UserForumSubscriptionCreate {
	ufsc.mutation.SetForumId(i)
	return ufsc
}

// SetIsNotified sets the "isNotified" field.
func (ufsc *UserForumSubscriptionCreate) SetIsNotified(b bool) *UserForumSubscriptionCreate {
	ufsc.mutation.SetIsNotified(b)
	return ufsc
}

// SetNillableIsNotified sets the "isNotified" field if the given value is not nil.
func (ufsc *UserForumSubscriptionCreate) SetNillableIsNotified(b *bool) *UserForumSubscriptionCreate {
	if b != nil {
		ufsc.SetIsNotified(*b)
	}
	return ufsc
}

// SetSubscribedAt sets the "subscribedAt" field.
func (ufsc *UserForumSubscriptionCreate) SetSubscribedAt(t time.Time) *UserForumSubscriptionCreate {
	ufsc.mutation.SetSubscribedAt(t)
	return ufsc
}

// SetNillableSubscribedAt sets the "subscribedAt" field if the given value is not nil.
func (ufsc *UserForumSubscriptionCreate) SetNillableSubscribedAt(t *time.Time) *UserForumSubscriptionCreate {
	if t != nil {
		ufsc.SetSubscribedAt(*t)
	}
	return ufsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufsc *UserForumSubscriptionCreate) SetUserID(id int) *UserForumSubscriptionCreate {
	ufsc.mutation.SetUserID(id)
	return ufsc
}

// SetUser sets the "user" edge to the User entity.
func (ufsc *UserForumSubscriptionCreate) SetUser(u *User) *UserForumSubscriptionCreate {
	return ufsc.SetUserID(u.ID)
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (ufsc *UserForumSubscriptionCreate) SetForumID(id int) *UserForumSubscriptionCreate {
	ufsc.mutation.SetForumID(id)
	return ufsc
}

// SetForum sets the "forum" edge to the Forum entity.
func (ufsc *UserForumSubscriptionCreate) SetForum(f *Forum) *UserForumSubscriptionCreate {
	return ufsc.SetForumID(f.ID)
}

// Mutation returns the UserForumSubscriptionMutation object of the builder.
func (ufsc *UserForumSubscriptionCreate) Mutation() *UserForumSubscriptionMutation {
	return ufsc.mutation
}

// Save creates the UserForumSubscription in the database.
func (ufsc *UserForumSubscriptionCreate) Save(ctx context.Context) (*UserForumSubscription, error) {
	ufsc.defaults()
	return withHooks(ctx, ufsc.sqlSave, ufsc.mutation, ufsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufsc *UserForumSubscriptionCreate) SaveX(ctx context.Context) *UserForumSubscription {
	v, err := ufsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufsc *UserForumSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := ufsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufsc *UserForumSubscriptionCreate) ExecX(ctx context.Context) {
	if err := ufsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufsc *UserForumSubscriptionCreate) defaults() {
	if _, ok := ufsc.mutation.IsNotified(); !ok {
		v := userforumsubscription.DefaultIsNotified
		ufsc.mutation.SetIsNotified(v)
	}
	if _, ok := ufsc.mutation.SubscribedAt(); !ok {
		v := userforumsubscription.DefaultSubscribedAt()
		ufsc.mutation.SetSubscribedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufsc *UserForumSubscriptionCreate) check() error {
	if _, ok := ufsc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserForumSubscription.userId"`)}
	}
	if _, ok := ufsc.mutation.ForumId(); !ok {
		return &ValidationError{Name: "forumId", err: errors.New(`ent: missing required field "UserForumSubscription.forumId"`)}
	}
	if _, ok := ufsc.mutation.IsNotified(); !ok {
		return &ValidationError{Name: "isNotified", err: errors.New(`ent: missing required field "UserForumSubscription.isNotified"`)}
	}
	if _, ok := ufsc.mutation.SubscribedAt(); !ok {
		return &ValidationError{Name: "subscribedAt", err: errors.New(`ent: missing required field "UserForumSubscription.subscribedAt"`)}
	}
	if _, ok := ufsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserForumSubscription.user"`)}
	}
	if _, ok := ufsc.mutation.ForumID(); !ok {
		return &ValidationError{Name: "forum", err: errors.New(`ent: missing required edge "UserForumSubscription.forum"`)}
	}
	return nil
}

func (ufsc *UserForumSubscriptionCreate) sqlSave(ctx context.Context) (*UserForumSubscription, error) {
	if err := ufsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ufsc *UserForumSubscriptionCreate) createSpec() (*UserForumSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &UserForumSubscription{config: ufsc.config}
		_spec = sqlgraph.NewCreateSpec(userforumsubscription.Table, nil)
	)
	if value, ok := ufsc.mutation.IsNotified(); ok {
		_spec.SetField(userforumsubscription.FieldIsNotified, field.TypeBool, value)
		_node.IsNotified = value
	}
	if value, ok := ufsc.mutation.SubscribedAt(); ok {
		_spec.SetField(userforumsubscription.FieldSubscribedAt, field.TypeTime, value)
		_node.SubscribedAt = value
	}
	if nodes := ufsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumsubscription.UserTable,
			Columns: []string{userforumsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufsc.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumsubscription.ForumTable,
			Columns: []string{userforumsubscription.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ForumId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserForumSubscriptionCreateBulk is the builder for creating many UserForumSubscription entities in bulk.
type UserForumSubscriptionCreateBulk struct {
	config
	err      error
	builders []*UserForumSubscriptionCreate
}

// Save creates the UserForumSubscription entities in the database.
func (ufscb *UserForumSubscriptionCreateBulk) Save(ctx context.Context) ([]*UserForumSubscription, error) {
	if ufscb.err != nil {
		return nil, ufscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufscb.builders))
	nodes := make([]*UserForumSubscription, len(ufscb.builders))
	mutators := make([]Mutator, len(ufscb.builders))
	for i := range ufscb.builders {
		func(i int, root context.Context) {
			builder := ufscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserForumSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufscb *UserForumSubscriptionCreateBulk) SaveX(ctx context.Context) []*UserForumSubscription {
	v, err := ufscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufscb *UserForumSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ufscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufscb *UserForumSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ufscb.Exec(ctx); err != nil {
		panic(err)
	}
}
