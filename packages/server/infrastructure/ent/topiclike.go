// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topiclike"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TopicLike is the model entity for the TopicLike schema.
type TopicLike struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicLikeQuery when eager-loading is set.
	Edges        TopicLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TopicLikeEdges holds the relations/edges for other nodes in the graph.
type TopicLikeEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicLikeEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopicLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topiclike.FieldID, topiclike.FieldTopicID, topiclike.FieldUserID:
			values[i] = new(sql.NullInt64)
		case topiclike.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopicLike fields.
func (tl *TopicLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topiclike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case topiclike.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				tl.TopicID = int(value.Int64)
			}
		case topiclike.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tl.UserID = int(value.Int64)
			}
		case topiclike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TopicLike.
// This includes values selected through modifiers, order, etc.
func (tl *TopicLike) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the TopicLike entity.
func (tl *TopicLike) QueryTopic() *TopicQuery {
	return NewTopicLikeClient(tl.config).QueryTopic(tl)
}

// QueryUser queries the "user" edge of the TopicLike entity.
func (tl *TopicLike) QueryUser() *UserQuery {
	return NewTopicLikeClient(tl.config).QueryUser(tl)
}

// Update returns a builder for updating this TopicLike.
// Note that you need to call TopicLike.Unwrap() before calling this method if this TopicLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TopicLike) Update() *TopicLikeUpdateOne {
	return NewTopicLikeClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TopicLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TopicLike) Unwrap() *TopicLike {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopicLike is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TopicLike) String() string {
	var builder strings.Builder
	builder.WriteString("TopicLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.TopicID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tl.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TopicLikes is a parsable slice of TopicLike.
type TopicLikes []*TopicLike
