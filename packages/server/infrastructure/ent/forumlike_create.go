// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/forumlike"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ForumLikeCreate is the builder for creating a ForumLike entity.
type ForumLikeCreate struct {
	config
	mutation *ForumLikeMutation
	hooks    []Hook
}

// SetForumID sets the "forum_id" field.
func (flc *ForumLikeCreate) SetForumID(i int) *ForumLikeCreate {
	flc.mutation.SetForumID(i)
	return flc
}

// SetUserID sets the "user_id" field.
func (flc *ForumLikeCreate) SetUserID(i int) *ForumLikeCreate {
	flc.mutation.SetUserID(i)
	return flc
}

// SetCreatedAt sets the "created_at" field.
func (flc *ForumLikeCreate) SetCreatedAt(t time.Time) *ForumLikeCreate {
	flc.mutation.SetCreatedAt(t)
	return flc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (flc *ForumLikeCreate) SetNillableCreatedAt(t *time.Time) *ForumLikeCreate {
	if t != nil {
		flc.SetCreatedAt(*t)
	}
	return flc
}

// SetID sets the "id" field.
func (flc *ForumLikeCreate) SetID(i int) *ForumLikeCreate {
	flc.mutation.SetID(i)
	return flc
}

// SetForum sets the "forum" edge to the Forum entity.
func (flc *ForumLikeCreate) SetForum(f *Forum) *ForumLikeCreate {
	return flc.SetForumID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (flc *ForumLikeCreate) SetUser(u *User) *ForumLikeCreate {
	return flc.SetUserID(u.ID)
}

// Mutation returns the ForumLikeMutation object of the builder.
func (flc *ForumLikeCreate) Mutation() *ForumLikeMutation {
	return flc.mutation
}

// Save creates the ForumLike in the database.
func (flc *ForumLikeCreate) Save(ctx context.Context) (*ForumLike, error) {
	flc.defaults()
	return withHooks(ctx, flc.sqlSave, flc.mutation, flc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (flc *ForumLikeCreate) SaveX(ctx context.Context) *ForumLike {
	v, err := flc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flc *ForumLikeCreate) Exec(ctx context.Context) error {
	_, err := flc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flc *ForumLikeCreate) ExecX(ctx context.Context) {
	if err := flc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (flc *ForumLikeCreate) defaults() {
	if _, ok := flc.mutation.CreatedAt(); !ok {
		v := forumlike.DefaultCreatedAt()
		flc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (flc *ForumLikeCreate) check() error {
	if _, ok := flc.mutation.ForumID(); !ok {
		return &ValidationError{Name: "forum_id", err: errors.New(`ent: missing required field "ForumLike.forum_id"`)}
	}
	if _, ok := flc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ForumLike.user_id"`)}
	}
	if _, ok := flc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ForumLike.created_at"`)}
	}
	if _, ok := flc.mutation.ForumID(); !ok {
		return &ValidationError{Name: "forum", err: errors.New(`ent: missing required edge "ForumLike.forum"`)}
	}
	if _, ok := flc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ForumLike.user"`)}
	}
	return nil
}

func (flc *ForumLikeCreate) sqlSave(ctx context.Context) (*ForumLike, error) {
	if err := flc.check(); err != nil {
		return nil, err
	}
	_node, _spec := flc.createSpec()
	if err := sqlgraph.CreateNode(ctx, flc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	flc.mutation.id = &_node.ID
	flc.mutation.done = true
	return _node, nil
}

func (flc *ForumLikeCreate) createSpec() (*ForumLike, *sqlgraph.CreateSpec) {
	var (
		_node = &ForumLike{config: flc.config}
		_spec = sqlgraph.NewCreateSpec(forumlike.Table, sqlgraph.NewFieldSpec(forumlike.FieldID, field.TypeInt))
	)
	if id, ok := flc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := flc.mutation.CreatedAt(); ok {
		_spec.SetField(forumlike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := flc.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.ForumTable,
			Columns: []string{forumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ForumID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := flc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.UserTable,
			Columns: []string{forumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ForumLikeCreateBulk is the builder for creating many ForumLike entities in bulk.
type ForumLikeCreateBulk struct {
	config
	err      error
	builders []*ForumLikeCreate
}

// Save creates the ForumLike entities in the database.
func (flcb *ForumLikeCreateBulk) Save(ctx context.Context) ([]*ForumLike, error) {
	if flcb.err != nil {
		return nil, flcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(flcb.builders))
	nodes := make([]*ForumLike, len(flcb.builders))
	mutators := make([]Mutator, len(flcb.builders))
	for i := range flcb.builders {
		func(i int, root context.Context) {
			builder := flcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForumLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, flcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, flcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, flcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (flcb *ForumLikeCreateBulk) SaveX(ctx context.Context) []*ForumLike {
	v, err := flcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (flcb *ForumLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := flcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flcb *ForumLikeCreateBulk) ExecX(ctx context.Context) {
	if err := flcb.Exec(ctx); err != nil {
		panic(err)
	}
}
