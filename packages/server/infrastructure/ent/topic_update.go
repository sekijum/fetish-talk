// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topiclike"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicnotification"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicUpdate is the builder for updating Topic entities.
type TopicUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tu *TopicUpdate) Where(ps ...predicate.Topic) *TopicUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetForumID sets the "forum_id" field.
func (tu *TopicUpdate) SetForumID(i int) *TopicUpdate {
	tu.mutation.SetForumID(i)
	return tu
}

// SetNillableForumID sets the "forum_id" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableForumID(i *int) *TopicUpdate {
	if i != nil {
		tu.SetForumID(*i)
	}
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TopicUpdate) SetUserID(i int) *TopicUpdate {
	tu.mutation.SetUserID(i)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableUserID(i *int) *TopicUpdate {
	if i != nil {
		tu.SetUserID(*i)
	}
	return tu
}

// ClearUserID clears the value of the "user_id" field.
func (tu *TopicUpdate) ClearUserID() *TopicUpdate {
	tu.mutation.ClearUserID()
	return tu
}

// SetTitle sets the "title" field.
func (tu *TopicUpdate) SetTitle(s string) *TopicUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTitle(s *string) *TopicUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetContent sets the "content" field.
func (tu *TopicUpdate) SetContent(s string) *TopicUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableContent(s *string) *TopicUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetIsDefault sets the "is_default" field.
func (tu *TopicUpdate) SetIsDefault(b bool) *TopicUpdate {
	tu.mutation.SetIsDefault(b)
	return tu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableIsDefault(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetIsDefault(*b)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TopicUpdate) SetStatus(t topic.Status) *TopicUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableStatus(t *topic.Status) *TopicUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TopicUpdate) SetCreatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableCreatedAt(t *time.Time) *TopicUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TopicUpdate) SetUpdatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetForum sets the "forum" edge to the Forum entity.
func (tu *TopicUpdate) SetForum(f *Forum) *TopicUpdate {
	return tu.SetForumID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tu *TopicUpdate) SetUser(u *User) *TopicUpdate {
	return tu.SetUserID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tu *TopicUpdate) AddCommentIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComments adds the "comments" edges to the Comment entity.
func (tu *TopicUpdate) AddComments(c ...*Comment) *TopicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// AddTopicLikeIDs adds the "topic_likes" edge to the TopicLike entity by IDs.
func (tu *TopicUpdate) AddTopicLikeIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddTopicLikeIDs(ids...)
	return tu
}

// AddTopicLikes adds the "topic_likes" edges to the TopicLike entity.
func (tu *TopicUpdate) AddTopicLikes(t ...*TopicLike) *TopicUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTopicLikeIDs(ids...)
}

// AddUserTopicNotificationIDs adds the "user_topic_notifications" edge to the UserTopicNotification entity by IDs.
func (tu *TopicUpdate) AddUserTopicNotificationIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddUserTopicNotificationIDs(ids...)
	return tu
}

// AddUserTopicNotifications adds the "user_topic_notifications" edges to the UserTopicNotification entity.
func (tu *TopicUpdate) AddUserTopicNotifications(u ...*UserTopicNotification) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserTopicNotificationIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tu *TopicUpdate) Mutation() *TopicMutation {
	return tu.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (tu *TopicUpdate) ClearForum() *TopicUpdate {
	tu.mutation.ClearForum()
	return tu
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TopicUpdate) ClearUser() *TopicUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tu *TopicUpdate) ClearComments() *TopicUpdate {
	tu.mutation.ClearComments()
	return tu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tu *TopicUpdate) RemoveCommentIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComments removes "comments" edges to Comment entities.
func (tu *TopicUpdate) RemoveComments(c ...*Comment) *TopicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearTopicLikes clears all "topic_likes" edges to the TopicLike entity.
func (tu *TopicUpdate) ClearTopicLikes() *TopicUpdate {
	tu.mutation.ClearTopicLikes()
	return tu
}

// RemoveTopicLikeIDs removes the "topic_likes" edge to TopicLike entities by IDs.
func (tu *TopicUpdate) RemoveTopicLikeIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveTopicLikeIDs(ids...)
	return tu
}

// RemoveTopicLikes removes "topic_likes" edges to TopicLike entities.
func (tu *TopicUpdate) RemoveTopicLikes(t ...*TopicLike) *TopicUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTopicLikeIDs(ids...)
}

// ClearUserTopicNotifications clears all "user_topic_notifications" edges to the UserTopicNotification entity.
func (tu *TopicUpdate) ClearUserTopicNotifications() *TopicUpdate {
	tu.mutation.ClearUserTopicNotifications()
	return tu
}

// RemoveUserTopicNotificationIDs removes the "user_topic_notifications" edge to UserTopicNotification entities by IDs.
func (tu *TopicUpdate) RemoveUserTopicNotificationIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveUserTopicNotificationIDs(ids...)
	return tu
}

// RemoveUserTopicNotifications removes "user_topic_notifications" edges to UserTopicNotification entities.
func (tu *TopicUpdate) RemoveUserTopicNotifications(u ...*UserTopicNotification) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserTopicNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TopicUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TopicUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TopicUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TopicUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TopicUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TopicUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := topic.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Topic.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.ForumID(); tu.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.forum"`)
	}
	return nil
}

func (tu *TopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(topic.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsDefault(); ok {
		_spec.SetField(topic.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.UserTable,
			Columns: []string{topic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.UserTable,
			Columns: []string{topic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TopicLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTopicLikesIDs(); len(nodes) > 0 && !tu.mutation.TopicLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TopicLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserTopicNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUserTopicNotificationsIDs(); len(nodes) > 0 && !tu.mutation.UserTopicNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserTopicNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TopicUpdateOne is the builder for updating a single Topic entity.
type TopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMutation
}

// SetForumID sets the "forum_id" field.
func (tuo *TopicUpdateOne) SetForumID(i int) *TopicUpdateOne {
	tuo.mutation.SetForumID(i)
	return tuo
}

// SetNillableForumID sets the "forum_id" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableForumID(i *int) *TopicUpdateOne {
	if i != nil {
		tuo.SetForumID(*i)
	}
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TopicUpdateOne) SetUserID(i int) *TopicUpdateOne {
	tuo.mutation.SetUserID(i)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableUserID(i *int) *TopicUpdateOne {
	if i != nil {
		tuo.SetUserID(*i)
	}
	return tuo
}

// ClearUserID clears the value of the "user_id" field.
func (tuo *TopicUpdateOne) ClearUserID() *TopicUpdateOne {
	tuo.mutation.ClearUserID()
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TopicUpdateOne) SetTitle(s string) *TopicUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTitle(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TopicUpdateOne) SetContent(s string) *TopicUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableContent(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetIsDefault sets the "is_default" field.
func (tuo *TopicUpdateOne) SetIsDefault(b bool) *TopicUpdateOne {
	tuo.mutation.SetIsDefault(b)
	return tuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableIsDefault(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetIsDefault(*b)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TopicUpdateOne) SetStatus(t topic.Status) *TopicUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableStatus(t *topic.Status) *TopicUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TopicUpdateOne) SetCreatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableCreatedAt(t *time.Time) *TopicUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TopicUpdateOne) SetUpdatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetForum sets the "forum" edge to the Forum entity.
func (tuo *TopicUpdateOne) SetForum(f *Forum) *TopicUpdateOne {
	return tuo.SetForumID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TopicUpdateOne) SetUser(u *User) *TopicUpdateOne {
	return tuo.SetUserID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tuo *TopicUpdateOne) AddCommentIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (tuo *TopicUpdateOne) AddComments(c ...*Comment) *TopicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// AddTopicLikeIDs adds the "topic_likes" edge to the TopicLike entity by IDs.
func (tuo *TopicUpdateOne) AddTopicLikeIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddTopicLikeIDs(ids...)
	return tuo
}

// AddTopicLikes adds the "topic_likes" edges to the TopicLike entity.
func (tuo *TopicUpdateOne) AddTopicLikes(t ...*TopicLike) *TopicUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTopicLikeIDs(ids...)
}

// AddUserTopicNotificationIDs adds the "user_topic_notifications" edge to the UserTopicNotification entity by IDs.
func (tuo *TopicUpdateOne) AddUserTopicNotificationIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddUserTopicNotificationIDs(ids...)
	return tuo
}

// AddUserTopicNotifications adds the "user_topic_notifications" edges to the UserTopicNotification entity.
func (tuo *TopicUpdateOne) AddUserTopicNotifications(u ...*UserTopicNotification) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserTopicNotificationIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tuo *TopicUpdateOne) Mutation() *TopicMutation {
	return tuo.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (tuo *TopicUpdateOne) ClearForum() *TopicUpdateOne {
	tuo.mutation.ClearForum()
	return tuo
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TopicUpdateOne) ClearUser() *TopicUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tuo *TopicUpdateOne) ClearComments() *TopicUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tuo *TopicUpdateOne) RemoveCommentIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (tuo *TopicUpdateOne) RemoveComments(c ...*Comment) *TopicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearTopicLikes clears all "topic_likes" edges to the TopicLike entity.
func (tuo *TopicUpdateOne) ClearTopicLikes() *TopicUpdateOne {
	tuo.mutation.ClearTopicLikes()
	return tuo
}

// RemoveTopicLikeIDs removes the "topic_likes" edge to TopicLike entities by IDs.
func (tuo *TopicUpdateOne) RemoveTopicLikeIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveTopicLikeIDs(ids...)
	return tuo
}

// RemoveTopicLikes removes "topic_likes" edges to TopicLike entities.
func (tuo *TopicUpdateOne) RemoveTopicLikes(t ...*TopicLike) *TopicUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTopicLikeIDs(ids...)
}

// ClearUserTopicNotifications clears all "user_topic_notifications" edges to the UserTopicNotification entity.
func (tuo *TopicUpdateOne) ClearUserTopicNotifications() *TopicUpdateOne {
	tuo.mutation.ClearUserTopicNotifications()
	return tuo
}

// RemoveUserTopicNotificationIDs removes the "user_topic_notifications" edge to UserTopicNotification entities by IDs.
func (tuo *TopicUpdateOne) RemoveUserTopicNotificationIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveUserTopicNotificationIDs(ids...)
	return tuo
}

// RemoveUserTopicNotifications removes "user_topic_notifications" edges to UserTopicNotification entities.
func (tuo *TopicUpdateOne) RemoveUserTopicNotifications(u ...*UserTopicNotification) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserTopicNotificationIDs(ids...)
}

// Where appends a list predicates to the TopicUpdate builder.
func (tuo *TopicUpdateOne) Where(ps ...predicate.Topic) *TopicUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TopicUpdateOne) Select(field string, fields ...string) *TopicUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Topic entity.
func (tuo *TopicUpdateOne) Save(ctx context.Context) (*Topic, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TopicUpdateOne) SaveX(ctx context.Context) *Topic {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TopicUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TopicUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TopicUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TopicUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := topic.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Topic.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.ForumID(); tuo.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.forum"`)
	}
	return nil
}

func (tuo *TopicUpdateOne) sqlSave(ctx context.Context) (_node *Topic, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for _, f := range fields {
			if !topic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(topic.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsDefault(); ok {
		_spec.SetField(topic.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.UserTable,
			Columns: []string{topic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.UserTable,
			Columns: []string{topic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TopicLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTopicLikesIDs(); len(nodes) > 0 && !tuo.mutation.TopicLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TopicLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.TopicLikesTable,
			Columns: []string{topic.TopicLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserTopicNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUserTopicNotificationsIDs(); len(nodes) > 0 && !tuo.mutation.UserTopicNotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserTopicNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.UserTopicNotificationsTable,
			Columns: []string{topic.UserTopicNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Topic{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
