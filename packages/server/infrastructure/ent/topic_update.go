// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicUpdate is the builder for updating Topic entities.
type TopicUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tu *TopicUpdate) Where(ps ...predicate.Topic) *TopicUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetForumId sets the "forumId" field.
func (tu *TopicUpdate) SetForumId(i int) *TopicUpdate {
	tu.mutation.SetForumId(i)
	return tu
}

// SetNillableForumId sets the "forumId" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableForumId(i *int) *TopicUpdate {
	if i != nil {
		tu.SetForumId(*i)
	}
	return tu
}

// SetUserId sets the "userId" field.
func (tu *TopicUpdate) SetUserId(i int) *TopicUpdate {
	tu.mutation.SetUserId(i)
	return tu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableUserId(i *int) *TopicUpdate {
	if i != nil {
		tu.SetUserId(*i)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TopicUpdate) SetTitle(s string) *TopicUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableTitle(s *string) *TopicUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// ClearTitle clears the value of the "title" field.
func (tu *TopicUpdate) ClearTitle() *TopicUpdate {
	tu.mutation.ClearTitle()
	return tu
}

// SetDescription sets the "description" field.
func (tu *TopicUpdate) SetDescription(s string) *TopicUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableDescription(s *string) *TopicUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TopicUpdate) ClearDescription() *TopicUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetThumbnailUrl sets the "thumbnailUrl" field.
func (tu *TopicUpdate) SetThumbnailUrl(s string) *TopicUpdate {
	tu.mutation.SetThumbnailUrl(s)
	return tu
}

// SetNillableThumbnailUrl sets the "thumbnailUrl" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableThumbnailUrl(s *string) *TopicUpdate {
	if s != nil {
		tu.SetThumbnailUrl(*s)
	}
	return tu
}

// ClearThumbnailUrl clears the value of the "thumbnailUrl" field.
func (tu *TopicUpdate) ClearThumbnailUrl() *TopicUpdate {
	tu.mutation.ClearThumbnailUrl()
	return tu
}

// SetIsAutoGenerated sets the "isAutoGenerated" field.
func (tu *TopicUpdate) SetIsAutoGenerated(b bool) *TopicUpdate {
	tu.mutation.SetIsAutoGenerated(b)
	return tu
}

// SetNillableIsAutoGenerated sets the "isAutoGenerated" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableIsAutoGenerated(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetIsAutoGenerated(*b)
	}
	return tu
}

// SetIsNotifyOnComment sets the "isNotifyOnComment" field.
func (tu *TopicUpdate) SetIsNotifyOnComment(b bool) *TopicUpdate {
	tu.mutation.SetIsNotifyOnComment(b)
	return tu
}

// SetNillableIsNotifyOnComment sets the "isNotifyOnComment" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableIsNotifyOnComment(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetIsNotifyOnComment(*b)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TopicUpdate) SetStatus(t topic.Status) *TopicUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableStatus(t *topic.Status) *TopicUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetCreatedAt sets the "createdAt" field.
func (tu *TopicUpdate) SetCreatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableCreatedAt(t *time.Time) *TopicUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tu *TopicUpdate) SetUpdatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (tu *TopicUpdate) SetForumID(id int) *TopicUpdate {
	tu.mutation.SetForumID(id)
	return tu
}

// SetForum sets the "forum" edge to the Forum entity.
func (tu *TopicUpdate) SetForum(f *Forum) *TopicUpdate {
	return tu.SetForumID(f.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TopicUpdate) SetOwnerID(id int) *TopicUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TopicUpdate) SetOwner(u *User) *TopicUpdate {
	return tu.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tu *TopicUpdate) AddCommentIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComments adds the "comments" edges to the Comment entity.
func (tu *TopicUpdate) AddComments(c ...*Comment) *TopicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the TopicTag entity by IDs.
func (tu *TopicUpdate) AddTagIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the TopicTag entity.
func (tu *TopicUpdate) AddTags(t ...*TopicTag) *TopicUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tu *TopicUpdate) AddLikedUserIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddLikedUserIDs(ids...)
	return tu
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tu *TopicUpdate) AddLikedUsers(u ...*User) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (tu *TopicUpdate) AddSubscribedUserIDs(ids ...int) *TopicUpdate {
	tu.mutation.AddSubscribedUserIDs(ids...)
	return tu
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (tu *TopicUpdate) AddSubscribedUsers(u ...*User) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddSubscribedUserIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tu *TopicUpdate) Mutation() *TopicMutation {
	return tu.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (tu *TopicUpdate) ClearForum() *TopicUpdate {
	tu.mutation.ClearForum()
	return tu
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TopicUpdate) ClearOwner() *TopicUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tu *TopicUpdate) ClearComments() *TopicUpdate {
	tu.mutation.ClearComments()
	return tu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tu *TopicUpdate) RemoveCommentIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComments removes "comments" edges to Comment entities.
func (tu *TopicUpdate) RemoveComments(c ...*Comment) *TopicUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the TopicTag entity.
func (tu *TopicUpdate) ClearTags() *TopicUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to TopicTag entities by IDs.
func (tu *TopicUpdate) RemoveTagIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to TopicTag entities.
func (tu *TopicUpdate) RemoveTags(t ...*TopicTag) *TopicUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tu *TopicUpdate) ClearLikedUsers() *TopicUpdate {
	tu.mutation.ClearLikedUsers()
	return tu
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tu *TopicUpdate) RemoveLikedUserIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveLikedUserIDs(ids...)
	return tu
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tu *TopicUpdate) RemoveLikedUsers(u ...*User) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveLikedUserIDs(ids...)
}

// ClearSubscribedUsers clears all "subscribed_users" edges to the User entity.
func (tu *TopicUpdate) ClearSubscribedUsers() *TopicUpdate {
	tu.mutation.ClearSubscribedUsers()
	return tu
}

// RemoveSubscribedUserIDs removes the "subscribed_users" edge to User entities by IDs.
func (tu *TopicUpdate) RemoveSubscribedUserIDs(ids ...int) *TopicUpdate {
	tu.mutation.RemoveSubscribedUserIDs(ids...)
	return tu
}

// RemoveSubscribedUsers removes "subscribed_users" edges to User entities.
func (tu *TopicUpdate) RemoveSubscribedUsers(u ...*User) *TopicUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveSubscribedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TopicUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TopicUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TopicUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TopicUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TopicUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TopicUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := topic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Topic.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := topic.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Topic.description": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := topic.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Topic.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.ForumID(); tu.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.forum"`)
	}
	if _, ok := tu.mutation.OwnerID(); tu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.owner"`)
	}
	return nil
}

func (tu *TopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if tu.mutation.TitleCleared() {
		_spec.ClearField(topic.FieldTitle, field.TypeString)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(topic.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(topic.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.ThumbnailUrl(); ok {
		_spec.SetField(topic.FieldThumbnailUrl, field.TypeString, value)
	}
	if tu.mutation.ThumbnailUrlCleared() {
		_spec.ClearField(topic.FieldThumbnailUrl, field.TypeString)
	}
	if value, ok := tu.mutation.IsAutoGenerated(); ok {
		_spec.SetField(topic.FieldIsAutoGenerated, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsNotifyOnComment(); ok {
		_spec.SetField(topic.FieldIsNotifyOnComment, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.OwnerTable,
			Columns: []string{topic.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.OwnerTable,
			Columns: []string{topic.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicLikeCreate{config: tu.config, mutation: newUserTopicLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: tu.config, mutation: newUserTopicLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: tu.config, mutation: newUserTopicLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicSubscriptionCreate{config: tu.config, mutation: newUserTopicSubscriptionMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubscribedUsersIDs(); len(nodes) > 0 && !tu.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: tu.config, mutation: newUserTopicSubscriptionMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: tu.config, mutation: newUserTopicSubscriptionMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TopicUpdateOne is the builder for updating a single Topic entity.
type TopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMutation
}

// SetForumId sets the "forumId" field.
func (tuo *TopicUpdateOne) SetForumId(i int) *TopicUpdateOne {
	tuo.mutation.SetForumId(i)
	return tuo
}

// SetNillableForumId sets the "forumId" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableForumId(i *int) *TopicUpdateOne {
	if i != nil {
		tuo.SetForumId(*i)
	}
	return tuo
}

// SetUserId sets the "userId" field.
func (tuo *TopicUpdateOne) SetUserId(i int) *TopicUpdateOne {
	tuo.mutation.SetUserId(i)
	return tuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableUserId(i *int) *TopicUpdateOne {
	if i != nil {
		tuo.SetUserId(*i)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TopicUpdateOne) SetTitle(s string) *TopicUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableTitle(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// ClearTitle clears the value of the "title" field.
func (tuo *TopicUpdateOne) ClearTitle() *TopicUpdateOne {
	tuo.mutation.ClearTitle()
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TopicUpdateOne) SetDescription(s string) *TopicUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableDescription(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TopicUpdateOne) ClearDescription() *TopicUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetThumbnailUrl sets the "thumbnailUrl" field.
func (tuo *TopicUpdateOne) SetThumbnailUrl(s string) *TopicUpdateOne {
	tuo.mutation.SetThumbnailUrl(s)
	return tuo
}

// SetNillableThumbnailUrl sets the "thumbnailUrl" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableThumbnailUrl(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetThumbnailUrl(*s)
	}
	return tuo
}

// ClearThumbnailUrl clears the value of the "thumbnailUrl" field.
func (tuo *TopicUpdateOne) ClearThumbnailUrl() *TopicUpdateOne {
	tuo.mutation.ClearThumbnailUrl()
	return tuo
}

// SetIsAutoGenerated sets the "isAutoGenerated" field.
func (tuo *TopicUpdateOne) SetIsAutoGenerated(b bool) *TopicUpdateOne {
	tuo.mutation.SetIsAutoGenerated(b)
	return tuo
}

// SetNillableIsAutoGenerated sets the "isAutoGenerated" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableIsAutoGenerated(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetIsAutoGenerated(*b)
	}
	return tuo
}

// SetIsNotifyOnComment sets the "isNotifyOnComment" field.
func (tuo *TopicUpdateOne) SetIsNotifyOnComment(b bool) *TopicUpdateOne {
	tuo.mutation.SetIsNotifyOnComment(b)
	return tuo
}

// SetNillableIsNotifyOnComment sets the "isNotifyOnComment" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableIsNotifyOnComment(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetIsNotifyOnComment(*b)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TopicUpdateOne) SetStatus(t topic.Status) *TopicUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableStatus(t *topic.Status) *TopicUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetCreatedAt sets the "createdAt" field.
func (tuo *TopicUpdateOne) SetCreatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableCreatedAt(t *time.Time) *TopicUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (tuo *TopicUpdateOne) SetUpdatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (tuo *TopicUpdateOne) SetForumID(id int) *TopicUpdateOne {
	tuo.mutation.SetForumID(id)
	return tuo
}

// SetForum sets the "forum" edge to the Forum entity.
func (tuo *TopicUpdateOne) SetForum(f *Forum) *TopicUpdateOne {
	return tuo.SetForumID(f.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TopicUpdateOne) SetOwnerID(id int) *TopicUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TopicUpdateOne) SetOwner(u *User) *TopicUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tuo *TopicUpdateOne) AddCommentIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (tuo *TopicUpdateOne) AddComments(c ...*Comment) *TopicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the TopicTag entity by IDs.
func (tuo *TopicUpdateOne) AddTagIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the TopicTag entity.
func (tuo *TopicUpdateOne) AddTags(t ...*TopicTag) *TopicUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tuo *TopicUpdateOne) AddLikedUserIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddLikedUserIDs(ids...)
	return tuo
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tuo *TopicUpdateOne) AddLikedUsers(u ...*User) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (tuo *TopicUpdateOne) AddSubscribedUserIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.AddSubscribedUserIDs(ids...)
	return tuo
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (tuo *TopicUpdateOne) AddSubscribedUsers(u ...*User) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddSubscribedUserIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tuo *TopicUpdateOne) Mutation() *TopicMutation {
	return tuo.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (tuo *TopicUpdateOne) ClearForum() *TopicUpdateOne {
	tuo.mutation.ClearForum()
	return tuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TopicUpdateOne) ClearOwner() *TopicUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tuo *TopicUpdateOne) ClearComments() *TopicUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tuo *TopicUpdateOne) RemoveCommentIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (tuo *TopicUpdateOne) RemoveComments(c ...*Comment) *TopicUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the TopicTag entity.
func (tuo *TopicUpdateOne) ClearTags() *TopicUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to TopicTag entities by IDs.
func (tuo *TopicUpdateOne) RemoveTagIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to TopicTag entities.
func (tuo *TopicUpdateOne) RemoveTags(t ...*TopicTag) *TopicUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tuo *TopicUpdateOne) ClearLikedUsers() *TopicUpdateOne {
	tuo.mutation.ClearLikedUsers()
	return tuo
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tuo *TopicUpdateOne) RemoveLikedUserIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveLikedUserIDs(ids...)
	return tuo
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tuo *TopicUpdateOne) RemoveLikedUsers(u ...*User) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveLikedUserIDs(ids...)
}

// ClearSubscribedUsers clears all "subscribed_users" edges to the User entity.
func (tuo *TopicUpdateOne) ClearSubscribedUsers() *TopicUpdateOne {
	tuo.mutation.ClearSubscribedUsers()
	return tuo
}

// RemoveSubscribedUserIDs removes the "subscribed_users" edge to User entities by IDs.
func (tuo *TopicUpdateOne) RemoveSubscribedUserIDs(ids ...int) *TopicUpdateOne {
	tuo.mutation.RemoveSubscribedUserIDs(ids...)
	return tuo
}

// RemoveSubscribedUsers removes "subscribed_users" edges to User entities.
func (tuo *TopicUpdateOne) RemoveSubscribedUsers(u ...*User) *TopicUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveSubscribedUserIDs(ids...)
}

// Where appends a list predicates to the TopicUpdate builder.
func (tuo *TopicUpdateOne) Where(ps ...predicate.Topic) *TopicUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TopicUpdateOne) Select(field string, fields ...string) *TopicUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Topic entity.
func (tuo *TopicUpdateOne) Save(ctx context.Context) (*Topic, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TopicUpdateOne) SaveX(ctx context.Context) *Topic {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TopicUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TopicUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TopicUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TopicUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := topic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Topic.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := topic.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Topic.description": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := topic.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Topic.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.ForumID(); tuo.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.forum"`)
	}
	if _, ok := tuo.mutation.OwnerID(); tuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic.owner"`)
	}
	return nil
}

func (tuo *TopicUpdateOne) sqlSave(ctx context.Context) (_node *Topic, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for _, f := range fields {
			if !topic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
	}
	if tuo.mutation.TitleCleared() {
		_spec.ClearField(topic.FieldTitle, field.TypeString)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(topic.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(topic.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.ThumbnailUrl(); ok {
		_spec.SetField(topic.FieldThumbnailUrl, field.TypeString, value)
	}
	if tuo.mutation.ThumbnailUrlCleared() {
		_spec.ClearField(topic.FieldThumbnailUrl, field.TypeString)
	}
	if value, ok := tuo.mutation.IsAutoGenerated(); ok {
		_spec.SetField(topic.FieldIsAutoGenerated, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsNotifyOnComment(); ok {
		_spec.SetField(topic.FieldIsNotifyOnComment, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.OwnerTable,
			Columns: []string{topic.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.OwnerTable,
			Columns: []string{topic.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicLikeCreate{config: tuo.config, mutation: newUserTopicLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: tuo.config, mutation: newUserTopicLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: tuo.config, mutation: newUserTopicLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicSubscriptionCreate{config: tuo.config, mutation: newUserTopicSubscriptionMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubscribedUsersIDs(); len(nodes) > 0 && !tuo.mutation.SubscribedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: tuo.config, mutation: newUserTopicSubscriptionMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: tuo.config, mutation: newUserTopicSubscriptionMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Topic{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
