// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/usertopicsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserTopicSubscriptionDelete is the builder for deleting a UserTopicSubscription entity.
type UserTopicSubscriptionDelete struct {
	config
	hooks    []Hook
	mutation *UserTopicSubscriptionMutation
}

// Where appends a list predicates to the UserTopicSubscriptionDelete builder.
func (utsd *UserTopicSubscriptionDelete) Where(ps ...predicate.UserTopicSubscription) *UserTopicSubscriptionDelete {
	utsd.mutation.Where(ps...)
	return utsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utsd *UserTopicSubscriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utsd.sqlExec, utsd.mutation, utsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utsd *UserTopicSubscriptionDelete) ExecX(ctx context.Context) int {
	n, err := utsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utsd *UserTopicSubscriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertopicsubscription.Table, nil)
	if ps := utsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utsd.mutation.done = true
	return affected, err
}

// UserTopicSubscriptionDeleteOne is the builder for deleting a single UserTopicSubscription entity.
type UserTopicSubscriptionDeleteOne struct {
	utsd *UserTopicSubscriptionDelete
}

// Where appends a list predicates to the UserTopicSubscriptionDelete builder.
func (utsdo *UserTopicSubscriptionDeleteOne) Where(ps ...predicate.UserTopicSubscription) *UserTopicSubscriptionDeleteOne {
	utsdo.utsd.mutation.Where(ps...)
	return utsdo
}

// Exec executes the deletion query.
func (utsdo *UserTopicSubscriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := utsdo.utsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertopicsubscription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utsdo *UserTopicSubscriptionDeleteOne) ExecX(ctx context.Context) {
	if err := utsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
