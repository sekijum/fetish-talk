// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserName sets the "userName" field.
func (uu *UserUpdate) SetUserName(s string) *UserUpdate {
	uu.mutation.SetUserName(s)
	return uu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserName(s *string) *UserUpdate {
	if s != nil {
		uu.SetUserName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetDisplayName sets the "displayName" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "displayName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// ClearDisplayName clears the value of the "displayName" field.
func (uu *UserUpdate) ClearDisplayName() *UserUpdate {
	uu.mutation.ClearDisplayName()
	return uu
}

// SetAvatarUrl sets the "avatarUrl" field.
func (uu *UserUpdate) SetAvatarUrl(s string) *UserUpdate {
	uu.mutation.SetAvatarUrl(s)
	return uu
}

// SetNillableAvatarUrl sets the "avatarUrl" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarUrl(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarUrl(*s)
	}
	return uu
}

// ClearAvatarUrl clears the value of the "avatarUrl" field.
func (uu *UserUpdate) ClearAvatarUrl() *UserUpdate {
	uu.mutation.ClearAvatarUrl()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *user.Status) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetCreatedAt sets the "createdAt" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updatedAt" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddForumIDs adds the "forums" edge to the Forum entity by IDs.
func (uu *UserUpdate) AddForumIDs(ids ...int) *UserUpdate {
	uu.mutation.AddForumIDs(ids...)
	return uu
}

// AddForums adds the "forums" edges to the Forum entity.
func (uu *UserUpdate) AddForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddForumIDs(ids...)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (uu *UserUpdate) AddTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.AddTopicIDs(ids...)
	return uu
}

// AddTopics adds the "topics" edges to the Topic entity.
func (uu *UserUpdate) AddTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTopicIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCommentIDs(ids...)
	return uu
}

// AddComments adds the "comments" edges to the Comment entity.
func (uu *UserUpdate) AddComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCommentIDs(ids...)
}

// AddLikedForumIDs adds the "liked_forums" edge to the Forum entity by IDs.
func (uu *UserUpdate) AddLikedForumIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLikedForumIDs(ids...)
	return uu
}

// AddLikedForums adds the "liked_forums" edges to the Forum entity.
func (uu *UserUpdate) AddLikedForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddLikedForumIDs(ids...)
}

// AddLikedTopicIDs adds the "liked_topics" edge to the Topic entity by IDs.
func (uu *UserUpdate) AddLikedTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLikedTopicIDs(ids...)
	return uu
}

// AddLikedTopics adds the "liked_topics" edges to the Topic entity.
func (uu *UserUpdate) AddLikedTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddLikedTopicIDs(ids...)
}

// AddLikedCommentIDs adds the "liked_comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddLikedCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLikedCommentIDs(ids...)
	return uu
}

// AddLikedComments adds the "liked_comments" edges to the Comment entity.
func (uu *UserUpdate) AddLikedComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddLikedCommentIDs(ids...)
}

// AddSubscribedForumIDs adds the "subscribed_forums" edge to the Forum entity by IDs.
func (uu *UserUpdate) AddSubscribedForumIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSubscribedForumIDs(ids...)
	return uu
}

// AddSubscribedForums adds the "subscribed_forums" edges to the Forum entity.
func (uu *UserUpdate) AddSubscribedForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddSubscribedForumIDs(ids...)
}

// AddSubscribedTopicIDs adds the "subscribed_topics" edge to the Topic entity by IDs.
func (uu *UserUpdate) AddSubscribedTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSubscribedTopicIDs(ids...)
	return uu
}

// AddSubscribedTopics adds the "subscribed_topics" edges to the Topic entity.
func (uu *UserUpdate) AddSubscribedTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddSubscribedTopicIDs(ids...)
}

// AddSubscribedCommentIDs adds the "subscribed_comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddSubscribedCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSubscribedCommentIDs(ids...)
	return uu
}

// AddSubscribedComments adds the "subscribed_comments" edges to the Comment entity.
func (uu *UserUpdate) AddSubscribedComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddSubscribedCommentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearForums clears all "forums" edges to the Forum entity.
func (uu *UserUpdate) ClearForums() *UserUpdate {
	uu.mutation.ClearForums()
	return uu
}

// RemoveForumIDs removes the "forums" edge to Forum entities by IDs.
func (uu *UserUpdate) RemoveForumIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveForumIDs(ids...)
	return uu
}

// RemoveForums removes "forums" edges to Forum entities.
func (uu *UserUpdate) RemoveForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveForumIDs(ids...)
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (uu *UserUpdate) ClearTopics() *UserUpdate {
	uu.mutation.ClearTopics()
	return uu
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (uu *UserUpdate) RemoveTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveTopicIDs(ids...)
	return uu
}

// RemoveTopics removes "topics" edges to Topic entities.
func (uu *UserUpdate) RemoveTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTopicIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uu *UserUpdate) ClearComments() *UserUpdate {
	uu.mutation.ClearComments()
	return uu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCommentIDs(ids...)
	return uu
}

// RemoveComments removes "comments" edges to Comment entities.
func (uu *UserUpdate) RemoveComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCommentIDs(ids...)
}

// ClearLikedForums clears all "liked_forums" edges to the Forum entity.
func (uu *UserUpdate) ClearLikedForums() *UserUpdate {
	uu.mutation.ClearLikedForums()
	return uu
}

// RemoveLikedForumIDs removes the "liked_forums" edge to Forum entities by IDs.
func (uu *UserUpdate) RemoveLikedForumIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLikedForumIDs(ids...)
	return uu
}

// RemoveLikedForums removes "liked_forums" edges to Forum entities.
func (uu *UserUpdate) RemoveLikedForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveLikedForumIDs(ids...)
}

// ClearLikedTopics clears all "liked_topics" edges to the Topic entity.
func (uu *UserUpdate) ClearLikedTopics() *UserUpdate {
	uu.mutation.ClearLikedTopics()
	return uu
}

// RemoveLikedTopicIDs removes the "liked_topics" edge to Topic entities by IDs.
func (uu *UserUpdate) RemoveLikedTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLikedTopicIDs(ids...)
	return uu
}

// RemoveLikedTopics removes "liked_topics" edges to Topic entities.
func (uu *UserUpdate) RemoveLikedTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveLikedTopicIDs(ids...)
}

// ClearLikedComments clears all "liked_comments" edges to the Comment entity.
func (uu *UserUpdate) ClearLikedComments() *UserUpdate {
	uu.mutation.ClearLikedComments()
	return uu
}

// RemoveLikedCommentIDs removes the "liked_comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveLikedCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLikedCommentIDs(ids...)
	return uu
}

// RemoveLikedComments removes "liked_comments" edges to Comment entities.
func (uu *UserUpdate) RemoveLikedComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveLikedCommentIDs(ids...)
}

// ClearSubscribedForums clears all "subscribed_forums" edges to the Forum entity.
func (uu *UserUpdate) ClearSubscribedForums() *UserUpdate {
	uu.mutation.ClearSubscribedForums()
	return uu
}

// RemoveSubscribedForumIDs removes the "subscribed_forums" edge to Forum entities by IDs.
func (uu *UserUpdate) RemoveSubscribedForumIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSubscribedForumIDs(ids...)
	return uu
}

// RemoveSubscribedForums removes "subscribed_forums" edges to Forum entities.
func (uu *UserUpdate) RemoveSubscribedForums(f ...*Forum) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveSubscribedForumIDs(ids...)
}

// ClearSubscribedTopics clears all "subscribed_topics" edges to the Topic entity.
func (uu *UserUpdate) ClearSubscribedTopics() *UserUpdate {
	uu.mutation.ClearSubscribedTopics()
	return uu
}

// RemoveSubscribedTopicIDs removes the "subscribed_topics" edge to Topic entities by IDs.
func (uu *UserUpdate) RemoveSubscribedTopicIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSubscribedTopicIDs(ids...)
	return uu
}

// RemoveSubscribedTopics removes "subscribed_topics" edges to Topic entities.
func (uu *UserUpdate) RemoveSubscribedTopics(t ...*Topic) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveSubscribedTopicIDs(ids...)
}

// ClearSubscribedComments clears all "subscribed_comments" edges to the Comment entity.
func (uu *UserUpdate) ClearSubscribedComments() *UserUpdate {
	uu.mutation.ClearSubscribedComments()
	return uu
}

// RemoveSubscribedCommentIDs removes the "subscribed_comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveSubscribedCommentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSubscribedCommentIDs(ids...)
	return uu
}

// RemoveSubscribedComments removes "subscribed_comments" edges to Comment entities.
func (uu *UserUpdate) RemoveSubscribedComments(c ...*Comment) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveSubscribedCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.UserName(); ok {
		if err := user.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "userName", err: fmt.Errorf(`ent: validator failed for field "User.userName": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "displayName", err: fmt.Errorf(`ent: validator failed for field "User.displayName": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uu.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarUrl(); ok {
		_spec.SetField(user.FieldAvatarUrl, field.TypeString, value)
	}
	if uu.mutation.AvatarUrlCleared() {
		_spec.ClearField(user.FieldAvatarUrl, field.TypeString)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.ForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedForumsIDs(); len(nodes) > 0 && !uu.mutation.ForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !uu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		createE := &UserForumLikeCreate{config: uu.config, mutation: newUserForumLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedForumsIDs(); len(nodes) > 0 && !uu.mutation.LikedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumLikeCreate{config: uu.config, mutation: newUserForumLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumLikeCreate{config: uu.config, mutation: newUserForumLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicLikeCreate{config: uu.config, mutation: newUserTopicLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedTopicsIDs(); len(nodes) > 0 && !uu.mutation.LikedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: uu.config, mutation: newUserTopicLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: uu.config, mutation: newUserTopicLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: uu.config, mutation: newUserCommentLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedCommentsIDs(); len(nodes) > 0 && !uu.mutation.LikedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: uu.config, mutation: newUserCommentLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: uu.config, mutation: newUserCommentLikeMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscribedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		createE := &UserForumSubscriptionCreate{config: uu.config, mutation: newUserForumSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscribedForumsIDs(); len(nodes) > 0 && !uu.mutation.SubscribedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumSubscriptionCreate{config: uu.config, mutation: newUserForumSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscribedForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumSubscriptionCreate{config: uu.config, mutation: newUserForumSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscribedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicSubscriptionCreate{config: uu.config, mutation: newUserTopicSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscribedTopicsIDs(); len(nodes) > 0 && !uu.mutation.SubscribedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: uu.config, mutation: newUserTopicSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscribedTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: uu.config, mutation: newUserTopicSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscribedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentSubscriptionCreate{config: uu.config, mutation: newUserCommentSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscribedCommentsIDs(); len(nodes) > 0 && !uu.mutation.SubscribedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: uu.config, mutation: newUserCommentSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscribedCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: uu.config, mutation: newUserCommentSubscriptionMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserName sets the "userName" field.
func (uuo *UserUpdateOne) SetUserName(s string) *UserUpdateOne {
	uuo.mutation.SetUserName(s)
	return uuo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUserName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetDisplayName sets the "displayName" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "displayName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// ClearDisplayName clears the value of the "displayName" field.
func (uuo *UserUpdateOne) ClearDisplayName() *UserUpdateOne {
	uuo.mutation.ClearDisplayName()
	return uuo
}

// SetAvatarUrl sets the "avatarUrl" field.
func (uuo *UserUpdateOne) SetAvatarUrl(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarUrl(s)
	return uuo
}

// SetNillableAvatarUrl sets the "avatarUrl" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarUrl(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarUrl(*s)
	}
	return uuo
}

// ClearAvatarUrl clears the value of the "avatarUrl" field.
func (uuo *UserUpdateOne) ClearAvatarUrl() *UserUpdateOne {
	uuo.mutation.ClearAvatarUrl()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *user.Status) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetCreatedAt sets the "createdAt" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddForumIDs adds the "forums" edge to the Forum entity by IDs.
func (uuo *UserUpdateOne) AddForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddForumIDs(ids...)
	return uuo
}

// AddForums adds the "forums" edges to the Forum entity.
func (uuo *UserUpdateOne) AddForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddForumIDs(ids...)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (uuo *UserUpdateOne) AddTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddTopicIDs(ids...)
	return uuo
}

// AddTopics adds the "topics" edges to the Topic entity.
func (uuo *UserUpdateOne) AddTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTopicIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCommentIDs(ids...)
	return uuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCommentIDs(ids...)
}

// AddLikedForumIDs adds the "liked_forums" edge to the Forum entity by IDs.
func (uuo *UserUpdateOne) AddLikedForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLikedForumIDs(ids...)
	return uuo
}

// AddLikedForums adds the "liked_forums" edges to the Forum entity.
func (uuo *UserUpdateOne) AddLikedForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddLikedForumIDs(ids...)
}

// AddLikedTopicIDs adds the "liked_topics" edge to the Topic entity by IDs.
func (uuo *UserUpdateOne) AddLikedTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLikedTopicIDs(ids...)
	return uuo
}

// AddLikedTopics adds the "liked_topics" edges to the Topic entity.
func (uuo *UserUpdateOne) AddLikedTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddLikedTopicIDs(ids...)
}

// AddLikedCommentIDs adds the "liked_comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddLikedCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLikedCommentIDs(ids...)
	return uuo
}

// AddLikedComments adds the "liked_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddLikedComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddLikedCommentIDs(ids...)
}

// AddSubscribedForumIDs adds the "subscribed_forums" edge to the Forum entity by IDs.
func (uuo *UserUpdateOne) AddSubscribedForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSubscribedForumIDs(ids...)
	return uuo
}

// AddSubscribedForums adds the "subscribed_forums" edges to the Forum entity.
func (uuo *UserUpdateOne) AddSubscribedForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddSubscribedForumIDs(ids...)
}

// AddSubscribedTopicIDs adds the "subscribed_topics" edge to the Topic entity by IDs.
func (uuo *UserUpdateOne) AddSubscribedTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSubscribedTopicIDs(ids...)
	return uuo
}

// AddSubscribedTopics adds the "subscribed_topics" edges to the Topic entity.
func (uuo *UserUpdateOne) AddSubscribedTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddSubscribedTopicIDs(ids...)
}

// AddSubscribedCommentIDs adds the "subscribed_comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddSubscribedCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSubscribedCommentIDs(ids...)
	return uuo
}

// AddSubscribedComments adds the "subscribed_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddSubscribedComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddSubscribedCommentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearForums clears all "forums" edges to the Forum entity.
func (uuo *UserUpdateOne) ClearForums() *UserUpdateOne {
	uuo.mutation.ClearForums()
	return uuo
}

// RemoveForumIDs removes the "forums" edge to Forum entities by IDs.
func (uuo *UserUpdateOne) RemoveForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveForumIDs(ids...)
	return uuo
}

// RemoveForums removes "forums" edges to Forum entities.
func (uuo *UserUpdateOne) RemoveForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveForumIDs(ids...)
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (uuo *UserUpdateOne) ClearTopics() *UserUpdateOne {
	uuo.mutation.ClearTopics()
	return uuo
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (uuo *UserUpdateOne) RemoveTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveTopicIDs(ids...)
	return uuo
}

// RemoveTopics removes "topics" edges to Topic entities.
func (uuo *UserUpdateOne) RemoveTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTopicIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearComments() *UserUpdateOne {
	uuo.mutation.ClearComments()
	return uuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCommentIDs(ids...)
	return uuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCommentIDs(ids...)
}

// ClearLikedForums clears all "liked_forums" edges to the Forum entity.
func (uuo *UserUpdateOne) ClearLikedForums() *UserUpdateOne {
	uuo.mutation.ClearLikedForums()
	return uuo
}

// RemoveLikedForumIDs removes the "liked_forums" edge to Forum entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLikedForumIDs(ids...)
	return uuo
}

// RemoveLikedForums removes "liked_forums" edges to Forum entities.
func (uuo *UserUpdateOne) RemoveLikedForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveLikedForumIDs(ids...)
}

// ClearLikedTopics clears all "liked_topics" edges to the Topic entity.
func (uuo *UserUpdateOne) ClearLikedTopics() *UserUpdateOne {
	uuo.mutation.ClearLikedTopics()
	return uuo
}

// RemoveLikedTopicIDs removes the "liked_topics" edge to Topic entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLikedTopicIDs(ids...)
	return uuo
}

// RemoveLikedTopics removes "liked_topics" edges to Topic entities.
func (uuo *UserUpdateOne) RemoveLikedTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveLikedTopicIDs(ids...)
}

// ClearLikedComments clears all "liked_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearLikedComments() *UserUpdateOne {
	uuo.mutation.ClearLikedComments()
	return uuo
}

// RemoveLikedCommentIDs removes the "liked_comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLikedCommentIDs(ids...)
	return uuo
}

// RemoveLikedComments removes "liked_comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveLikedComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveLikedCommentIDs(ids...)
}

// ClearSubscribedForums clears all "subscribed_forums" edges to the Forum entity.
func (uuo *UserUpdateOne) ClearSubscribedForums() *UserUpdateOne {
	uuo.mutation.ClearSubscribedForums()
	return uuo
}

// RemoveSubscribedForumIDs removes the "subscribed_forums" edge to Forum entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscribedForumIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSubscribedForumIDs(ids...)
	return uuo
}

// RemoveSubscribedForums removes "subscribed_forums" edges to Forum entities.
func (uuo *UserUpdateOne) RemoveSubscribedForums(f ...*Forum) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveSubscribedForumIDs(ids...)
}

// ClearSubscribedTopics clears all "subscribed_topics" edges to the Topic entity.
func (uuo *UserUpdateOne) ClearSubscribedTopics() *UserUpdateOne {
	uuo.mutation.ClearSubscribedTopics()
	return uuo
}

// RemoveSubscribedTopicIDs removes the "subscribed_topics" edge to Topic entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscribedTopicIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSubscribedTopicIDs(ids...)
	return uuo
}

// RemoveSubscribedTopics removes "subscribed_topics" edges to Topic entities.
func (uuo *UserUpdateOne) RemoveSubscribedTopics(t ...*Topic) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveSubscribedTopicIDs(ids...)
}

// ClearSubscribedComments clears all "subscribed_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearSubscribedComments() *UserUpdateOne {
	uuo.mutation.ClearSubscribedComments()
	return uuo
}

// RemoveSubscribedCommentIDs removes the "subscribed_comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscribedCommentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSubscribedCommentIDs(ids...)
	return uuo
}

// RemoveSubscribedComments removes "subscribed_comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveSubscribedComments(c ...*Comment) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveSubscribedCommentIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.UserName(); ok {
		if err := user.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "userName", err: fmt.Errorf(`ent: validator failed for field "User.userName": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "displayName", err: fmt.Errorf(`ent: validator failed for field "User.displayName": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uuo.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarUrl(); ok {
		_spec.SetField(user.FieldAvatarUrl, field.TypeString, value)
	}
	if uuo.mutation.AvatarUrlCleared() {
		_spec.ClearField(user.FieldAvatarUrl, field.TypeString)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.ForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedForumsIDs(); len(nodes) > 0 && !uuo.mutation.ForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ForumsTable,
			Columns: []string{user.ForumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !uuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TopicsTable,
			Columns: []string{user.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		createE := &UserForumLikeCreate{config: uuo.config, mutation: newUserForumLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedForumsIDs(); len(nodes) > 0 && !uuo.mutation.LikedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumLikeCreate{config: uuo.config, mutation: newUserForumLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedForumsTable,
			Columns: user.LikedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumLikeCreate{config: uuo.config, mutation: newUserForumLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicLikeCreate{config: uuo.config, mutation: newUserTopicLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedTopicsIDs(); len(nodes) > 0 && !uuo.mutation.LikedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: uuo.config, mutation: newUserTopicLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedTopicsTable,
			Columns: user.LikedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: uuo.config, mutation: newUserTopicLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: uuo.config, mutation: newUserCommentLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.LikedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: uuo.config, mutation: newUserCommentLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedCommentsTable,
			Columns: user.LikedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: uuo.config, mutation: newUserCommentLikeMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscribedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		createE := &UserForumSubscriptionCreate{config: uuo.config, mutation: newUserForumSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscribedForumsIDs(); len(nodes) > 0 && !uuo.mutation.SubscribedForumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumSubscriptionCreate{config: uuo.config, mutation: newUserForumSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscribedForumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedForumsTable,
			Columns: user.SubscribedForumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumSubscriptionCreate{config: uuo.config, mutation: newUserForumSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscribedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		createE := &UserTopicSubscriptionCreate{config: uuo.config, mutation: newUserTopicSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscribedTopicsIDs(); len(nodes) > 0 && !uuo.mutation.SubscribedTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: uuo.config, mutation: newUserTopicSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscribedTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedTopicsTable,
			Columns: user.SubscribedTopicsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: uuo.config, mutation: newUserTopicSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscribedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentSubscriptionCreate{config: uuo.config, mutation: newUserCommentSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscribedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.SubscribedCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: uuo.config, mutation: newUserCommentSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscribedCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.SubscribedCommentsTable,
			Columns: user.SubscribedCommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentSubscriptionCreate{config: uuo.config, mutation: newUserCommentSubscriptionMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
