// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentattachment"
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentAttachmentUpdate is the builder for updating CommentAttachment entities.
type CommentAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentAttachmentMutation
}

// Where appends a list predicates to the CommentAttachmentUpdate builder.
func (cau *CommentAttachmentUpdate) Where(ps ...predicate.CommentAttachment) *CommentAttachmentUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetCommentID sets the "comment_id" field.
func (cau *CommentAttachmentUpdate) SetCommentID(i int) *CommentAttachmentUpdate {
	cau.mutation.SetCommentID(i)
	return cau
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cau *CommentAttachmentUpdate) SetNillableCommentID(i *int) *CommentAttachmentUpdate {
	if i != nil {
		cau.SetCommentID(*i)
	}
	return cau
}

// SetPath sets the "path" field.
func (cau *CommentAttachmentUpdate) SetPath(s string) *CommentAttachmentUpdate {
	cau.mutation.SetPath(s)
	return cau
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (cau *CommentAttachmentUpdate) SetNillablePath(s *string) *CommentAttachmentUpdate {
	if s != nil {
		cau.SetPath(*s)
	}
	return cau
}

// SetType sets the "type" field.
func (cau *CommentAttachmentUpdate) SetType(c commentattachment.Type) *CommentAttachmentUpdate {
	cau.mutation.SetType(c)
	return cau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cau *CommentAttachmentUpdate) SetNillableType(c *commentattachment.Type) *CommentAttachmentUpdate {
	if c != nil {
		cau.SetType(*c)
	}
	return cau
}

// SetCreatedAt sets the "created_at" field.
func (cau *CommentAttachmentUpdate) SetCreatedAt(t time.Time) *CommentAttachmentUpdate {
	cau.mutation.SetCreatedAt(t)
	return cau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cau *CommentAttachmentUpdate) SetNillableCreatedAt(t *time.Time) *CommentAttachmentUpdate {
	if t != nil {
		cau.SetCreatedAt(*t)
	}
	return cau
}

// SetComment sets the "comment" edge to the Comment entity.
func (cau *CommentAttachmentUpdate) SetComment(c *Comment) *CommentAttachmentUpdate {
	return cau.SetCommentID(c.ID)
}

// Mutation returns the CommentAttachmentMutation object of the builder.
func (cau *CommentAttachmentUpdate) Mutation() *CommentAttachmentMutation {
	return cau.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cau *CommentAttachmentUpdate) ClearComment() *CommentAttachmentUpdate {
	cau.mutation.ClearComment()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CommentAttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CommentAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CommentAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CommentAttachmentUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cau *CommentAttachmentUpdate) check() error {
	if v, ok := cau.mutation.GetType(); ok {
		if err := commentattachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommentAttachment.type": %w`, err)}
		}
	}
	if _, ok := cau.mutation.CommentID(); cau.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentAttachment.comment"`)
	}
	return nil
}

func (cau *CommentAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentattachment.Table, commentattachment.Columns, sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.Path(); ok {
		_spec.SetField(commentattachment.FieldPath, field.TypeString, value)
	}
	if value, ok := cau.mutation.GetType(); ok {
		_spec.SetField(commentattachment.FieldType, field.TypeEnum, value)
	}
	if value, ok := cau.mutation.CreatedAt(); ok {
		_spec.SetField(commentattachment.FieldCreatedAt, field.TypeTime, value)
	}
	if cau.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentattachment.CommentTable,
			Columns: []string{commentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentattachment.CommentTable,
			Columns: []string{commentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CommentAttachmentUpdateOne is the builder for updating a single CommentAttachment entity.
type CommentAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentAttachmentMutation
}

// SetCommentID sets the "comment_id" field.
func (cauo *CommentAttachmentUpdateOne) SetCommentID(i int) *CommentAttachmentUpdateOne {
	cauo.mutation.SetCommentID(i)
	return cauo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cauo *CommentAttachmentUpdateOne) SetNillableCommentID(i *int) *CommentAttachmentUpdateOne {
	if i != nil {
		cauo.SetCommentID(*i)
	}
	return cauo
}

// SetPath sets the "path" field.
func (cauo *CommentAttachmentUpdateOne) SetPath(s string) *CommentAttachmentUpdateOne {
	cauo.mutation.SetPath(s)
	return cauo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (cauo *CommentAttachmentUpdateOne) SetNillablePath(s *string) *CommentAttachmentUpdateOne {
	if s != nil {
		cauo.SetPath(*s)
	}
	return cauo
}

// SetType sets the "type" field.
func (cauo *CommentAttachmentUpdateOne) SetType(c commentattachment.Type) *CommentAttachmentUpdateOne {
	cauo.mutation.SetType(c)
	return cauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cauo *CommentAttachmentUpdateOne) SetNillableType(c *commentattachment.Type) *CommentAttachmentUpdateOne {
	if c != nil {
		cauo.SetType(*c)
	}
	return cauo
}

// SetCreatedAt sets the "created_at" field.
func (cauo *CommentAttachmentUpdateOne) SetCreatedAt(t time.Time) *CommentAttachmentUpdateOne {
	cauo.mutation.SetCreatedAt(t)
	return cauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cauo *CommentAttachmentUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentAttachmentUpdateOne {
	if t != nil {
		cauo.SetCreatedAt(*t)
	}
	return cauo
}

// SetComment sets the "comment" edge to the Comment entity.
func (cauo *CommentAttachmentUpdateOne) SetComment(c *Comment) *CommentAttachmentUpdateOne {
	return cauo.SetCommentID(c.ID)
}

// Mutation returns the CommentAttachmentMutation object of the builder.
func (cauo *CommentAttachmentUpdateOne) Mutation() *CommentAttachmentMutation {
	return cauo.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cauo *CommentAttachmentUpdateOne) ClearComment() *CommentAttachmentUpdateOne {
	cauo.mutation.ClearComment()
	return cauo
}

// Where appends a list predicates to the CommentAttachmentUpdate builder.
func (cauo *CommentAttachmentUpdateOne) Where(ps ...predicate.CommentAttachment) *CommentAttachmentUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CommentAttachmentUpdateOne) Select(field string, fields ...string) *CommentAttachmentUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CommentAttachment entity.
func (cauo *CommentAttachmentUpdateOne) Save(ctx context.Context) (*CommentAttachment, error) {
	return withHooks(ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CommentAttachmentUpdateOne) SaveX(ctx context.Context) *CommentAttachment {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CommentAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CommentAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauo *CommentAttachmentUpdateOne) check() error {
	if v, ok := cauo.mutation.GetType(); ok {
		if err := commentattachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommentAttachment.type": %w`, err)}
		}
	}
	if _, ok := cauo.mutation.CommentID(); cauo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentAttachment.comment"`)
	}
	return nil
}

func (cauo *CommentAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *CommentAttachment, err error) {
	if err := cauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentattachment.Table, commentattachment.Columns, sqlgraph.NewFieldSpec(commentattachment.FieldID, field.TypeInt))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentAttachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentattachment.FieldID)
		for _, f := range fields {
			if !commentattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.Path(); ok {
		_spec.SetField(commentattachment.FieldPath, field.TypeString, value)
	}
	if value, ok := cauo.mutation.GetType(); ok {
		_spec.SetField(commentattachment.FieldType, field.TypeEnum, value)
	}
	if value, ok := cauo.mutation.CreatedAt(); ok {
		_spec.SetField(commentattachment.FieldCreatedAt, field.TypeTime, value)
	}
	if cauo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentattachment.CommentTable,
			Columns: []string{commentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentattachment.CommentTable,
			Columns: []string{commentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommentAttachment{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
