// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userboardsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserBoardSubscriptionQuery is the builder for querying UserBoardSubscription entities.
type UserBoardSubscriptionQuery struct {
	config
	ctx        *QueryContext
	order      []userboardsubscription.OrderOption
	inters     []Interceptor
	predicates []predicate.UserBoardSubscription
	withUser   *UserQuery
	withBoard  *BoardQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserBoardSubscriptionQuery builder.
func (ubsq *UserBoardSubscriptionQuery) Where(ps ...predicate.UserBoardSubscription) *UserBoardSubscriptionQuery {
	ubsq.predicates = append(ubsq.predicates, ps...)
	return ubsq
}

// Limit the number of records to be returned by this query.
func (ubsq *UserBoardSubscriptionQuery) Limit(limit int) *UserBoardSubscriptionQuery {
	ubsq.ctx.Limit = &limit
	return ubsq
}

// Offset to start from.
func (ubsq *UserBoardSubscriptionQuery) Offset(offset int) *UserBoardSubscriptionQuery {
	ubsq.ctx.Offset = &offset
	return ubsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ubsq *UserBoardSubscriptionQuery) Unique(unique bool) *UserBoardSubscriptionQuery {
	ubsq.ctx.Unique = &unique
	return ubsq
}

// Order specifies how the records should be ordered.
func (ubsq *UserBoardSubscriptionQuery) Order(o ...userboardsubscription.OrderOption) *UserBoardSubscriptionQuery {
	ubsq.order = append(ubsq.order, o...)
	return ubsq
}

// QueryUser chains the current query on the "user" edge.
func (ubsq *UserBoardSubscriptionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ubsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ubsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ubsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userboardsubscription.Table, userboardsubscription.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userboardsubscription.UserTable, userboardsubscription.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ubsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBoard chains the current query on the "board" edge.
func (ubsq *UserBoardSubscriptionQuery) QueryBoard() *BoardQuery {
	query := (&BoardClient{config: ubsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ubsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ubsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userboardsubscription.Table, userboardsubscription.BoardColumn, selector),
			sqlgraph.To(board.Table, board.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userboardsubscription.BoardTable, userboardsubscription.BoardColumn),
		)
		fromU = sqlgraph.SetNeighbors(ubsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserBoardSubscription entity from the query.
// Returns a *NotFoundError when no UserBoardSubscription was found.
func (ubsq *UserBoardSubscriptionQuery) First(ctx context.Context) (*UserBoardSubscription, error) {
	nodes, err := ubsq.Limit(1).All(setContextOp(ctx, ubsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userboardsubscription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ubsq *UserBoardSubscriptionQuery) FirstX(ctx context.Context) *UserBoardSubscription {
	node, err := ubsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserBoardSubscription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserBoardSubscription entity is found.
// Returns a *NotFoundError when no UserBoardSubscription entities are found.
func (ubsq *UserBoardSubscriptionQuery) Only(ctx context.Context) (*UserBoardSubscription, error) {
	nodes, err := ubsq.Limit(2).All(setContextOp(ctx, ubsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userboardsubscription.Label}
	default:
		return nil, &NotSingularError{userboardsubscription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ubsq *UserBoardSubscriptionQuery) OnlyX(ctx context.Context) *UserBoardSubscription {
	node, err := ubsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserBoardSubscriptions.
func (ubsq *UserBoardSubscriptionQuery) All(ctx context.Context) ([]*UserBoardSubscription, error) {
	ctx = setContextOp(ctx, ubsq.ctx, "All")
	if err := ubsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserBoardSubscription, *UserBoardSubscriptionQuery]()
	return withInterceptors[[]*UserBoardSubscription](ctx, ubsq, qr, ubsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ubsq *UserBoardSubscriptionQuery) AllX(ctx context.Context) []*UserBoardSubscription {
	nodes, err := ubsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ubsq *UserBoardSubscriptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ubsq.ctx, "Count")
	if err := ubsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ubsq, querierCount[*UserBoardSubscriptionQuery](), ubsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ubsq *UserBoardSubscriptionQuery) CountX(ctx context.Context) int {
	count, err := ubsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ubsq *UserBoardSubscriptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ubsq.ctx, "Exist")
	switch _, err := ubsq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ubsq *UserBoardSubscriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := ubsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserBoardSubscriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ubsq *UserBoardSubscriptionQuery) Clone() *UserBoardSubscriptionQuery {
	if ubsq == nil {
		return nil
	}
	return &UserBoardSubscriptionQuery{
		config:     ubsq.config,
		ctx:        ubsq.ctx.Clone(),
		order:      append([]userboardsubscription.OrderOption{}, ubsq.order...),
		inters:     append([]Interceptor{}, ubsq.inters...),
		predicates: append([]predicate.UserBoardSubscription{}, ubsq.predicates...),
		withUser:   ubsq.withUser.Clone(),
		withBoard:  ubsq.withBoard.Clone(),
		// clone intermediate query.
		sql:  ubsq.sql.Clone(),
		path: ubsq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ubsq *UserBoardSubscriptionQuery) WithUser(opts ...func(*UserQuery)) *UserBoardSubscriptionQuery {
	query := (&UserClient{config: ubsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ubsq.withUser = query
	return ubsq
}

// WithBoard tells the query-builder to eager-load the nodes that are connected to
// the "board" edge. The optional arguments are used to configure the query builder of the edge.
func (ubsq *UserBoardSubscriptionQuery) WithBoard(opts ...func(*BoardQuery)) *UserBoardSubscriptionQuery {
	query := (&BoardClient{config: ubsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ubsq.withBoard = query
	return ubsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserId int `json:"userId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserBoardSubscription.Query().
//		GroupBy(userboardsubscription.FieldUserId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ubsq *UserBoardSubscriptionQuery) GroupBy(field string, fields ...string) *UserBoardSubscriptionGroupBy {
	ubsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserBoardSubscriptionGroupBy{build: ubsq}
	grbuild.flds = &ubsq.ctx.Fields
	grbuild.label = userboardsubscription.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserId int `json:"userId,omitempty"`
//	}
//
//	client.UserBoardSubscription.Query().
//		Select(userboardsubscription.FieldUserId).
//		Scan(ctx, &v)
func (ubsq *UserBoardSubscriptionQuery) Select(fields ...string) *UserBoardSubscriptionSelect {
	ubsq.ctx.Fields = append(ubsq.ctx.Fields, fields...)
	sbuild := &UserBoardSubscriptionSelect{UserBoardSubscriptionQuery: ubsq}
	sbuild.label = userboardsubscription.Label
	sbuild.flds, sbuild.scan = &ubsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserBoardSubscriptionSelect configured with the given aggregations.
func (ubsq *UserBoardSubscriptionQuery) Aggregate(fns ...AggregateFunc) *UserBoardSubscriptionSelect {
	return ubsq.Select().Aggregate(fns...)
}

func (ubsq *UserBoardSubscriptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ubsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ubsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ubsq.ctx.Fields {
		if !userboardsubscription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ubsq.path != nil {
		prev, err := ubsq.path(ctx)
		if err != nil {
			return err
		}
		ubsq.sql = prev
	}
	return nil
}

func (ubsq *UserBoardSubscriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserBoardSubscription, error) {
	var (
		nodes       = []*UserBoardSubscription{}
		_spec       = ubsq.querySpec()
		loadedTypes = [2]bool{
			ubsq.withUser != nil,
			ubsq.withBoard != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserBoardSubscription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserBoardSubscription{config: ubsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ubsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ubsq.withUser; query != nil {
		if err := ubsq.loadUser(ctx, query, nodes, nil,
			func(n *UserBoardSubscription, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ubsq.withBoard; query != nil {
		if err := ubsq.loadBoard(ctx, query, nodes, nil,
			func(n *UserBoardSubscription, e *Board) { n.Edges.Board = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ubsq *UserBoardSubscriptionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserBoardSubscription, init func(*UserBoardSubscription), assign func(*UserBoardSubscription, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserBoardSubscription)
	for i := range nodes {
		fk := nodes[i].UserId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "userId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ubsq *UserBoardSubscriptionQuery) loadBoard(ctx context.Context, query *BoardQuery, nodes []*UserBoardSubscription, init func(*UserBoardSubscription), assign func(*UserBoardSubscription, *Board)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserBoardSubscription)
	for i := range nodes {
		fk := nodes[i].BoardId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(board.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "boardId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ubsq *UserBoardSubscriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ubsq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ubsq.driver, _spec)
}

func (ubsq *UserBoardSubscriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userboardsubscription.Table, userboardsubscription.Columns, nil)
	_spec.From = ubsq.sql
	if unique := ubsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ubsq.path != nil {
		_spec.Unique = true
	}
	if fields := ubsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ubsq.withUser != nil {
			_spec.Node.AddColumnOnce(userboardsubscription.FieldUserId)
		}
		if ubsq.withBoard != nil {
			_spec.Node.AddColumnOnce(userboardsubscription.FieldBoardId)
		}
	}
	if ps := ubsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ubsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ubsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ubsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ubsq *UserBoardSubscriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ubsq.driver.Dialect())
	t1 := builder.Table(userboardsubscription.Table)
	columns := ubsq.ctx.Fields
	if len(columns) == 0 {
		columns = userboardsubscription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ubsq.sql != nil {
		selector = ubsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ubsq.ctx.Unique != nil && *ubsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ubsq.predicates {
		p(selector)
	}
	for _, p := range ubsq.order {
		p(selector)
	}
	if offset := ubsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ubsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserBoardSubscriptionGroupBy is the group-by builder for UserBoardSubscription entities.
type UserBoardSubscriptionGroupBy struct {
	selector
	build *UserBoardSubscriptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ubsgb *UserBoardSubscriptionGroupBy) Aggregate(fns ...AggregateFunc) *UserBoardSubscriptionGroupBy {
	ubsgb.fns = append(ubsgb.fns, fns...)
	return ubsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ubsgb *UserBoardSubscriptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ubsgb.build.ctx, "GroupBy")
	if err := ubsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserBoardSubscriptionQuery, *UserBoardSubscriptionGroupBy](ctx, ubsgb.build, ubsgb, ubsgb.build.inters, v)
}

func (ubsgb *UserBoardSubscriptionGroupBy) sqlScan(ctx context.Context, root *UserBoardSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ubsgb.fns))
	for _, fn := range ubsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ubsgb.flds)+len(ubsgb.fns))
		for _, f := range *ubsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ubsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ubsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserBoardSubscriptionSelect is the builder for selecting fields of UserBoardSubscription entities.
type UserBoardSubscriptionSelect struct {
	*UserBoardSubscriptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ubss *UserBoardSubscriptionSelect) Aggregate(fns ...AggregateFunc) *UserBoardSubscriptionSelect {
	ubss.fns = append(ubss.fns, fns...)
	return ubss
}

// Scan applies the selector query and scans the result into the given value.
func (ubss *UserBoardSubscriptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ubss.ctx, "Select")
	if err := ubss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserBoardSubscriptionQuery, *UserBoardSubscriptionSelect](ctx, ubss.UserBoardSubscriptionQuery, ubss, ubss.inters, v)
}

func (ubss *UserBoardSubscriptionSelect) sqlScan(ctx context.Context, root *UserBoardSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ubss.fns))
	for _, fn := range ubss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ubss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ubss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
