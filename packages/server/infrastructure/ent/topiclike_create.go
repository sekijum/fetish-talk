// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topiclike"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicLikeCreate is the builder for creating a TopicLike entity.
type TopicLikeCreate struct {
	config
	mutation *TopicLikeMutation
	hooks    []Hook
}

// SetTopicID sets the "topic_id" field.
func (tlc *TopicLikeCreate) SetTopicID(i int) *TopicLikeCreate {
	tlc.mutation.SetTopicID(i)
	return tlc
}

// SetUserID sets the "user_id" field.
func (tlc *TopicLikeCreate) SetUserID(i int) *TopicLikeCreate {
	tlc.mutation.SetUserID(i)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TopicLikeCreate) SetCreatedAt(t time.Time) *TopicLikeCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TopicLikeCreate) SetNillableCreatedAt(t *time.Time) *TopicLikeCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TopicLikeCreate) SetID(i int) *TopicLikeCreate {
	tlc.mutation.SetID(i)
	return tlc
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tlc *TopicLikeCreate) SetTopic(t *Topic) *TopicLikeCreate {
	return tlc.SetTopicID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tlc *TopicLikeCreate) SetUser(u *User) *TopicLikeCreate {
	return tlc.SetUserID(u.ID)
}

// Mutation returns the TopicLikeMutation object of the builder.
func (tlc *TopicLikeCreate) Mutation() *TopicLikeMutation {
	return tlc.mutation
}

// Save creates the TopicLike in the database.
func (tlc *TopicLikeCreate) Save(ctx context.Context) (*TopicLike, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TopicLikeCreate) SaveX(ctx context.Context) *TopicLike {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TopicLikeCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TopicLikeCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TopicLikeCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := topiclike.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TopicLikeCreate) check() error {
	if _, ok := tlc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "TopicLike.topic_id"`)}
	}
	if _, ok := tlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TopicLike.user_id"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TopicLike.created_at"`)}
	}
	if _, ok := tlc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "TopicLike.topic"`)}
	}
	if _, ok := tlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TopicLike.user"`)}
	}
	return nil
}

func (tlc *TopicLikeCreate) sqlSave(ctx context.Context) (*TopicLike, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TopicLikeCreate) createSpec() (*TopicLike, *sqlgraph.CreateSpec) {
	var (
		_node = &TopicLike{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(topiclike.Table, sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt))
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(topiclike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tlc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.TopicTable,
			Columns: []string{topiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.UserTable,
			Columns: []string{topiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TopicLikeCreateBulk is the builder for creating many TopicLike entities in bulk.
type TopicLikeCreateBulk struct {
	config
	err      error
	builders []*TopicLikeCreate
}

// Save creates the TopicLike entities in the database.
func (tlcb *TopicLikeCreateBulk) Save(ctx context.Context) ([]*TopicLike, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TopicLike, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TopicLikeCreateBulk) SaveX(ctx context.Context) []*TopicLike {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TopicLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TopicLikeCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
