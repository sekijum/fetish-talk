// Code generated by ent, DO NOT EDIT.

package comment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// EdgeCommentLikes holds the string denoting the comment_likes edge name in mutations.
	EdgeCommentLikes = "comment_likes"
	// EdgeCommentAttachments holds the string denoting the comment_attachments edge name in mutations.
	EdgeCommentAttachments = "comment_attachments"
	// EdgeUserCommentNotifications holds the string denoting the user_comment_notifications edge name in mutations.
	EdgeUserCommentNotifications = "user_comment_notifications"
	// Table holds the table name of the comment in the database.
	Table = "comments"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "comments"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "comments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "comments"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "comments"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "parent_id"
	// CommentLikesTable is the table that holds the comment_likes relation/edge.
	CommentLikesTable = "comment_likes"
	// CommentLikesInverseTable is the table name for the CommentLike entity.
	// It exists in this package in order to avoid circular dependency with the "commentlike" package.
	CommentLikesInverseTable = "comment_likes"
	// CommentLikesColumn is the table column denoting the comment_likes relation/edge.
	CommentLikesColumn = "comment_id"
	// CommentAttachmentsTable is the table that holds the comment_attachments relation/edge.
	CommentAttachmentsTable = "comment_attachments"
	// CommentAttachmentsInverseTable is the table name for the CommentAttachment entity.
	// It exists in this package in order to avoid circular dependency with the "commentattachment" package.
	CommentAttachmentsInverseTable = "comment_attachments"
	// CommentAttachmentsColumn is the table column denoting the comment_attachments relation/edge.
	CommentAttachmentsColumn = "comment_id"
	// UserCommentNotificationsTable is the table that holds the user_comment_notifications relation/edge.
	UserCommentNotificationsTable = "user_comment_notifications"
	// UserCommentNotificationsInverseTable is the table name for the UserCommentNotification entity.
	// It exists in this package in order to avoid circular dependency with the "usercommentnotification" package.
	UserCommentNotificationsInverseTable = "user_comment_notifications"
	// UserCommentNotificationsColumn is the table column denoting the user_comment_notifications relation/edge.
	UserCommentNotificationsColumn = "comment_id"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldTopicID,
	FieldUserID,
	FieldParentID,
	FieldContent,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusVisible is the default value of the Status enum.
const DefaultStatus = StatusVisible

// Status values.
const (
	StatusVisible     Status = "Visible"
	StatusHidden      Status = "Hidden"
	StatusDeleted     Status = "Deleted"
	StatusDisapproved Status = "Disapproved"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusVisible, StatusHidden, StatusDeleted, StatusDisapproved:
		return nil
	default:
		return fmt.Errorf("comment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTopicID orders the results by the topic_id field.
func ByTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentLikesCount orders the results by comment_likes count.
func ByCommentLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentLikesStep(), opts...)
	}
}

// ByCommentLikes orders the results by comment_likes terms.
func ByCommentLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentAttachmentsCount orders the results by comment_attachments count.
func ByCommentAttachmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentAttachmentsStep(), opts...)
	}
}

// ByCommentAttachments orders the results by comment_attachments terms.
func ByCommentAttachments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentAttachmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCommentNotificationsCount orders the results by user_comment_notifications count.
func ByUserCommentNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCommentNotificationsStep(), opts...)
	}
}

// ByUserCommentNotifications orders the results by user_comment_notifications terms.
func ByUserCommentNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCommentNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TopicTable, TopicColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
	)
}
func newCommentLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentLikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentLikesTable, CommentLikesColumn),
	)
}
func newCommentAttachmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentAttachmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentAttachmentsTable, CommentAttachmentsColumn),
	)
}
func newUserCommentNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCommentNotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCommentNotificationsTable, UserCommentNotificationsColumn),
	)
}
