// Code generated by ent, DO NOT EDIT.

package comment

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// TopicId applies equality check predicate on the "topicId" field. It's identical to TopicIdEQ.
func TopicId(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldTopicId, v))
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentId, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserId, v))
}

// GuestName applies equality check predicate on the "guestName" field. It's identical to GuestNameEQ.
func GuestName(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldGuestName, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldMessage, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// TopicIdEQ applies the EQ predicate on the "topicId" field.
func TopicIdEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldTopicId, v))
}

// TopicIdNEQ applies the NEQ predicate on the "topicId" field.
func TopicIdNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldTopicId, v))
}

// TopicIdIn applies the In predicate on the "topicId" field.
func TopicIdIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldTopicId, vs...))
}

// TopicIdNotIn applies the NotIn predicate on the "topicId" field.
func TopicIdNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldTopicId, vs...))
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldParentId, v))
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldParentId, v))
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldParentId, vs...))
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldParentId, vs...))
}

// ParentIdIsNil applies the IsNil predicate on the "parentId" field.
func ParentIdIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldParentId))
}

// ParentIdNotNil applies the NotNil predicate on the "parentId" field.
func ParentIdNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldParentId))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserId))
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserId))
}

// GuestNameEQ applies the EQ predicate on the "guestName" field.
func GuestNameEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldGuestName, v))
}

// GuestNameNEQ applies the NEQ predicate on the "guestName" field.
func GuestNameNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldGuestName, v))
}

// GuestNameIn applies the In predicate on the "guestName" field.
func GuestNameIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldGuestName, vs...))
}

// GuestNameNotIn applies the NotIn predicate on the "guestName" field.
func GuestNameNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldGuestName, vs...))
}

// GuestNameGT applies the GT predicate on the "guestName" field.
func GuestNameGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldGuestName, v))
}

// GuestNameGTE applies the GTE predicate on the "guestName" field.
func GuestNameGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldGuestName, v))
}

// GuestNameLT applies the LT predicate on the "guestName" field.
func GuestNameLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldGuestName, v))
}

// GuestNameLTE applies the LTE predicate on the "guestName" field.
func GuestNameLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldGuestName, v))
}

// GuestNameContains applies the Contains predicate on the "guestName" field.
func GuestNameContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldGuestName, v))
}

// GuestNameHasPrefix applies the HasPrefix predicate on the "guestName" field.
func GuestNameHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldGuestName, v))
}

// GuestNameHasSuffix applies the HasSuffix predicate on the "guestName" field.
func GuestNameHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldGuestName, v))
}

// GuestNameIsNil applies the IsNil predicate on the "guestName" field.
func GuestNameIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldGuestName))
}

// GuestNameNotNil applies the NotNil predicate on the "guestName" field.
func GuestNameNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldGuestName))
}

// GuestNameEqualFold applies the EqualFold predicate on the "guestName" field.
func GuestNameEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldGuestName, v))
}

// GuestNameContainsFold applies the ContainsFold predicate on the "guestName" field.
func GuestNameContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldGuestName, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldMessage, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReplies applies the HasEdge predicate on the "replies" edge.
func HasReplies() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepliesWith applies the HasEdge predicate on the "replies" edge with a given conditions (other predicates).
func HasRepliesWith(preds ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newRepliesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentAttachments applies the HasEdge predicate on the "comment_attachments" edge.
func HasCommentAttachments() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentAttachmentsTable, CommentAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentAttachmentsWith applies the HasEdge predicate on the "comment_attachments" edge with a given conditions (other predicates).
func HasCommentAttachmentsWith(preds ...predicate.CommentAttachment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newCommentAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikedUsers applies the HasEdge predicate on the "liked_users" edge.
func HasLikedUsers() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LikedUsersTable, LikedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikedUsersWith applies the HasEdge predicate on the "liked_users" edge with a given conditions (other predicates).
func HasLikedUsersWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newLikedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribedUsers applies the HasEdge predicate on the "subscribed_users" edge.
func HasSubscribedUsers() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedUsersWith applies the HasEdge predicate on the "subscribed_users" edge with a given conditions (other predicates).
func HasSubscribedUsersWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newSubscribedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCommentLike applies the HasEdge predicate on the "user_comment_like" edge.
func HasUserCommentLike() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserCommentLikeTable, UserCommentLikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCommentLikeWith applies the HasEdge predicate on the "user_comment_like" edge with a given conditions (other predicates).
func HasUserCommentLikeWith(preds ...predicate.UserCommentLike) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newUserCommentLikeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCommentSubscription applies the HasEdge predicate on the "user_comment_subscription" edge.
func HasUserCommentSubscription() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserCommentSubscriptionTable, UserCommentSubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCommentSubscriptionWith applies the HasEdge predicate on the "user_comment_subscription" edge with a given conditions (other predicates).
func HasUserCommentSubscriptionWith(preds ...predicate.UserCommentSubscription) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newUserCommentSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(sql.NotPredicates(p))
}
