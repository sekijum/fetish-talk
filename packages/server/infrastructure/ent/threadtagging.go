// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadtag"
	"server/infrastructure/ent/threadtagging"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ThreadTagging is the model entity for the ThreadTagging schema.
type ThreadTagging struct {
	config `json:"-"`
	// ThreadId holds the value of the "threadId" field.
	ThreadId int `json:"threadId,omitempty"`
	// TagId holds the value of the "tagId" field.
	TagId int `json:"tagId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadTaggingQuery when eager-loading is set.
	Edges        ThreadTaggingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThreadTaggingEdges holds the relations/edges for other nodes in the graph.
type ThreadTaggingEdges struct {
	// Thread holds the value of the thread edge.
	Thread *Thread `json:"thread,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *ThreadTag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ThreadOrErr returns the Thread value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadTaggingEdges) ThreadOrErr() (*Thread, error) {
	if e.Thread != nil {
		return e.Thread, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: thread.Label}
	}
	return nil, &NotLoadedError{edge: "thread"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadTaggingEdges) TagOrErr() (*ThreadTag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: threadtag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThreadTagging) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case threadtagging.FieldThreadId, threadtagging.FieldTagId:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThreadTagging fields.
func (tt *ThreadTagging) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case threadtagging.FieldThreadId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field threadId", values[i])
			} else if value.Valid {
				tt.ThreadId = int(value.Int64)
			}
		case threadtagging.FieldTagId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tagId", values[i])
			} else if value.Valid {
				tt.TagId = int(value.Int64)
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ThreadTagging.
// This includes values selected through modifiers, order, etc.
func (tt *ThreadTagging) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryThread queries the "thread" edge of the ThreadTagging entity.
func (tt *ThreadTagging) QueryThread() *ThreadQuery {
	return NewThreadTaggingClient(tt.config).QueryThread(tt)
}

// QueryTag queries the "tag" edge of the ThreadTagging entity.
func (tt *ThreadTagging) QueryTag() *ThreadTagQuery {
	return NewThreadTaggingClient(tt.config).QueryTag(tt)
}

// Update returns a builder for updating this ThreadTagging.
// Note that you need to call ThreadTagging.Unwrap() before calling this method if this ThreadTagging
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *ThreadTagging) Update() *ThreadTaggingUpdateOne {
	return NewThreadTaggingClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the ThreadTagging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *ThreadTagging) Unwrap() *ThreadTagging {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThreadTagging is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *ThreadTagging) String() string {
	var builder strings.Builder
	builder.WriteString("ThreadTagging(")
	builder.WriteString("threadId=")
	builder.WriteString(fmt.Sprintf("%v", tt.ThreadId))
	builder.WriteString(", ")
	builder.WriteString("tagId=")
	builder.WriteString(fmt.Sprintf("%v", tt.TagId))
	builder.WriteByte(')')
	return builder.String()
}

// ThreadTaggings is a parsable slice of ThreadTagging.
type ThreadTaggings []*ThreadTagging
