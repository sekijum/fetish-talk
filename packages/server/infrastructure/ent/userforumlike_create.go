// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userforumlike"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserForumLikeCreate is the builder for creating a UserForumLike entity.
type UserForumLikeCreate struct {
	config
	mutation *UserForumLikeMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (uflc *UserForumLikeCreate) SetUserId(i int) *UserForumLikeCreate {
	uflc.mutation.SetUserId(i)
	return uflc
}

// SetForumId sets the "forumId" field.
func (uflc *UserForumLikeCreate) SetForumId(i int) *UserForumLikeCreate {
	uflc.mutation.SetForumId(i)
	return uflc
}

// SetType sets the "type" field.
func (uflc *UserForumLikeCreate) SetType(u userforumlike.Type) *UserForumLikeCreate {
	uflc.mutation.SetType(u)
	return uflc
}

// SetLikedAt sets the "likedAt" field.
func (uflc *UserForumLikeCreate) SetLikedAt(t time.Time) *UserForumLikeCreate {
	uflc.mutation.SetLikedAt(t)
	return uflc
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (uflc *UserForumLikeCreate) SetNillableLikedAt(t *time.Time) *UserForumLikeCreate {
	if t != nil {
		uflc.SetLikedAt(*t)
	}
	return uflc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uflc *UserForumLikeCreate) SetUserID(id int) *UserForumLikeCreate {
	uflc.mutation.SetUserID(id)
	return uflc
}

// SetUser sets the "user" edge to the User entity.
func (uflc *UserForumLikeCreate) SetUser(u *User) *UserForumLikeCreate {
	return uflc.SetUserID(u.ID)
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (uflc *UserForumLikeCreate) SetForumID(id int) *UserForumLikeCreate {
	uflc.mutation.SetForumID(id)
	return uflc
}

// SetForum sets the "forum" edge to the Forum entity.
func (uflc *UserForumLikeCreate) SetForum(f *Forum) *UserForumLikeCreate {
	return uflc.SetForumID(f.ID)
}

// Mutation returns the UserForumLikeMutation object of the builder.
func (uflc *UserForumLikeCreate) Mutation() *UserForumLikeMutation {
	return uflc.mutation
}

// Save creates the UserForumLike in the database.
func (uflc *UserForumLikeCreate) Save(ctx context.Context) (*UserForumLike, error) {
	uflc.defaults()
	return withHooks(ctx, uflc.sqlSave, uflc.mutation, uflc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uflc *UserForumLikeCreate) SaveX(ctx context.Context) *UserForumLike {
	v, err := uflc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uflc *UserForumLikeCreate) Exec(ctx context.Context) error {
	_, err := uflc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uflc *UserForumLikeCreate) ExecX(ctx context.Context) {
	if err := uflc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uflc *UserForumLikeCreate) defaults() {
	if _, ok := uflc.mutation.LikedAt(); !ok {
		v := userforumlike.DefaultLikedAt()
		uflc.mutation.SetLikedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uflc *UserForumLikeCreate) check() error {
	if _, ok := uflc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserForumLike.userId"`)}
	}
	if _, ok := uflc.mutation.ForumId(); !ok {
		return &ValidationError{Name: "forumId", err: errors.New(`ent: missing required field "UserForumLike.forumId"`)}
	}
	if _, ok := uflc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserForumLike.type"`)}
	}
	if v, ok := uflc.mutation.GetType(); ok {
		if err := userforumlike.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserForumLike.type": %w`, err)}
		}
	}
	if _, ok := uflc.mutation.LikedAt(); !ok {
		return &ValidationError{Name: "likedAt", err: errors.New(`ent: missing required field "UserForumLike.likedAt"`)}
	}
	if _, ok := uflc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserForumLike.user"`)}
	}
	if _, ok := uflc.mutation.ForumID(); !ok {
		return &ValidationError{Name: "forum", err: errors.New(`ent: missing required edge "UserForumLike.forum"`)}
	}
	return nil
}

func (uflc *UserForumLikeCreate) sqlSave(ctx context.Context) (*UserForumLike, error) {
	if err := uflc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uflc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uflc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (uflc *UserForumLikeCreate) createSpec() (*UserForumLike, *sqlgraph.CreateSpec) {
	var (
		_node = &UserForumLike{config: uflc.config}
		_spec = sqlgraph.NewCreateSpec(userforumlike.Table, nil)
	)
	if value, ok := uflc.mutation.GetType(); ok {
		_spec.SetField(userforumlike.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := uflc.mutation.LikedAt(); ok {
		_spec.SetField(userforumlike.FieldLikedAt, field.TypeTime, value)
		_node.LikedAt = value
	}
	if nodes := uflc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.UserTable,
			Columns: []string{userforumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uflc.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.ForumTable,
			Columns: []string{userforumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ForumId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserForumLikeCreateBulk is the builder for creating many UserForumLike entities in bulk.
type UserForumLikeCreateBulk struct {
	config
	err      error
	builders []*UserForumLikeCreate
}

// Save creates the UserForumLike entities in the database.
func (uflcb *UserForumLikeCreateBulk) Save(ctx context.Context) ([]*UserForumLike, error) {
	if uflcb.err != nil {
		return nil, uflcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uflcb.builders))
	nodes := make([]*UserForumLike, len(uflcb.builders))
	mutators := make([]Mutator, len(uflcb.builders))
	for i := range uflcb.builders {
		func(i int, root context.Context) {
			builder := uflcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserForumLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uflcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uflcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uflcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uflcb *UserForumLikeCreateBulk) SaveX(ctx context.Context) []*UserForumLike {
	v, err := uflcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uflcb *UserForumLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := uflcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uflcb *UserForumLikeCreateBulk) ExecX(ctx context.Context) {
	if err := uflcb.Exec(ctx); err != nil {
		panic(err)
	}
}
