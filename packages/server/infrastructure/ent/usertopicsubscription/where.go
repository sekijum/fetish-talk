// Code generated by ent, DO NOT EDIT.

package usertopicsubscription

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldUserId, v))
}

// TopicId applies equality check predicate on the "topicId" field. It's identical to TopicIdEQ.
func TopicId(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldTopicId, v))
}

// IsNotified applies equality check predicate on the "isNotified" field. It's identical to IsNotifiedEQ.
func IsNotified(v bool) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldIsNotified, v))
}

// SubscribedAt applies equality check predicate on the "subscribedAt" field. It's identical to SubscribedAtEQ.
func SubscribedAt(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldSubscribedAt, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNotIn(FieldUserId, vs...))
}

// TopicIdEQ applies the EQ predicate on the "topicId" field.
func TopicIdEQ(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldTopicId, v))
}

// TopicIdNEQ applies the NEQ predicate on the "topicId" field.
func TopicIdNEQ(v int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNEQ(FieldTopicId, v))
}

// TopicIdIn applies the In predicate on the "topicId" field.
func TopicIdIn(vs ...int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldIn(FieldTopicId, vs...))
}

// TopicIdNotIn applies the NotIn predicate on the "topicId" field.
func TopicIdNotIn(vs ...int) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNotIn(FieldTopicId, vs...))
}

// IsNotifiedEQ applies the EQ predicate on the "isNotified" field.
func IsNotifiedEQ(v bool) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldIsNotified, v))
}

// IsNotifiedNEQ applies the NEQ predicate on the "isNotified" field.
func IsNotifiedNEQ(v bool) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNEQ(FieldIsNotified, v))
}

// SubscribedAtEQ applies the EQ predicate on the "subscribedAt" field.
func SubscribedAtEQ(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldEQ(FieldSubscribedAt, v))
}

// SubscribedAtNEQ applies the NEQ predicate on the "subscribedAt" field.
func SubscribedAtNEQ(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNEQ(FieldSubscribedAt, v))
}

// SubscribedAtIn applies the In predicate on the "subscribedAt" field.
func SubscribedAtIn(vs ...time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldIn(FieldSubscribedAt, vs...))
}

// SubscribedAtNotIn applies the NotIn predicate on the "subscribedAt" field.
func SubscribedAtNotIn(vs ...time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldNotIn(FieldSubscribedAt, vs...))
}

// SubscribedAtGT applies the GT predicate on the "subscribedAt" field.
func SubscribedAtGT(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldGT(FieldSubscribedAt, v))
}

// SubscribedAtGTE applies the GTE predicate on the "subscribedAt" field.
func SubscribedAtGTE(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldGTE(FieldSubscribedAt, v))
}

// SubscribedAtLT applies the LT predicate on the "subscribedAt" field.
func SubscribedAtLT(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldLT(FieldSubscribedAt, v))
}

// SubscribedAtLTE applies the LTE predicate on the "subscribedAt" field.
func SubscribedAtLTE(v time.Time) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.FieldLTE(FieldSubscribedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TopicColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserTopicSubscription) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserTopicSubscription) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserTopicSubscription) predicate.UserTopicSubscription {
	return predicate.UserTopicSubscription(sql.NotPredicates(p))
}
