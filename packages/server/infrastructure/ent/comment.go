// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Status holds the value of the "status" field.
	Status comment.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges        CommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Comment `json:"parent,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Comment `json:"replies,omitempty"`
	// CommentLikes holds the value of the comment_likes edge.
	CommentLikes []*CommentLike `json:"comment_likes,omitempty"`
	// CommentAttachments holds the value of the comment_attachments edge.
	CommentAttachments []*CommentAttachment `json:"comment_attachments,omitempty"`
	// UserCommentNotifications holds the value of the user_comment_notifications edge.
	UserCommentNotifications []*UserCommentNotification `json:"user_comment_notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ParentOrErr() (*Comment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) RepliesOrErr() ([]*Comment, error) {
	if e.loadedTypes[3] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// CommentLikesOrErr returns the CommentLikes value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentLikesOrErr() ([]*CommentLike, error) {
	if e.loadedTypes[4] {
		return e.CommentLikes, nil
	}
	return nil, &NotLoadedError{edge: "comment_likes"}
}

// CommentAttachmentsOrErr returns the CommentAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentAttachmentsOrErr() ([]*CommentAttachment, error) {
	if e.loadedTypes[5] {
		return e.CommentAttachments, nil
	}
	return nil, &NotLoadedError{edge: "comment_attachments"}
}

// UserCommentNotificationsOrErr returns the UserCommentNotifications value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) UserCommentNotificationsOrErr() ([]*UserCommentNotification, error) {
	if e.loadedTypes[6] {
		return e.UserCommentNotifications, nil
	}
	return nil, &NotLoadedError{edge: "user_comment_notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldID, comment.FieldTopicID, comment.FieldUserID, comment.FieldParentID:
			values[i] = new(sql.NullInt64)
		case comment.FieldContent, comment.FieldStatus:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				c.TopicID = int(value.Int64)
			}
		case comment.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case comment.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = int(value.Int64)
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = comment.Status(value.String)
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the Comment entity.
func (c *Comment) QueryTopic() *TopicQuery {
	return NewCommentClient(c.config).QueryTopic(c)
}

// QueryUser queries the "user" edge of the Comment entity.
func (c *Comment) QueryUser() *UserQuery {
	return NewCommentClient(c.config).QueryUser(c)
}

// QueryParent queries the "parent" edge of the Comment entity.
func (c *Comment) QueryParent() *CommentQuery {
	return NewCommentClient(c.config).QueryParent(c)
}

// QueryReplies queries the "replies" edge of the Comment entity.
func (c *Comment) QueryReplies() *CommentQuery {
	return NewCommentClient(c.config).QueryReplies(c)
}

// QueryCommentLikes queries the "comment_likes" edge of the Comment entity.
func (c *Comment) QueryCommentLikes() *CommentLikeQuery {
	return NewCommentClient(c.config).QueryCommentLikes(c)
}

// QueryCommentAttachments queries the "comment_attachments" edge of the Comment entity.
func (c *Comment) QueryCommentAttachments() *CommentAttachmentQuery {
	return NewCommentClient(c.config).QueryCommentAttachments(c)
}

// QueryUserCommentNotifications queries the "user_comment_notifications" edge of the Comment entity.
func (c *Comment) QueryUserCommentNotifications() *UserCommentNotificationQuery {
	return NewCommentClient(c.config).QueryUserCommentNotifications(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TopicID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ParentID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
