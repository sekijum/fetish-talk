// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userboardsubscription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBoardSubscriptionCreate is the builder for creating a UserBoardSubscription entity.
type UserBoardSubscriptionCreate struct {
	config
	mutation *UserBoardSubscriptionMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (ubsc *UserBoardSubscriptionCreate) SetUserId(i int) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetUserId(i)
	return ubsc
}

// SetBoardId sets the "boardId" field.
func (ubsc *UserBoardSubscriptionCreate) SetBoardId(i int) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetBoardId(i)
	return ubsc
}

// SetIsNotified sets the "isNotified" field.
func (ubsc *UserBoardSubscriptionCreate) SetIsNotified(b bool) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetIsNotified(b)
	return ubsc
}

// SetNillableIsNotified sets the "isNotified" field if the given value is not nil.
func (ubsc *UserBoardSubscriptionCreate) SetNillableIsNotified(b *bool) *UserBoardSubscriptionCreate {
	if b != nil {
		ubsc.SetIsNotified(*b)
	}
	return ubsc
}

// SetIsChecked sets the "isChecked" field.
func (ubsc *UserBoardSubscriptionCreate) SetIsChecked(b bool) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetIsChecked(b)
	return ubsc
}

// SetNillableIsChecked sets the "isChecked" field if the given value is not nil.
func (ubsc *UserBoardSubscriptionCreate) SetNillableIsChecked(b *bool) *UserBoardSubscriptionCreate {
	if b != nil {
		ubsc.SetIsChecked(*b)
	}
	return ubsc
}

// SetSubscribedAt sets the "subscribedAt" field.
func (ubsc *UserBoardSubscriptionCreate) SetSubscribedAt(t time.Time) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetSubscribedAt(t)
	return ubsc
}

// SetNillableSubscribedAt sets the "subscribedAt" field if the given value is not nil.
func (ubsc *UserBoardSubscriptionCreate) SetNillableSubscribedAt(t *time.Time) *UserBoardSubscriptionCreate {
	if t != nil {
		ubsc.SetSubscribedAt(*t)
	}
	return ubsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubsc *UserBoardSubscriptionCreate) SetUserID(id int) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetUserID(id)
	return ubsc
}

// SetUser sets the "user" edge to the User entity.
func (ubsc *UserBoardSubscriptionCreate) SetUser(u *User) *UserBoardSubscriptionCreate {
	return ubsc.SetUserID(u.ID)
}

// SetBoardID sets the "board" edge to the Board entity by ID.
func (ubsc *UserBoardSubscriptionCreate) SetBoardID(id int) *UserBoardSubscriptionCreate {
	ubsc.mutation.SetBoardID(id)
	return ubsc
}

// SetBoard sets the "board" edge to the Board entity.
func (ubsc *UserBoardSubscriptionCreate) SetBoard(b *Board) *UserBoardSubscriptionCreate {
	return ubsc.SetBoardID(b.ID)
}

// Mutation returns the UserBoardSubscriptionMutation object of the builder.
func (ubsc *UserBoardSubscriptionCreate) Mutation() *UserBoardSubscriptionMutation {
	return ubsc.mutation
}

// Save creates the UserBoardSubscription in the database.
func (ubsc *UserBoardSubscriptionCreate) Save(ctx context.Context) (*UserBoardSubscription, error) {
	ubsc.defaults()
	return withHooks(ctx, ubsc.sqlSave, ubsc.mutation, ubsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ubsc *UserBoardSubscriptionCreate) SaveX(ctx context.Context) *UserBoardSubscription {
	v, err := ubsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubsc *UserBoardSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := ubsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubsc *UserBoardSubscriptionCreate) ExecX(ctx context.Context) {
	if err := ubsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubsc *UserBoardSubscriptionCreate) defaults() {
	if _, ok := ubsc.mutation.IsNotified(); !ok {
		v := userboardsubscription.DefaultIsNotified
		ubsc.mutation.SetIsNotified(v)
	}
	if _, ok := ubsc.mutation.IsChecked(); !ok {
		v := userboardsubscription.DefaultIsChecked
		ubsc.mutation.SetIsChecked(v)
	}
	if _, ok := ubsc.mutation.SubscribedAt(); !ok {
		v := userboardsubscription.DefaultSubscribedAt()
		ubsc.mutation.SetSubscribedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubsc *UserBoardSubscriptionCreate) check() error {
	if _, ok := ubsc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserBoardSubscription.userId"`)}
	}
	if _, ok := ubsc.mutation.BoardId(); !ok {
		return &ValidationError{Name: "boardId", err: errors.New(`ent: missing required field "UserBoardSubscription.boardId"`)}
	}
	if _, ok := ubsc.mutation.IsNotified(); !ok {
		return &ValidationError{Name: "isNotified", err: errors.New(`ent: missing required field "UserBoardSubscription.isNotified"`)}
	}
	if _, ok := ubsc.mutation.IsChecked(); !ok {
		return &ValidationError{Name: "isChecked", err: errors.New(`ent: missing required field "UserBoardSubscription.isChecked"`)}
	}
	if _, ok := ubsc.mutation.SubscribedAt(); !ok {
		return &ValidationError{Name: "subscribedAt", err: errors.New(`ent: missing required field "UserBoardSubscription.subscribedAt"`)}
	}
	if _, ok := ubsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserBoardSubscription.user"`)}
	}
	if _, ok := ubsc.mutation.BoardID(); !ok {
		return &ValidationError{Name: "board", err: errors.New(`ent: missing required edge "UserBoardSubscription.board"`)}
	}
	return nil
}

func (ubsc *UserBoardSubscriptionCreate) sqlSave(ctx context.Context) (*UserBoardSubscription, error) {
	if err := ubsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ubsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ubsc *UserBoardSubscriptionCreate) createSpec() (*UserBoardSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBoardSubscription{config: ubsc.config}
		_spec = sqlgraph.NewCreateSpec(userboardsubscription.Table, nil)
	)
	if value, ok := ubsc.mutation.IsNotified(); ok {
		_spec.SetField(userboardsubscription.FieldIsNotified, field.TypeBool, value)
		_node.IsNotified = value
	}
	if value, ok := ubsc.mutation.IsChecked(); ok {
		_spec.SetField(userboardsubscription.FieldIsChecked, field.TypeBool, value)
		_node.IsChecked = value
	}
	if value, ok := ubsc.mutation.SubscribedAt(); ok {
		_spec.SetField(userboardsubscription.FieldSubscribedAt, field.TypeTime, value)
		_node.SubscribedAt = value
	}
	if nodes := ubsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userboardsubscription.UserTable,
			Columns: []string{userboardsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ubsc.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userboardsubscription.BoardTable,
			Columns: []string{userboardsubscription.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BoardId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserBoardSubscriptionCreateBulk is the builder for creating many UserBoardSubscription entities in bulk.
type UserBoardSubscriptionCreateBulk struct {
	config
	err      error
	builders []*UserBoardSubscriptionCreate
}

// Save creates the UserBoardSubscription entities in the database.
func (ubscb *UserBoardSubscriptionCreateBulk) Save(ctx context.Context) ([]*UserBoardSubscription, error) {
	if ubscb.err != nil {
		return nil, ubscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ubscb.builders))
	nodes := make([]*UserBoardSubscription, len(ubscb.builders))
	mutators := make([]Mutator, len(ubscb.builders))
	for i := range ubscb.builders {
		func(i int, root context.Context) {
			builder := ubscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBoardSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubscb *UserBoardSubscriptionCreateBulk) SaveX(ctx context.Context) []*UserBoardSubscription {
	v, err := ubscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubscb *UserBoardSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ubscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubscb *UserBoardSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ubscb.Exec(ctx); err != nil {
		panic(err)
	}
}
