package schema

import (
    "entgo.io/ent"
    "entgo.io/ent/schema/field"
    "entgo.io/ent/schema/edge"
    "time"
)

type Topic struct {
    ent.Schema
}

func (Topic) Fields() []ent.Field {
    return []ent.Field{
        field.Int("id").Unique().Immutable(),
        field.Int("forumId").StorageKey("forum_id"),
        field.Int("userId").StorageKey("user_id"),
        field.String("title").Optional().MaxLen(50),
        field.String("description").Optional().MaxLen(255),
        field.String("thumbnailUrl").Optional().StorageKey("thumbnail_url"),
        field.Bool("isAutoGenerated").Default(false).StorageKey("is_auto_generated").Comment("自動生成されたトピックを示すフラグ"),
        field.Bool("isNotifyOnComment").Default(true).StorageKey("is_notify_on_comment").Comment("コメントされた時に通知するかどうかのフラグ"),
        field.Enum("status").Values("Open", "Closed", "Archived").Default("Open"),
        field.Time("createdAt").Default(time.Now).StorageKey("created_at"),
        field.Time("updatedAt").Default(time.Now).UpdateDefault(time.Now).StorageKey("updated_at"),
    }
}

func (Topic) Edges() []ent.Edge {
    return []ent.Edge{
        edge.From("forum", Forum.Type).Ref("topics").Unique().Field("forumId").Required(),
        edge.From("owner", User.Type).Ref("topics").Unique().Field("userId").Required(),
        edge.To("comments", Comment.Type),
        edge.To("tags", TopicTag.Type).Through("topic_taggings", TopicTagging.Type),
        edge.From("liked_users", User.Type).Ref("liked_topics").Through("user_topic_like", UserTopicLike.Type),
        edge.From("subscribed_users", User.Type).Ref("subscribed_topics").Through("user_topic_subscription", UserTopicSubscription.Type),
    }
}
