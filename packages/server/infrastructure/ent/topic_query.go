// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopiclike"
	"server/infrastructure/ent/usertopicsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicQuery is the builder for querying Topic entities.
type TopicQuery struct {
	config
	ctx                       *QueryContext
	order                     []topic.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Topic
	withForum                 *ForumQuery
	withOwner                 *UserQuery
	withComments              *CommentQuery
	withTags                  *TopicTagQuery
	withLikedUsers            *UserQuery
	withSubscribedUsers       *UserQuery
	withTopicTaggings         *TopicTaggingQuery
	withUserTopicLike         *UserTopicLikeQuery
	withUserTopicSubscription *UserTopicSubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TopicQuery builder.
func (tq *TopicQuery) Where(ps ...predicate.Topic) *TopicQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TopicQuery) Limit(limit int) *TopicQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TopicQuery) Offset(offset int) *TopicQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TopicQuery) Unique(unique bool) *TopicQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TopicQuery) Order(o ...topic.OrderOption) *TopicQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryForum chains the current query on the "forum" edge.
func (tq *TopicQuery) QueryForum() *ForumQuery {
	query := (&ForumClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, topic.ForumTable, topic.ForumColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (tq *TopicQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, topic.OwnerTable, topic.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (tq *TopicQuery) QueryComments() *CommentQuery {
	query := (&CommentClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, topic.CommentsTable, topic.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (tq *TopicQuery) QueryTags() *TopicTagQuery {
	query := (&TopicTagClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(topictag.Table, topictag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, topic.TagsTable, topic.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedUsers chains the current query on the "liked_users" edge.
func (tq *TopicQuery) QueryLikedUsers() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topic.LikedUsersTable, topic.LikedUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribedUsers chains the current query on the "subscribed_users" edge.
func (tq *TopicQuery) QuerySubscribedUsers() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topic.SubscribedUsersTable, topic.SubscribedUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTopicTaggings chains the current query on the "topic_taggings" edge.
func (tq *TopicQuery) QueryTopicTaggings() *TopicTaggingQuery {
	query := (&TopicTaggingClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(topictagging.Table, topictagging.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.TopicTaggingsTable, topic.TopicTaggingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserTopicLike chains the current query on the "user_topic_like" edge.
func (tq *TopicQuery) QueryUserTopicLike() *UserTopicLikeQuery {
	query := (&UserTopicLikeClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(usertopiclike.Table, usertopiclike.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.UserTopicLikeTable, topic.UserTopicLikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserTopicSubscription chains the current query on the "user_topic_subscription" edge.
func (tq *TopicQuery) QueryUserTopicSubscription() *UserTopicSubscriptionQuery {
	query := (&UserTopicSubscriptionClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, selector),
			sqlgraph.To(usertopicsubscription.Table, usertopicsubscription.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.UserTopicSubscriptionTable, topic.UserTopicSubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Topic entity from the query.
// Returns a *NotFoundError when no Topic was found.
func (tq *TopicQuery) First(ctx context.Context) (*Topic, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{topic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TopicQuery) FirstX(ctx context.Context) *Topic {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Topic ID from the query.
// Returns a *NotFoundError when no Topic ID was found.
func (tq *TopicQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{topic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TopicQuery) FirstIDX(ctx context.Context) int {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Topic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Topic entity is found.
// Returns a *NotFoundError when no Topic entities are found.
func (tq *TopicQuery) Only(ctx context.Context) (*Topic, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{topic.Label}
	default:
		return nil, &NotSingularError{topic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TopicQuery) OnlyX(ctx context.Context) *Topic {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Topic ID in the query.
// Returns a *NotSingularError when more than one Topic ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TopicQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{topic.Label}
	default:
		err = &NotSingularError{topic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TopicQuery) OnlyIDX(ctx context.Context) int {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Topics.
func (tq *TopicQuery) All(ctx context.Context) ([]*Topic, error) {
	ctx = setContextOp(ctx, tq.ctx, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Topic, *TopicQuery]()
	return withInterceptors[[]*Topic](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TopicQuery) AllX(ctx context.Context) []*Topic {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Topic IDs.
func (tq *TopicQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, "IDs")
	if err = tq.Select(topic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TopicQuery) IDsX(ctx context.Context) []int {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TopicQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TopicQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TopicQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TopicQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TopicQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TopicQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TopicQuery) Clone() *TopicQuery {
	if tq == nil {
		return nil
	}
	return &TopicQuery{
		config:                    tq.config,
		ctx:                       tq.ctx.Clone(),
		order:                     append([]topic.OrderOption{}, tq.order...),
		inters:                    append([]Interceptor{}, tq.inters...),
		predicates:                append([]predicate.Topic{}, tq.predicates...),
		withForum:                 tq.withForum.Clone(),
		withOwner:                 tq.withOwner.Clone(),
		withComments:              tq.withComments.Clone(),
		withTags:                  tq.withTags.Clone(),
		withLikedUsers:            tq.withLikedUsers.Clone(),
		withSubscribedUsers:       tq.withSubscribedUsers.Clone(),
		withTopicTaggings:         tq.withTopicTaggings.Clone(),
		withUserTopicLike:         tq.withUserTopicLike.Clone(),
		withUserTopicSubscription: tq.withUserTopicSubscription.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithForum tells the query-builder to eager-load the nodes that are connected to
// the "forum" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithForum(opts ...func(*ForumQuery)) *TopicQuery {
	query := (&ForumClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withForum = query
	return tq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithOwner(opts ...func(*UserQuery)) *TopicQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withOwner = query
	return tq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithComments(opts ...func(*CommentQuery)) *TopicQuery {
	query := (&CommentClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withComments = query
	return tq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithTags(opts ...func(*TopicTagQuery)) *TopicQuery {
	query := (&TopicTagClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTags = query
	return tq
}

// WithLikedUsers tells the query-builder to eager-load the nodes that are connected to
// the "liked_users" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithLikedUsers(opts ...func(*UserQuery)) *TopicQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withLikedUsers = query
	return tq
}

// WithSubscribedUsers tells the query-builder to eager-load the nodes that are connected to
// the "subscribed_users" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithSubscribedUsers(opts ...func(*UserQuery)) *TopicQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withSubscribedUsers = query
	return tq
}

// WithTopicTaggings tells the query-builder to eager-load the nodes that are connected to
// the "topic_taggings" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithTopicTaggings(opts ...func(*TopicTaggingQuery)) *TopicQuery {
	query := (&TopicTaggingClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withTopicTaggings = query
	return tq
}

// WithUserTopicLike tells the query-builder to eager-load the nodes that are connected to
// the "user_topic_like" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithUserTopicLike(opts ...func(*UserTopicLikeQuery)) *TopicQuery {
	query := (&UserTopicLikeClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withUserTopicLike = query
	return tq
}

// WithUserTopicSubscription tells the query-builder to eager-load the nodes that are connected to
// the "user_topic_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TopicQuery) WithUserTopicSubscription(opts ...func(*UserTopicSubscriptionQuery)) *TopicQuery {
	query := (&UserTopicSubscriptionClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withUserTopicSubscription = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ForumId int `json:"forumId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Topic.Query().
//		GroupBy(topic.FieldForumId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TopicQuery) GroupBy(field string, fields ...string) *TopicGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TopicGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = topic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ForumId int `json:"forumId,omitempty"`
//	}
//
//	client.Topic.Query().
//		Select(topic.FieldForumId).
//		Scan(ctx, &v)
func (tq *TopicQuery) Select(fields ...string) *TopicSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TopicSelect{TopicQuery: tq}
	sbuild.label = topic.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TopicSelect configured with the given aggregations.
func (tq *TopicQuery) Aggregate(fns ...AggregateFunc) *TopicSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TopicQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !topic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TopicQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Topic, error) {
	var (
		nodes       = []*Topic{}
		_spec       = tq.querySpec()
		loadedTypes = [9]bool{
			tq.withForum != nil,
			tq.withOwner != nil,
			tq.withComments != nil,
			tq.withTags != nil,
			tq.withLikedUsers != nil,
			tq.withSubscribedUsers != nil,
			tq.withTopicTaggings != nil,
			tq.withUserTopicLike != nil,
			tq.withUserTopicSubscription != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Topic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Topic{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withForum; query != nil {
		if err := tq.loadForum(ctx, query, nodes, nil,
			func(n *Topic, e *Forum) { n.Edges.Forum = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withOwner; query != nil {
		if err := tq.loadOwner(ctx, query, nodes, nil,
			func(n *Topic, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withComments; query != nil {
		if err := tq.loadComments(ctx, query, nodes,
			func(n *Topic) { n.Edges.Comments = []*Comment{} },
			func(n *Topic, e *Comment) { n.Edges.Comments = append(n.Edges.Comments, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withTags; query != nil {
		if err := tq.loadTags(ctx, query, nodes,
			func(n *Topic) { n.Edges.Tags = []*TopicTag{} },
			func(n *Topic, e *TopicTag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withLikedUsers; query != nil {
		if err := tq.loadLikedUsers(ctx, query, nodes,
			func(n *Topic) { n.Edges.LikedUsers = []*User{} },
			func(n *Topic, e *User) { n.Edges.LikedUsers = append(n.Edges.LikedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withSubscribedUsers; query != nil {
		if err := tq.loadSubscribedUsers(ctx, query, nodes,
			func(n *Topic) { n.Edges.SubscribedUsers = []*User{} },
			func(n *Topic, e *User) { n.Edges.SubscribedUsers = append(n.Edges.SubscribedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withTopicTaggings; query != nil {
		if err := tq.loadTopicTaggings(ctx, query, nodes,
			func(n *Topic) { n.Edges.TopicTaggings = []*TopicTagging{} },
			func(n *Topic, e *TopicTagging) { n.Edges.TopicTaggings = append(n.Edges.TopicTaggings, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withUserTopicLike; query != nil {
		if err := tq.loadUserTopicLike(ctx, query, nodes,
			func(n *Topic) { n.Edges.UserTopicLike = []*UserTopicLike{} },
			func(n *Topic, e *UserTopicLike) { n.Edges.UserTopicLike = append(n.Edges.UserTopicLike, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withUserTopicSubscription; query != nil {
		if err := tq.loadUserTopicSubscription(ctx, query, nodes,
			func(n *Topic) { n.Edges.UserTopicSubscription = []*UserTopicSubscription{} },
			func(n *Topic, e *UserTopicSubscription) {
				n.Edges.UserTopicSubscription = append(n.Edges.UserTopicSubscription, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TopicQuery) loadForum(ctx context.Context, query *ForumQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *Forum)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Topic)
	for i := range nodes {
		fk := nodes[i].ForumId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(forum.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "forumId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TopicQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Topic)
	for i := range nodes {
		fk := nodes[i].UserId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "userId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TopicQuery) loadComments(ctx context.Context, query *CommentQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *Comment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Topic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(comment.FieldTopicId)
	}
	query.Where(predicate.Comment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(topic.CommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TopicId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "topicId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TopicQuery) loadTags(ctx context.Context, query *TopicTagQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *TopicTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Topic)
	nids := make(map[int]map[*Topic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(topic.TagsTable)
		s.Join(joinT).On(s.C(topictag.FieldID), joinT.C(topic.TagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(topic.TagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(topic.TagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Topic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*TopicTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TopicQuery) loadLikedUsers(ctx context.Context, query *UserQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Topic)
	nids := make(map[int]map[*Topic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(topic.LikedUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(topic.LikedUsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(topic.LikedUsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(topic.LikedUsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Topic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "liked_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TopicQuery) loadSubscribedUsers(ctx context.Context, query *UserQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Topic)
	nids := make(map[int]map[*Topic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(topic.SubscribedUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(topic.SubscribedUsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(topic.SubscribedUsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(topic.SubscribedUsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Topic]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscribed_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TopicQuery) loadTopicTaggings(ctx context.Context, query *TopicTaggingQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *TopicTagging)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Topic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(topictagging.FieldTopicId)
	}
	query.Where(predicate.TopicTagging(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(topic.TopicTaggingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TopicId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "topicId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TopicQuery) loadUserTopicLike(ctx context.Context, query *UserTopicLikeQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *UserTopicLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Topic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usertopiclike.FieldTopicId)
	}
	query.Where(predicate.UserTopicLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(topic.UserTopicLikeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TopicId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "topicId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TopicQuery) loadUserTopicSubscription(ctx context.Context, query *UserTopicSubscriptionQuery, nodes []*Topic, init func(*Topic), assign func(*Topic, *UserTopicSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Topic)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usertopicsubscription.FieldTopicId)
	}
	query.Where(predicate.UserTopicSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(topic.UserTopicSubscriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TopicId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "topicId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (tq *TopicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TopicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for i := range fields {
			if fields[i] != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tq.withForum != nil {
			_spec.Node.AddColumnOnce(topic.FieldForumId)
		}
		if tq.withOwner != nil {
			_spec.Node.AddColumnOnce(topic.FieldUserId)
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TopicQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(topic.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = topic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TopicGroupBy is the group-by builder for Topic entities.
type TopicGroupBy struct {
	selector
	build *TopicQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TopicGroupBy) Aggregate(fns ...AggregateFunc) *TopicGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TopicGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TopicQuery, *TopicGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TopicGroupBy) sqlScan(ctx context.Context, root *TopicQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TopicSelect is the builder for selecting fields of Topic entities.
type TopicSelect struct {
	*TopicQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TopicSelect) Aggregate(fns ...AggregateFunc) *TopicSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TopicSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TopicQuery, *TopicSelect](ctx, ts.TopicQuery, ts, ts.inters, v)
}

func (ts *TopicSelect) sqlScan(ctx context.Context, root *TopicQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
