// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicsubscription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicSubscriptionCreate is the builder for creating a UserTopicSubscription entity.
type UserTopicSubscriptionCreate struct {
	config
	mutation *UserTopicSubscriptionMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (utsc *UserTopicSubscriptionCreate) SetUserId(i int) *UserTopicSubscriptionCreate {
	utsc.mutation.SetUserId(i)
	return utsc
}

// SetTopicId sets the "topicId" field.
func (utsc *UserTopicSubscriptionCreate) SetTopicId(i int) *UserTopicSubscriptionCreate {
	utsc.mutation.SetTopicId(i)
	return utsc
}

// SetIsNotified sets the "isNotified" field.
func (utsc *UserTopicSubscriptionCreate) SetIsNotified(b bool) *UserTopicSubscriptionCreate {
	utsc.mutation.SetIsNotified(b)
	return utsc
}

// SetNillableIsNotified sets the "isNotified" field if the given value is not nil.
func (utsc *UserTopicSubscriptionCreate) SetNillableIsNotified(b *bool) *UserTopicSubscriptionCreate {
	if b != nil {
		utsc.SetIsNotified(*b)
	}
	return utsc
}

// SetSubscribedAt sets the "subscribedAt" field.
func (utsc *UserTopicSubscriptionCreate) SetSubscribedAt(t time.Time) *UserTopicSubscriptionCreate {
	utsc.mutation.SetSubscribedAt(t)
	return utsc
}

// SetNillableSubscribedAt sets the "subscribedAt" field if the given value is not nil.
func (utsc *UserTopicSubscriptionCreate) SetNillableSubscribedAt(t *time.Time) *UserTopicSubscriptionCreate {
	if t != nil {
		utsc.SetSubscribedAt(*t)
	}
	return utsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utsc *UserTopicSubscriptionCreate) SetUserID(id int) *UserTopicSubscriptionCreate {
	utsc.mutation.SetUserID(id)
	return utsc
}

// SetUser sets the "user" edge to the User entity.
func (utsc *UserTopicSubscriptionCreate) SetUser(u *User) *UserTopicSubscriptionCreate {
	return utsc.SetUserID(u.ID)
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (utsc *UserTopicSubscriptionCreate) SetTopicID(id int) *UserTopicSubscriptionCreate {
	utsc.mutation.SetTopicID(id)
	return utsc
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utsc *UserTopicSubscriptionCreate) SetTopic(t *Topic) *UserTopicSubscriptionCreate {
	return utsc.SetTopicID(t.ID)
}

// Mutation returns the UserTopicSubscriptionMutation object of the builder.
func (utsc *UserTopicSubscriptionCreate) Mutation() *UserTopicSubscriptionMutation {
	return utsc.mutation
}

// Save creates the UserTopicSubscription in the database.
func (utsc *UserTopicSubscriptionCreate) Save(ctx context.Context) (*UserTopicSubscription, error) {
	utsc.defaults()
	return withHooks(ctx, utsc.sqlSave, utsc.mutation, utsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utsc *UserTopicSubscriptionCreate) SaveX(ctx context.Context) *UserTopicSubscription {
	v, err := utsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utsc *UserTopicSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := utsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsc *UserTopicSubscriptionCreate) ExecX(ctx context.Context) {
	if err := utsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utsc *UserTopicSubscriptionCreate) defaults() {
	if _, ok := utsc.mutation.IsNotified(); !ok {
		v := usertopicsubscription.DefaultIsNotified
		utsc.mutation.SetIsNotified(v)
	}
	if _, ok := utsc.mutation.SubscribedAt(); !ok {
		v := usertopicsubscription.DefaultSubscribedAt()
		utsc.mutation.SetSubscribedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsc *UserTopicSubscriptionCreate) check() error {
	if _, ok := utsc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserTopicSubscription.userId"`)}
	}
	if _, ok := utsc.mutation.TopicId(); !ok {
		return &ValidationError{Name: "topicId", err: errors.New(`ent: missing required field "UserTopicSubscription.topicId"`)}
	}
	if _, ok := utsc.mutation.IsNotified(); !ok {
		return &ValidationError{Name: "isNotified", err: errors.New(`ent: missing required field "UserTopicSubscription.isNotified"`)}
	}
	if _, ok := utsc.mutation.SubscribedAt(); !ok {
		return &ValidationError{Name: "subscribedAt", err: errors.New(`ent: missing required field "UserTopicSubscription.subscribedAt"`)}
	}
	if _, ok := utsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserTopicSubscription.user"`)}
	}
	if _, ok := utsc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "UserTopicSubscription.topic"`)}
	}
	return nil
}

func (utsc *UserTopicSubscriptionCreate) sqlSave(ctx context.Context) (*UserTopicSubscription, error) {
	if err := utsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (utsc *UserTopicSubscriptionCreate) createSpec() (*UserTopicSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTopicSubscription{config: utsc.config}
		_spec = sqlgraph.NewCreateSpec(usertopicsubscription.Table, nil)
	)
	if value, ok := utsc.mutation.IsNotified(); ok {
		_spec.SetField(usertopicsubscription.FieldIsNotified, field.TypeBool, value)
		_node.IsNotified = value
	}
	if value, ok := utsc.mutation.SubscribedAt(); ok {
		_spec.SetField(usertopicsubscription.FieldSubscribedAt, field.TypeTime, value)
		_node.SubscribedAt = value
	}
	if nodes := utsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.UserTable,
			Columns: []string{usertopicsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utsc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.TopicTable,
			Columns: []string{usertopicsubscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserTopicSubscriptionCreateBulk is the builder for creating many UserTopicSubscription entities in bulk.
type UserTopicSubscriptionCreateBulk struct {
	config
	err      error
	builders []*UserTopicSubscriptionCreate
}

// Save creates the UserTopicSubscription entities in the database.
func (utscb *UserTopicSubscriptionCreateBulk) Save(ctx context.Context) ([]*UserTopicSubscription, error) {
	if utscb.err != nil {
		return nil, utscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utscb.builders))
	nodes := make([]*UserTopicSubscription, len(utscb.builders))
	mutators := make([]Mutator, len(utscb.builders))
	for i := range utscb.builders {
		func(i int, root context.Context) {
			builder := utscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTopicSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utscb *UserTopicSubscriptionCreateBulk) SaveX(ctx context.Context) []*UserTopicSubscription {
	v, err := utscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utscb *UserTopicSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := utscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utscb *UserTopicSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := utscb.Exec(ctx); err != nil {
		panic(err)
	}
}
