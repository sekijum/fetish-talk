// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/userboardsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserBoardSubscriptionDelete is the builder for deleting a UserBoardSubscription entity.
type UserBoardSubscriptionDelete struct {
	config
	hooks    []Hook
	mutation *UserBoardSubscriptionMutation
}

// Where appends a list predicates to the UserBoardSubscriptionDelete builder.
func (ubsd *UserBoardSubscriptionDelete) Where(ps ...predicate.UserBoardSubscription) *UserBoardSubscriptionDelete {
	ubsd.mutation.Where(ps...)
	return ubsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ubsd *UserBoardSubscriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ubsd.sqlExec, ubsd.mutation, ubsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ubsd *UserBoardSubscriptionDelete) ExecX(ctx context.Context) int {
	n, err := ubsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ubsd *UserBoardSubscriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userboardsubscription.Table, nil)
	if ps := ubsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ubsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ubsd.mutation.done = true
	return affected, err
}

// UserBoardSubscriptionDeleteOne is the builder for deleting a single UserBoardSubscription entity.
type UserBoardSubscriptionDeleteOne struct {
	ubsd *UserBoardSubscriptionDelete
}

// Where appends a list predicates to the UserBoardSubscriptionDelete builder.
func (ubsdo *UserBoardSubscriptionDeleteOne) Where(ps ...predicate.UserBoardSubscription) *UserBoardSubscriptionDeleteOne {
	ubsdo.ubsd.mutation.Where(ps...)
	return ubsdo
}

// Exec executes the deletion query.
func (ubsdo *UserBoardSubscriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := ubsdo.ubsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userboardsubscription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ubsdo *UserBoardSubscriptionDeleteOne) ExecX(ctx context.Context) {
	if err := ubsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
