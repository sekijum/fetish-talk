// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/forumlike"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ForumLikeUpdate is the builder for updating ForumLike entities.
type ForumLikeUpdate struct {
	config
	hooks    []Hook
	mutation *ForumLikeMutation
}

// Where appends a list predicates to the ForumLikeUpdate builder.
func (flu *ForumLikeUpdate) Where(ps ...predicate.ForumLike) *ForumLikeUpdate {
	flu.mutation.Where(ps...)
	return flu
}

// SetForumID sets the "forum_id" field.
func (flu *ForumLikeUpdate) SetForumID(i int) *ForumLikeUpdate {
	flu.mutation.SetForumID(i)
	return flu
}

// SetNillableForumID sets the "forum_id" field if the given value is not nil.
func (flu *ForumLikeUpdate) SetNillableForumID(i *int) *ForumLikeUpdate {
	if i != nil {
		flu.SetForumID(*i)
	}
	return flu
}

// SetUserID sets the "user_id" field.
func (flu *ForumLikeUpdate) SetUserID(i int) *ForumLikeUpdate {
	flu.mutation.SetUserID(i)
	return flu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (flu *ForumLikeUpdate) SetNillableUserID(i *int) *ForumLikeUpdate {
	if i != nil {
		flu.SetUserID(*i)
	}
	return flu
}

// SetCreatedAt sets the "created_at" field.
func (flu *ForumLikeUpdate) SetCreatedAt(t time.Time) *ForumLikeUpdate {
	flu.mutation.SetCreatedAt(t)
	return flu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (flu *ForumLikeUpdate) SetNillableCreatedAt(t *time.Time) *ForumLikeUpdate {
	if t != nil {
		flu.SetCreatedAt(*t)
	}
	return flu
}

// SetForum sets the "forum" edge to the Forum entity.
func (flu *ForumLikeUpdate) SetForum(f *Forum) *ForumLikeUpdate {
	return flu.SetForumID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (flu *ForumLikeUpdate) SetUser(u *User) *ForumLikeUpdate {
	return flu.SetUserID(u.ID)
}

// Mutation returns the ForumLikeMutation object of the builder.
func (flu *ForumLikeUpdate) Mutation() *ForumLikeMutation {
	return flu.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (flu *ForumLikeUpdate) ClearForum() *ForumLikeUpdate {
	flu.mutation.ClearForum()
	return flu
}

// ClearUser clears the "user" edge to the User entity.
func (flu *ForumLikeUpdate) ClearUser() *ForumLikeUpdate {
	flu.mutation.ClearUser()
	return flu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (flu *ForumLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, flu.sqlSave, flu.mutation, flu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (flu *ForumLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := flu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (flu *ForumLikeUpdate) Exec(ctx context.Context) error {
	_, err := flu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flu *ForumLikeUpdate) ExecX(ctx context.Context) {
	if err := flu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (flu *ForumLikeUpdate) check() error {
	if _, ok := flu.mutation.ForumID(); flu.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ForumLike.forum"`)
	}
	if _, ok := flu.mutation.UserID(); flu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ForumLike.user"`)
	}
	return nil
}

func (flu *ForumLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := flu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(forumlike.Table, forumlike.Columns, sqlgraph.NewFieldSpec(forumlike.FieldID, field.TypeInt))
	if ps := flu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := flu.mutation.CreatedAt(); ok {
		_spec.SetField(forumlike.FieldCreatedAt, field.TypeTime, value)
	}
	if flu.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.ForumTable,
			Columns: []string{forumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.ForumTable,
			Columns: []string{forumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if flu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.UserTable,
			Columns: []string{forumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.UserTable,
			Columns: []string{forumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, flu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forumlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	flu.mutation.done = true
	return n, nil
}

// ForumLikeUpdateOne is the builder for updating a single ForumLike entity.
type ForumLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ForumLikeMutation
}

// SetForumID sets the "forum_id" field.
func (fluo *ForumLikeUpdateOne) SetForumID(i int) *ForumLikeUpdateOne {
	fluo.mutation.SetForumID(i)
	return fluo
}

// SetNillableForumID sets the "forum_id" field if the given value is not nil.
func (fluo *ForumLikeUpdateOne) SetNillableForumID(i *int) *ForumLikeUpdateOne {
	if i != nil {
		fluo.SetForumID(*i)
	}
	return fluo
}

// SetUserID sets the "user_id" field.
func (fluo *ForumLikeUpdateOne) SetUserID(i int) *ForumLikeUpdateOne {
	fluo.mutation.SetUserID(i)
	return fluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fluo *ForumLikeUpdateOne) SetNillableUserID(i *int) *ForumLikeUpdateOne {
	if i != nil {
		fluo.SetUserID(*i)
	}
	return fluo
}

// SetCreatedAt sets the "created_at" field.
func (fluo *ForumLikeUpdateOne) SetCreatedAt(t time.Time) *ForumLikeUpdateOne {
	fluo.mutation.SetCreatedAt(t)
	return fluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fluo *ForumLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *ForumLikeUpdateOne {
	if t != nil {
		fluo.SetCreatedAt(*t)
	}
	return fluo
}

// SetForum sets the "forum" edge to the Forum entity.
func (fluo *ForumLikeUpdateOne) SetForum(f *Forum) *ForumLikeUpdateOne {
	return fluo.SetForumID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (fluo *ForumLikeUpdateOne) SetUser(u *User) *ForumLikeUpdateOne {
	return fluo.SetUserID(u.ID)
}

// Mutation returns the ForumLikeMutation object of the builder.
func (fluo *ForumLikeUpdateOne) Mutation() *ForumLikeMutation {
	return fluo.mutation
}

// ClearForum clears the "forum" edge to the Forum entity.
func (fluo *ForumLikeUpdateOne) ClearForum() *ForumLikeUpdateOne {
	fluo.mutation.ClearForum()
	return fluo
}

// ClearUser clears the "user" edge to the User entity.
func (fluo *ForumLikeUpdateOne) ClearUser() *ForumLikeUpdateOne {
	fluo.mutation.ClearUser()
	return fluo
}

// Where appends a list predicates to the ForumLikeUpdate builder.
func (fluo *ForumLikeUpdateOne) Where(ps ...predicate.ForumLike) *ForumLikeUpdateOne {
	fluo.mutation.Where(ps...)
	return fluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fluo *ForumLikeUpdateOne) Select(field string, fields ...string) *ForumLikeUpdateOne {
	fluo.fields = append([]string{field}, fields...)
	return fluo
}

// Save executes the query and returns the updated ForumLike entity.
func (fluo *ForumLikeUpdateOne) Save(ctx context.Context) (*ForumLike, error) {
	return withHooks(ctx, fluo.sqlSave, fluo.mutation, fluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fluo *ForumLikeUpdateOne) SaveX(ctx context.Context) *ForumLike {
	node, err := fluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fluo *ForumLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := fluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fluo *ForumLikeUpdateOne) ExecX(ctx context.Context) {
	if err := fluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fluo *ForumLikeUpdateOne) check() error {
	if _, ok := fluo.mutation.ForumID(); fluo.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ForumLike.forum"`)
	}
	if _, ok := fluo.mutation.UserID(); fluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ForumLike.user"`)
	}
	return nil
}

func (fluo *ForumLikeUpdateOne) sqlSave(ctx context.Context) (_node *ForumLike, err error) {
	if err := fluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(forumlike.Table, forumlike.Columns, sqlgraph.NewFieldSpec(forumlike.FieldID, field.TypeInt))
	id, ok := fluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ForumLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forumlike.FieldID)
		for _, f := range fields {
			if !forumlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forumlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fluo.mutation.CreatedAt(); ok {
		_spec.SetField(forumlike.FieldCreatedAt, field.TypeTime, value)
	}
	if fluo.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.ForumTable,
			Columns: []string{forumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.ForumTable,
			Columns: []string{forumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.UserTable,
			Columns: []string{forumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumlike.UserTable,
			Columns: []string{forumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ForumLike{config: fluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forumlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fluo.mutation.done = true
	return _node, nil
}
