// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/forumlike"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ForumLike is the model entity for the ForumLike schema.
type ForumLike struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ForumID holds the value of the "forum_id" field.
	ForumID int `json:"forum_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ForumLikeQuery when eager-loading is set.
	Edges        ForumLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ForumLikeEdges holds the relations/edges for other nodes in the graph.
type ForumLikeEdges struct {
	// Forum holds the value of the forum edge.
	Forum *Forum `json:"forum,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ForumOrErr returns the Forum value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ForumLikeEdges) ForumOrErr() (*Forum, error) {
	if e.Forum != nil {
		return e.Forum, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: forum.Label}
	}
	return nil, &NotLoadedError{edge: "forum"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ForumLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ForumLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case forumlike.FieldID, forumlike.FieldForumID, forumlike.FieldUserID:
			values[i] = new(sql.NullInt64)
		case forumlike.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ForumLike fields.
func (fl *ForumLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case forumlike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fl.ID = int(value.Int64)
		case forumlike.FieldForumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forum_id", values[i])
			} else if value.Valid {
				fl.ForumID = int(value.Int64)
			}
		case forumlike.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fl.UserID = int(value.Int64)
			}
		case forumlike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fl.CreatedAt = value.Time
			}
		default:
			fl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ForumLike.
// This includes values selected through modifiers, order, etc.
func (fl *ForumLike) Value(name string) (ent.Value, error) {
	return fl.selectValues.Get(name)
}

// QueryForum queries the "forum" edge of the ForumLike entity.
func (fl *ForumLike) QueryForum() *ForumQuery {
	return NewForumLikeClient(fl.config).QueryForum(fl)
}

// QueryUser queries the "user" edge of the ForumLike entity.
func (fl *ForumLike) QueryUser() *UserQuery {
	return NewForumLikeClient(fl.config).QueryUser(fl)
}

// Update returns a builder for updating this ForumLike.
// Note that you need to call ForumLike.Unwrap() before calling this method if this ForumLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (fl *ForumLike) Update() *ForumLikeUpdateOne {
	return NewForumLikeClient(fl.config).UpdateOne(fl)
}

// Unwrap unwraps the ForumLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fl *ForumLike) Unwrap() *ForumLike {
	_tx, ok := fl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ForumLike is not a transactional entity")
	}
	fl.config.driver = _tx.drv
	return fl
}

// String implements the fmt.Stringer.
func (fl *ForumLike) String() string {
	var builder strings.Builder
	builder.WriteString("ForumLike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fl.ID))
	builder.WriteString("forum_id=")
	builder.WriteString(fmt.Sprintf("%v", fl.ForumID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fl.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ForumLikes is a parsable slice of ForumLike.
type ForumLikes []*ForumLike
