// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserTopicSubscriptionQuery is the builder for querying UserTopicSubscription entities.
type UserTopicSubscriptionQuery struct {
	config
	ctx        *QueryContext
	order      []usertopicsubscription.OrderOption
	inters     []Interceptor
	predicates []predicate.UserTopicSubscription
	withUser   *UserQuery
	withTopic  *TopicQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserTopicSubscriptionQuery builder.
func (utsq *UserTopicSubscriptionQuery) Where(ps ...predicate.UserTopicSubscription) *UserTopicSubscriptionQuery {
	utsq.predicates = append(utsq.predicates, ps...)
	return utsq
}

// Limit the number of records to be returned by this query.
func (utsq *UserTopicSubscriptionQuery) Limit(limit int) *UserTopicSubscriptionQuery {
	utsq.ctx.Limit = &limit
	return utsq
}

// Offset to start from.
func (utsq *UserTopicSubscriptionQuery) Offset(offset int) *UserTopicSubscriptionQuery {
	utsq.ctx.Offset = &offset
	return utsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (utsq *UserTopicSubscriptionQuery) Unique(unique bool) *UserTopicSubscriptionQuery {
	utsq.ctx.Unique = &unique
	return utsq
}

// Order specifies how the records should be ordered.
func (utsq *UserTopicSubscriptionQuery) Order(o ...usertopicsubscription.OrderOption) *UserTopicSubscriptionQuery {
	utsq.order = append(utsq.order, o...)
	return utsq
}

// QueryUser chains the current query on the "user" edge.
func (utsq *UserTopicSubscriptionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: utsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := utsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := utsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usertopicsubscription.Table, usertopicsubscription.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usertopicsubscription.UserTable, usertopicsubscription.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(utsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTopic chains the current query on the "topic" edge.
func (utsq *UserTopicSubscriptionQuery) QueryTopic() *TopicQuery {
	query := (&TopicClient{config: utsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := utsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := utsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usertopicsubscription.Table, usertopicsubscription.TopicColumn, selector),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usertopicsubscription.TopicTable, usertopicsubscription.TopicColumn),
		)
		fromU = sqlgraph.SetNeighbors(utsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserTopicSubscription entity from the query.
// Returns a *NotFoundError when no UserTopicSubscription was found.
func (utsq *UserTopicSubscriptionQuery) First(ctx context.Context) (*UserTopicSubscription, error) {
	nodes, err := utsq.Limit(1).All(setContextOp(ctx, utsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usertopicsubscription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (utsq *UserTopicSubscriptionQuery) FirstX(ctx context.Context) *UserTopicSubscription {
	node, err := utsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserTopicSubscription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserTopicSubscription entity is found.
// Returns a *NotFoundError when no UserTopicSubscription entities are found.
func (utsq *UserTopicSubscriptionQuery) Only(ctx context.Context) (*UserTopicSubscription, error) {
	nodes, err := utsq.Limit(2).All(setContextOp(ctx, utsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usertopicsubscription.Label}
	default:
		return nil, &NotSingularError{usertopicsubscription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (utsq *UserTopicSubscriptionQuery) OnlyX(ctx context.Context) *UserTopicSubscription {
	node, err := utsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserTopicSubscriptions.
func (utsq *UserTopicSubscriptionQuery) All(ctx context.Context) ([]*UserTopicSubscription, error) {
	ctx = setContextOp(ctx, utsq.ctx, "All")
	if err := utsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserTopicSubscription, *UserTopicSubscriptionQuery]()
	return withInterceptors[[]*UserTopicSubscription](ctx, utsq, qr, utsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (utsq *UserTopicSubscriptionQuery) AllX(ctx context.Context) []*UserTopicSubscription {
	nodes, err := utsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (utsq *UserTopicSubscriptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, utsq.ctx, "Count")
	if err := utsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, utsq, querierCount[*UserTopicSubscriptionQuery](), utsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (utsq *UserTopicSubscriptionQuery) CountX(ctx context.Context) int {
	count, err := utsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (utsq *UserTopicSubscriptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, utsq.ctx, "Exist")
	switch _, err := utsq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (utsq *UserTopicSubscriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := utsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserTopicSubscriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (utsq *UserTopicSubscriptionQuery) Clone() *UserTopicSubscriptionQuery {
	if utsq == nil {
		return nil
	}
	return &UserTopicSubscriptionQuery{
		config:     utsq.config,
		ctx:        utsq.ctx.Clone(),
		order:      append([]usertopicsubscription.OrderOption{}, utsq.order...),
		inters:     append([]Interceptor{}, utsq.inters...),
		predicates: append([]predicate.UserTopicSubscription{}, utsq.predicates...),
		withUser:   utsq.withUser.Clone(),
		withTopic:  utsq.withTopic.Clone(),
		// clone intermediate query.
		sql:  utsq.sql.Clone(),
		path: utsq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (utsq *UserTopicSubscriptionQuery) WithUser(opts ...func(*UserQuery)) *UserTopicSubscriptionQuery {
	query := (&UserClient{config: utsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	utsq.withUser = query
	return utsq
}

// WithTopic tells the query-builder to eager-load the nodes that are connected to
// the "topic" edge. The optional arguments are used to configure the query builder of the edge.
func (utsq *UserTopicSubscriptionQuery) WithTopic(opts ...func(*TopicQuery)) *UserTopicSubscriptionQuery {
	query := (&TopicClient{config: utsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	utsq.withTopic = query
	return utsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserId int `json:"userId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserTopicSubscription.Query().
//		GroupBy(usertopicsubscription.FieldUserId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (utsq *UserTopicSubscriptionQuery) GroupBy(field string, fields ...string) *UserTopicSubscriptionGroupBy {
	utsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserTopicSubscriptionGroupBy{build: utsq}
	grbuild.flds = &utsq.ctx.Fields
	grbuild.label = usertopicsubscription.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserId int `json:"userId,omitempty"`
//	}
//
//	client.UserTopicSubscription.Query().
//		Select(usertopicsubscription.FieldUserId).
//		Scan(ctx, &v)
func (utsq *UserTopicSubscriptionQuery) Select(fields ...string) *UserTopicSubscriptionSelect {
	utsq.ctx.Fields = append(utsq.ctx.Fields, fields...)
	sbuild := &UserTopicSubscriptionSelect{UserTopicSubscriptionQuery: utsq}
	sbuild.label = usertopicsubscription.Label
	sbuild.flds, sbuild.scan = &utsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserTopicSubscriptionSelect configured with the given aggregations.
func (utsq *UserTopicSubscriptionQuery) Aggregate(fns ...AggregateFunc) *UserTopicSubscriptionSelect {
	return utsq.Select().Aggregate(fns...)
}

func (utsq *UserTopicSubscriptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range utsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, utsq); err != nil {
				return err
			}
		}
	}
	for _, f := range utsq.ctx.Fields {
		if !usertopicsubscription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if utsq.path != nil {
		prev, err := utsq.path(ctx)
		if err != nil {
			return err
		}
		utsq.sql = prev
	}
	return nil
}

func (utsq *UserTopicSubscriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserTopicSubscription, error) {
	var (
		nodes       = []*UserTopicSubscription{}
		_spec       = utsq.querySpec()
		loadedTypes = [2]bool{
			utsq.withUser != nil,
			utsq.withTopic != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserTopicSubscription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserTopicSubscription{config: utsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, utsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := utsq.withUser; query != nil {
		if err := utsq.loadUser(ctx, query, nodes, nil,
			func(n *UserTopicSubscription, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := utsq.withTopic; query != nil {
		if err := utsq.loadTopic(ctx, query, nodes, nil,
			func(n *UserTopicSubscription, e *Topic) { n.Edges.Topic = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (utsq *UserTopicSubscriptionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserTopicSubscription, init func(*UserTopicSubscription), assign func(*UserTopicSubscription, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserTopicSubscription)
	for i := range nodes {
		fk := nodes[i].UserId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "userId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (utsq *UserTopicSubscriptionQuery) loadTopic(ctx context.Context, query *TopicQuery, nodes []*UserTopicSubscription, init func(*UserTopicSubscription), assign func(*UserTopicSubscription, *Topic)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserTopicSubscription)
	for i := range nodes {
		fk := nodes[i].TopicId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(topic.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "topicId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (utsq *UserTopicSubscriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := utsq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, utsq.driver, _spec)
}

func (utsq *UserTopicSubscriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usertopicsubscription.Table, usertopicsubscription.Columns, nil)
	_spec.From = utsq.sql
	if unique := utsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if utsq.path != nil {
		_spec.Unique = true
	}
	if fields := utsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if utsq.withUser != nil {
			_spec.Node.AddColumnOnce(usertopicsubscription.FieldUserId)
		}
		if utsq.withTopic != nil {
			_spec.Node.AddColumnOnce(usertopicsubscription.FieldTopicId)
		}
	}
	if ps := utsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := utsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := utsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := utsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (utsq *UserTopicSubscriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(utsq.driver.Dialect())
	t1 := builder.Table(usertopicsubscription.Table)
	columns := utsq.ctx.Fields
	if len(columns) == 0 {
		columns = usertopicsubscription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if utsq.sql != nil {
		selector = utsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if utsq.ctx.Unique != nil && *utsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range utsq.predicates {
		p(selector)
	}
	for _, p := range utsq.order {
		p(selector)
	}
	if offset := utsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := utsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserTopicSubscriptionGroupBy is the group-by builder for UserTopicSubscription entities.
type UserTopicSubscriptionGroupBy struct {
	selector
	build *UserTopicSubscriptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (utsgb *UserTopicSubscriptionGroupBy) Aggregate(fns ...AggregateFunc) *UserTopicSubscriptionGroupBy {
	utsgb.fns = append(utsgb.fns, fns...)
	return utsgb
}

// Scan applies the selector query and scans the result into the given value.
func (utsgb *UserTopicSubscriptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, utsgb.build.ctx, "GroupBy")
	if err := utsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserTopicSubscriptionQuery, *UserTopicSubscriptionGroupBy](ctx, utsgb.build, utsgb, utsgb.build.inters, v)
}

func (utsgb *UserTopicSubscriptionGroupBy) sqlScan(ctx context.Context, root *UserTopicSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(utsgb.fns))
	for _, fn := range utsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*utsgb.flds)+len(utsgb.fns))
		for _, f := range *utsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*utsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := utsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserTopicSubscriptionSelect is the builder for selecting fields of UserTopicSubscription entities.
type UserTopicSubscriptionSelect struct {
	*UserTopicSubscriptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (utss *UserTopicSubscriptionSelect) Aggregate(fns ...AggregateFunc) *UserTopicSubscriptionSelect {
	utss.fns = append(utss.fns, fns...)
	return utss
}

// Scan applies the selector query and scans the result into the given value.
func (utss *UserTopicSubscriptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, utss.ctx, "Select")
	if err := utss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserTopicSubscriptionQuery, *UserTopicSubscriptionSelect](ctx, utss.UserTopicSubscriptionQuery, utss, utss.inters, v)
}

func (utss *UserTopicSubscriptionSelect) sqlScan(ctx context.Context, root *UserTopicSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(utss.fns))
	for _, fn := range utss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*utss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := utss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
