// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/userthreadsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserThreadSubscriptionDelete is the builder for deleting a UserThreadSubscription entity.
type UserThreadSubscriptionDelete struct {
	config
	hooks    []Hook
	mutation *UserThreadSubscriptionMutation
}

// Where appends a list predicates to the UserThreadSubscriptionDelete builder.
func (utsd *UserThreadSubscriptionDelete) Where(ps ...predicate.UserThreadSubscription) *UserThreadSubscriptionDelete {
	utsd.mutation.Where(ps...)
	return utsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utsd *UserThreadSubscriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utsd.sqlExec, utsd.mutation, utsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utsd *UserThreadSubscriptionDelete) ExecX(ctx context.Context) int {
	n, err := utsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utsd *UserThreadSubscriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userthreadsubscription.Table, nil)
	if ps := utsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utsd.mutation.done = true
	return affected, err
}

// UserThreadSubscriptionDeleteOne is the builder for deleting a single UserThreadSubscription entity.
type UserThreadSubscriptionDeleteOne struct {
	utsd *UserThreadSubscriptionDelete
}

// Where appends a list predicates to the UserThreadSubscriptionDelete builder.
func (utsdo *UserThreadSubscriptionDeleteOne) Where(ps ...predicate.UserThreadSubscription) *UserThreadSubscriptionDeleteOne {
	utsdo.utsd.mutation.Where(ps...)
	return utsdo
}

// Exec executes the deletion query.
func (utsdo *UserThreadSubscriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := utsdo.utsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userthreadsubscription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utsdo *UserThreadSubscriptionDeleteOne) ExecX(ctx context.Context) {
	if err := utsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
