// Code generated by ent, DO NOT EDIT.

package commentattachment

import (
	"server/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLTE(FieldID, id))
}

// CommentId applies equality check predicate on the "commentId" field. It's identical to CommentIdEQ.
func CommentId(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldCommentId, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldURL, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldOrder, v))
}

// CommentIdEQ applies the EQ predicate on the "commentId" field.
func CommentIdEQ(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldCommentId, v))
}

// CommentIdNEQ applies the NEQ predicate on the "commentId" field.
func CommentIdNEQ(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNEQ(FieldCommentId, v))
}

// CommentIdIn applies the In predicate on the "commentId" field.
func CommentIdIn(vs ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldIn(FieldCommentId, vs...))
}

// CommentIdNotIn applies the NotIn predicate on the "commentId" field.
func CommentIdNotIn(vs ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNotIn(FieldCommentId, vs...))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldContainsFold(FieldURL, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldLTE(FieldOrder, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.FieldNotIn(FieldType, vs...))
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.CommentAttachment {
	return predicate.CommentAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.CommentAttachment {
	return predicate.CommentAttachment(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommentAttachment) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommentAttachment) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommentAttachment) predicate.CommentAttachment {
	return predicate.CommentAttachment(sql.NotPredicates(p))
}
