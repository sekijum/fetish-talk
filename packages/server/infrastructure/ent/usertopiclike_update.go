// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopiclike"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicLikeUpdate is the builder for updating UserTopicLike entities.
type UserTopicLikeUpdate struct {
	config
	hooks    []Hook
	mutation *UserTopicLikeMutation
}

// Where appends a list predicates to the UserTopicLikeUpdate builder.
func (utlu *UserTopicLikeUpdate) Where(ps ...predicate.UserTopicLike) *UserTopicLikeUpdate {
	utlu.mutation.Where(ps...)
	return utlu
}

// SetUserId sets the "userId" field.
func (utlu *UserTopicLikeUpdate) SetUserId(i int) *UserTopicLikeUpdate {
	utlu.mutation.SetUserId(i)
	return utlu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (utlu *UserTopicLikeUpdate) SetNillableUserId(i *int) *UserTopicLikeUpdate {
	if i != nil {
		utlu.SetUserId(*i)
	}
	return utlu
}

// SetTopicId sets the "topicId" field.
func (utlu *UserTopicLikeUpdate) SetTopicId(i int) *UserTopicLikeUpdate {
	utlu.mutation.SetTopicId(i)
	return utlu
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (utlu *UserTopicLikeUpdate) SetNillableTopicId(i *int) *UserTopicLikeUpdate {
	if i != nil {
		utlu.SetTopicId(*i)
	}
	return utlu
}

// SetType sets the "type" field.
func (utlu *UserTopicLikeUpdate) SetType(u usertopiclike.Type) *UserTopicLikeUpdate {
	utlu.mutation.SetType(u)
	return utlu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (utlu *UserTopicLikeUpdate) SetNillableType(u *usertopiclike.Type) *UserTopicLikeUpdate {
	if u != nil {
		utlu.SetType(*u)
	}
	return utlu
}

// SetLikedAt sets the "likedAt" field.
func (utlu *UserTopicLikeUpdate) SetLikedAt(t time.Time) *UserTopicLikeUpdate {
	utlu.mutation.SetLikedAt(t)
	return utlu
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (utlu *UserTopicLikeUpdate) SetNillableLikedAt(t *time.Time) *UserTopicLikeUpdate {
	if t != nil {
		utlu.SetLikedAt(*t)
	}
	return utlu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utlu *UserTopicLikeUpdate) SetUserID(id int) *UserTopicLikeUpdate {
	utlu.mutation.SetUserID(id)
	return utlu
}

// SetUser sets the "user" edge to the User entity.
func (utlu *UserTopicLikeUpdate) SetUser(u *User) *UserTopicLikeUpdate {
	return utlu.SetUserID(u.ID)
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (utlu *UserTopicLikeUpdate) SetTopicID(id int) *UserTopicLikeUpdate {
	utlu.mutation.SetTopicID(id)
	return utlu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utlu *UserTopicLikeUpdate) SetTopic(t *Topic) *UserTopicLikeUpdate {
	return utlu.SetTopicID(t.ID)
}

// Mutation returns the UserTopicLikeMutation object of the builder.
func (utlu *UserTopicLikeUpdate) Mutation() *UserTopicLikeMutation {
	return utlu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utlu *UserTopicLikeUpdate) ClearUser() *UserTopicLikeUpdate {
	utlu.mutation.ClearUser()
	return utlu
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utlu *UserTopicLikeUpdate) ClearTopic() *UserTopicLikeUpdate {
	utlu.mutation.ClearTopic()
	return utlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utlu *UserTopicLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utlu.sqlSave, utlu.mutation, utlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utlu *UserTopicLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := utlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utlu *UserTopicLikeUpdate) Exec(ctx context.Context) error {
	_, err := utlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utlu *UserTopicLikeUpdate) ExecX(ctx context.Context) {
	if err := utlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utlu *UserTopicLikeUpdate) check() error {
	if v, ok := utlu.mutation.GetType(); ok {
		if err := usertopiclike.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserTopicLike.type": %w`, err)}
		}
	}
	if _, ok := utlu.mutation.UserID(); utlu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicLike.user"`)
	}
	if _, ok := utlu.mutation.TopicID(); utlu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicLike.topic"`)
	}
	return nil
}

func (utlu *UserTopicLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopiclike.Table, usertopiclike.Columns, sqlgraph.NewFieldSpec(usertopiclike.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(usertopiclike.FieldTopicId, field.TypeInt))
	if ps := utlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utlu.mutation.GetType(); ok {
		_spec.SetField(usertopiclike.FieldType, field.TypeEnum, value)
	}
	if value, ok := utlu.mutation.LikedAt(); ok {
		_spec.SetField(usertopiclike.FieldLikedAt, field.TypeTime, value)
	}
	if utlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.UserTable,
			Columns: []string{usertopiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.UserTable,
			Columns: []string{usertopiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utlu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.TopicTable,
			Columns: []string{usertopiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utlu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.TopicTable,
			Columns: []string{usertopiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopiclike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utlu.mutation.done = true
	return n, nil
}

// UserTopicLikeUpdateOne is the builder for updating a single UserTopicLike entity.
type UserTopicLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTopicLikeMutation
}

// SetUserId sets the "userId" field.
func (utluo *UserTopicLikeUpdateOne) SetUserId(i int) *UserTopicLikeUpdateOne {
	utluo.mutation.SetUserId(i)
	return utluo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (utluo *UserTopicLikeUpdateOne) SetNillableUserId(i *int) *UserTopicLikeUpdateOne {
	if i != nil {
		utluo.SetUserId(*i)
	}
	return utluo
}

// SetTopicId sets the "topicId" field.
func (utluo *UserTopicLikeUpdateOne) SetTopicId(i int) *UserTopicLikeUpdateOne {
	utluo.mutation.SetTopicId(i)
	return utluo
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (utluo *UserTopicLikeUpdateOne) SetNillableTopicId(i *int) *UserTopicLikeUpdateOne {
	if i != nil {
		utluo.SetTopicId(*i)
	}
	return utluo
}

// SetType sets the "type" field.
func (utluo *UserTopicLikeUpdateOne) SetType(u usertopiclike.Type) *UserTopicLikeUpdateOne {
	utluo.mutation.SetType(u)
	return utluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (utluo *UserTopicLikeUpdateOne) SetNillableType(u *usertopiclike.Type) *UserTopicLikeUpdateOne {
	if u != nil {
		utluo.SetType(*u)
	}
	return utluo
}

// SetLikedAt sets the "likedAt" field.
func (utluo *UserTopicLikeUpdateOne) SetLikedAt(t time.Time) *UserTopicLikeUpdateOne {
	utluo.mutation.SetLikedAt(t)
	return utluo
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (utluo *UserTopicLikeUpdateOne) SetNillableLikedAt(t *time.Time) *UserTopicLikeUpdateOne {
	if t != nil {
		utluo.SetLikedAt(*t)
	}
	return utluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utluo *UserTopicLikeUpdateOne) SetUserID(id int) *UserTopicLikeUpdateOne {
	utluo.mutation.SetUserID(id)
	return utluo
}

// SetUser sets the "user" edge to the User entity.
func (utluo *UserTopicLikeUpdateOne) SetUser(u *User) *UserTopicLikeUpdateOne {
	return utluo.SetUserID(u.ID)
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (utluo *UserTopicLikeUpdateOne) SetTopicID(id int) *UserTopicLikeUpdateOne {
	utluo.mutation.SetTopicID(id)
	return utluo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utluo *UserTopicLikeUpdateOne) SetTopic(t *Topic) *UserTopicLikeUpdateOne {
	return utluo.SetTopicID(t.ID)
}

// Mutation returns the UserTopicLikeMutation object of the builder.
func (utluo *UserTopicLikeUpdateOne) Mutation() *UserTopicLikeMutation {
	return utluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utluo *UserTopicLikeUpdateOne) ClearUser() *UserTopicLikeUpdateOne {
	utluo.mutation.ClearUser()
	return utluo
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utluo *UserTopicLikeUpdateOne) ClearTopic() *UserTopicLikeUpdateOne {
	utluo.mutation.ClearTopic()
	return utluo
}

// Where appends a list predicates to the UserTopicLikeUpdate builder.
func (utluo *UserTopicLikeUpdateOne) Where(ps ...predicate.UserTopicLike) *UserTopicLikeUpdateOne {
	utluo.mutation.Where(ps...)
	return utluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utluo *UserTopicLikeUpdateOne) Select(field string, fields ...string) *UserTopicLikeUpdateOne {
	utluo.fields = append([]string{field}, fields...)
	return utluo
}

// Save executes the query and returns the updated UserTopicLike entity.
func (utluo *UserTopicLikeUpdateOne) Save(ctx context.Context) (*UserTopicLike, error) {
	return withHooks(ctx, utluo.sqlSave, utluo.mutation, utluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utluo *UserTopicLikeUpdateOne) SaveX(ctx context.Context) *UserTopicLike {
	node, err := utluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utluo *UserTopicLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := utluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utluo *UserTopicLikeUpdateOne) ExecX(ctx context.Context) {
	if err := utluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utluo *UserTopicLikeUpdateOne) check() error {
	if v, ok := utluo.mutation.GetType(); ok {
		if err := usertopiclike.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserTopicLike.type": %w`, err)}
		}
	}
	if _, ok := utluo.mutation.UserID(); utluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicLike.user"`)
	}
	if _, ok := utluo.mutation.TopicID(); utluo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicLike.topic"`)
	}
	return nil
}

func (utluo *UserTopicLikeUpdateOne) sqlSave(ctx context.Context) (_node *UserTopicLike, err error) {
	if err := utluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopiclike.Table, usertopiclike.Columns, sqlgraph.NewFieldSpec(usertopiclike.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(usertopiclike.FieldTopicId, field.TypeInt))
	if id, ok := utluo.mutation.UserId(); !ok {
		return nil, &ValidationError{Name: "userId", err: errors.New(`ent: missing "UserTopicLike.userId" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utluo.mutation.TopicId(); !ok {
		return nil, &ValidationError{Name: "topicId", err: errors.New(`ent: missing "UserTopicLike.topicId" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !usertopiclike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utluo.mutation.GetType(); ok {
		_spec.SetField(usertopiclike.FieldType, field.TypeEnum, value)
	}
	if value, ok := utluo.mutation.LikedAt(); ok {
		_spec.SetField(usertopiclike.FieldLikedAt, field.TypeTime, value)
	}
	if utluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.UserTable,
			Columns: []string{usertopiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.UserTable,
			Columns: []string{usertopiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utluo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.TopicTable,
			Columns: []string{usertopiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utluo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopiclike.TopicTable,
			Columns: []string{usertopiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserTopicLike{config: utluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopiclike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utluo.mutation.done = true
	return _node, nil
}
