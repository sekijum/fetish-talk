// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
}

// SetForumId sets the "forumId" field.
func (tc *TopicCreate) SetForumId(i int) *TopicCreate {
	tc.mutation.SetForumId(i)
	return tc
}

// SetUserId sets the "userId" field.
func (tc *TopicCreate) SetUserId(i int) *TopicCreate {
	tc.mutation.SetUserId(i)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TopicCreate) SetTitle(s string) *TopicCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tc *TopicCreate) SetNillableTitle(s *string) *TopicCreate {
	if s != nil {
		tc.SetTitle(*s)
	}
	return tc
}

// SetDescription sets the "description" field.
func (tc *TopicCreate) SetDescription(s string) *TopicCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TopicCreate) SetNillableDescription(s *string) *TopicCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetThumbnailUrl sets the "thumbnailUrl" field.
func (tc *TopicCreate) SetThumbnailUrl(s string) *TopicCreate {
	tc.mutation.SetThumbnailUrl(s)
	return tc
}

// SetNillableThumbnailUrl sets the "thumbnailUrl" field if the given value is not nil.
func (tc *TopicCreate) SetNillableThumbnailUrl(s *string) *TopicCreate {
	if s != nil {
		tc.SetThumbnailUrl(*s)
	}
	return tc
}

// SetIsAutoGenerated sets the "isAutoGenerated" field.
func (tc *TopicCreate) SetIsAutoGenerated(b bool) *TopicCreate {
	tc.mutation.SetIsAutoGenerated(b)
	return tc
}

// SetNillableIsAutoGenerated sets the "isAutoGenerated" field if the given value is not nil.
func (tc *TopicCreate) SetNillableIsAutoGenerated(b *bool) *TopicCreate {
	if b != nil {
		tc.SetIsAutoGenerated(*b)
	}
	return tc
}

// SetIsNotifyOnComment sets the "isNotifyOnComment" field.
func (tc *TopicCreate) SetIsNotifyOnComment(b bool) *TopicCreate {
	tc.mutation.SetIsNotifyOnComment(b)
	return tc
}

// SetNillableIsNotifyOnComment sets the "isNotifyOnComment" field if the given value is not nil.
func (tc *TopicCreate) SetNillableIsNotifyOnComment(b *bool) *TopicCreate {
	if b != nil {
		tc.SetIsNotifyOnComment(*b)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TopicCreate) SetStatus(t topic.Status) *TopicCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TopicCreate) SetNillableStatus(t *topic.Status) *TopicCreate {
	if t != nil {
		tc.SetStatus(*t)
	}
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TopicCreate) SetCreatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updatedAt" field.
func (tc *TopicCreate) SetUpdatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TopicCreate) SetID(i int) *TopicCreate {
	tc.mutation.SetID(i)
	return tc
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (tc *TopicCreate) SetForumID(id int) *TopicCreate {
	tc.mutation.SetForumID(id)
	return tc
}

// SetForum sets the "forum" edge to the Forum entity.
func (tc *TopicCreate) SetForum(f *Forum) *TopicCreate {
	return tc.SetForumID(f.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tc *TopicCreate) SetOwnerID(id int) *TopicCreate {
	tc.mutation.SetOwnerID(id)
	return tc
}

// SetOwner sets the "owner" edge to the User entity.
func (tc *TopicCreate) SetOwner(u *User) *TopicCreate {
	return tc.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tc *TopicCreate) AddCommentIDs(ids ...int) *TopicCreate {
	tc.mutation.AddCommentIDs(ids...)
	return tc
}

// AddComments adds the "comments" edges to the Comment entity.
func (tc *TopicCreate) AddComments(c ...*Comment) *TopicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the TopicTag entity by IDs.
func (tc *TopicCreate) AddTagIDs(ids ...int) *TopicCreate {
	tc.mutation.AddTagIDs(ids...)
	return tc
}

// AddTags adds the "tags" edges to the TopicTag entity.
func (tc *TopicCreate) AddTags(t ...*TopicTag) *TopicCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTagIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tc *TopicCreate) AddLikedUserIDs(ids ...int) *TopicCreate {
	tc.mutation.AddLikedUserIDs(ids...)
	return tc
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tc *TopicCreate) AddLikedUsers(u ...*User) *TopicCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (tc *TopicCreate) AddSubscribedUserIDs(ids ...int) *TopicCreate {
	tc.mutation.AddSubscribedUserIDs(ids...)
	return tc
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (tc *TopicCreate) AddSubscribedUsers(u ...*User) *TopicCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddSubscribedUserIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TopicCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TopicCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TopicCreate) defaults() {
	if _, ok := tc.mutation.IsAutoGenerated(); !ok {
		v := topic.DefaultIsAutoGenerated
		tc.mutation.SetIsAutoGenerated(v)
	}
	if _, ok := tc.mutation.IsNotifyOnComment(); !ok {
		v := topic.DefaultIsNotifyOnComment
		tc.mutation.SetIsNotifyOnComment(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := topic.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := topic.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := topic.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TopicCreate) check() error {
	if _, ok := tc.mutation.ForumId(); !ok {
		return &ValidationError{Name: "forumId", err: errors.New(`ent: missing required field "Topic.forumId"`)}
	}
	if _, ok := tc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "Topic.userId"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := topic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Topic.title": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := topic.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Topic.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsAutoGenerated(); !ok {
		return &ValidationError{Name: "isAutoGenerated", err: errors.New(`ent: missing required field "Topic.isAutoGenerated"`)}
	}
	if _, ok := tc.mutation.IsNotifyOnComment(); !ok {
		return &ValidationError{Name: "isNotifyOnComment", err: errors.New(`ent: missing required field "Topic.isNotifyOnComment"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Topic.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := topic.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Topic.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Topic.createdAt"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Topic.updatedAt"`)}
	}
	if _, ok := tc.mutation.ForumID(); !ok {
		return &ValidationError{Name: "forum", err: errors.New(`ent: missing required edge "Topic.forum"`)}
	}
	if _, ok := tc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Topic.owner"`)}
	}
	return nil
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		_node = &Topic{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(topic.Table, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(topic.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(topic.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.ThumbnailUrl(); ok {
		_spec.SetField(topic.FieldThumbnailUrl, field.TypeString, value)
		_node.ThumbnailUrl = value
	}
	if value, ok := tc.mutation.IsAutoGenerated(); ok {
		_spec.SetField(topic.FieldIsAutoGenerated, field.TypeBool, value)
		_node.IsAutoGenerated = value
	}
	if value, ok := tc.mutation.IsNotifyOnComment(); ok {
		_spec.SetField(topic.FieldIsNotifyOnComment, field.TypeBool, value)
		_node.IsNotifyOnComment = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(topic.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.ForumTable,
			Columns: []string{topic.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ForumId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic.OwnerTable,
			Columns: []string{topic.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   topic.CommentsTable,
			Columns: []string{topic.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.TagsTable,
			Columns: topic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.LikedUsersTable,
			Columns: topic.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicLikeCreate{config: tc.config, mutation: newUserTopicLikeMutation(tc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   topic.SubscribedUsersTable,
			Columns: topic.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTopicSubscriptionCreate{config: tc.config, mutation: newUserTopicSubscriptionMutation(tc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TopicCreateBulk is the builder for creating many Topic entities in bulk.
type TopicCreateBulk struct {
	config
	err      error
	builders []*TopicCreate
}

// Save creates the Topic entities in the database.
func (tcb *TopicCreateBulk) Save(ctx context.Context) ([]*Topic, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Topic, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TopicCreateBulk) SaveX(ctx context.Context) []*Topic {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TopicCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TopicCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
