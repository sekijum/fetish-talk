// Code generated by ent, DO NOT EDIT.

package topictag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the topictag type in the database.
	Label = "topic_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTopics holds the string denoting the topics edge name in mutations.
	EdgeTopics = "topics"
	// EdgeTopicTaggings holds the string denoting the topic_taggings edge name in mutations.
	EdgeTopicTaggings = "topic_taggings"
	// Table holds the table name of the topictag in the database.
	Table = "topic_tags"
	// TopicsTable is the table that holds the topics relation/edge. The primary key declared below.
	TopicsTable = "topic_taggings"
	// TopicsInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicsInverseTable = "topics"
	// TopicTaggingsTable is the table that holds the topic_taggings relation/edge.
	TopicTaggingsTable = "topic_taggings"
	// TopicTaggingsInverseTable is the table name for the TopicTagging entity.
	// It exists in this package in order to avoid circular dependency with the "topictagging" package.
	TopicTaggingsInverseTable = "topic_taggings"
	// TopicTaggingsColumn is the table column denoting the topic_taggings relation/edge.
	TopicTaggingsColumn = "tag_id"
)

// Columns holds all SQL columns for topictag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

var (
	// TopicsPrimaryKey and TopicsColumn2 are the table columns denoting the
	// primary key for the topics relation (M2M).
	TopicsPrimaryKey = []string{"topicId", "tagId"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the TopicTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTopicsCount orders the results by topics count.
func ByTopicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopicsStep(), opts...)
	}
}

// ByTopics orders the results by topics terms.
func ByTopics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTopicTaggingsCount orders the results by topic_taggings count.
func ByTopicTaggingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopicTaggingsStep(), opts...)
	}
}

// ByTopicTaggings orders the results by topic_taggings terms.
func ByTopicTaggings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicTaggingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTopicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TopicsTable, TopicsPrimaryKey...),
	)
}
func newTopicTaggingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicTaggingsInverseTable, TopicTaggingsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, TopicTaggingsTable, TopicTaggingsColumn),
	)
}
