// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/threadtag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ThreadTag is the model entity for the ThreadTag schema.
type ThreadTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadTagQuery when eager-loading is set.
	Edges        ThreadTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThreadTagEdges holds the relations/edges for other nodes in the graph.
type ThreadTagEdges struct {
	// Threads holds the value of the threads edge.
	Threads []*Thread `json:"threads,omitempty"`
	// ThreadTaggings holds the value of the thread_taggings edge.
	ThreadTaggings []*ThreadTagging `json:"thread_taggings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadTagEdges) ThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[0] {
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// ThreadTaggingsOrErr returns the ThreadTaggings value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadTagEdges) ThreadTaggingsOrErr() ([]*ThreadTagging, error) {
	if e.loadedTypes[1] {
		return e.ThreadTaggings, nil
	}
	return nil, &NotLoadedError{edge: "thread_taggings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThreadTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case threadtag.FieldID:
			values[i] = new(sql.NullInt64)
		case threadtag.FieldName:
			values[i] = new(sql.NullString)
		case threadtag.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThreadTag fields.
func (tt *ThreadTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case threadtag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case threadtag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case threadtag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ThreadTag.
// This includes values selected through modifiers, order, etc.
func (tt *ThreadTag) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryThreads queries the "threads" edge of the ThreadTag entity.
func (tt *ThreadTag) QueryThreads() *ThreadQuery {
	return NewThreadTagClient(tt.config).QueryThreads(tt)
}

// QueryThreadTaggings queries the "thread_taggings" edge of the ThreadTag entity.
func (tt *ThreadTag) QueryThreadTaggings() *ThreadTaggingQuery {
	return NewThreadTagClient(tt.config).QueryThreadTaggings(tt)
}

// Update returns a builder for updating this ThreadTag.
// Note that you need to call ThreadTag.Unwrap() before calling this method if this ThreadTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *ThreadTag) Update() *ThreadTagUpdateOne {
	return NewThreadTagClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the ThreadTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *ThreadTag) Unwrap() *ThreadTag {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThreadTag is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *ThreadTag) String() string {
	var builder strings.Builder
	builder.WriteString("ThreadTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ThreadTags is a parsable slice of ThreadTag.
type ThreadTags []*ThreadTag
