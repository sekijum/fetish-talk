// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicTaggingCreate is the builder for creating a TopicTagging entity.
type TopicTaggingCreate struct {
	config
	mutation *TopicTaggingMutation
	hooks    []Hook
}

// SetTopicId sets the "topicId" field.
func (ttc *TopicTaggingCreate) SetTopicId(i int) *TopicTaggingCreate {
	ttc.mutation.SetTopicId(i)
	return ttc
}

// SetTagId sets the "tagId" field.
func (ttc *TopicTaggingCreate) SetTagId(i int) *TopicTaggingCreate {
	ttc.mutation.SetTagId(i)
	return ttc
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (ttc *TopicTaggingCreate) SetTopicID(id int) *TopicTaggingCreate {
	ttc.mutation.SetTopicID(id)
	return ttc
}

// SetTopic sets the "topic" edge to the Topic entity.
func (ttc *TopicTaggingCreate) SetTopic(t *Topic) *TopicTaggingCreate {
	return ttc.SetTopicID(t.ID)
}

// SetTagID sets the "tag" edge to the TopicTag entity by ID.
func (ttc *TopicTaggingCreate) SetTagID(id int) *TopicTaggingCreate {
	ttc.mutation.SetTagID(id)
	return ttc
}

// SetTag sets the "tag" edge to the TopicTag entity.
func (ttc *TopicTaggingCreate) SetTag(t *TopicTag) *TopicTaggingCreate {
	return ttc.SetTagID(t.ID)
}

// Mutation returns the TopicTaggingMutation object of the builder.
func (ttc *TopicTaggingCreate) Mutation() *TopicTaggingMutation {
	return ttc.mutation
}

// Save creates the TopicTagging in the database.
func (ttc *TopicTaggingCreate) Save(ctx context.Context) (*TopicTagging, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TopicTaggingCreate) SaveX(ctx context.Context) *TopicTagging {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TopicTaggingCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TopicTaggingCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TopicTaggingCreate) check() error {
	if _, ok := ttc.mutation.TopicId(); !ok {
		return &ValidationError{Name: "topicId", err: errors.New(`ent: missing required field "TopicTagging.topicId"`)}
	}
	if _, ok := ttc.mutation.TagId(); !ok {
		return &ValidationError{Name: "tagId", err: errors.New(`ent: missing required field "TopicTagging.tagId"`)}
	}
	if _, ok := ttc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "TopicTagging.topic"`)}
	}
	if _, ok := ttc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "TopicTagging.tag"`)}
	}
	return nil
}

func (ttc *TopicTaggingCreate) sqlSave(ctx context.Context) (*TopicTagging, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ttc *TopicTaggingCreate) createSpec() (*TopicTagging, *sqlgraph.CreateSpec) {
	var (
		_node = &TopicTagging{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(topictagging.Table, nil)
	)
	if nodes := ttc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TopicTable,
			Columns: []string{topictagging.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TagTable,
			Columns: []string{topictagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TopicTaggingCreateBulk is the builder for creating many TopicTagging entities in bulk.
type TopicTaggingCreateBulk struct {
	config
	err      error
	builders []*TopicTaggingCreate
}

// Save creates the TopicTagging entities in the database.
func (ttcb *TopicTaggingCreateBulk) Save(ctx context.Context) ([]*TopicTagging, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TopicTagging, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicTaggingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TopicTaggingCreateBulk) SaveX(ctx context.Context) []*TopicTagging {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TopicTaggingCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TopicTaggingCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
