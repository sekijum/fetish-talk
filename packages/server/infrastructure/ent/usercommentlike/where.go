// Code generated by ent, DO NOT EDIT.

package usercommentlike

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldUserId, v))
}

// CommentId applies equality check predicate on the "commentId" field. It's identical to CommentIdEQ.
func CommentId(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldCommentId, v))
}

// LikedAt applies equality check predicate on the "likedAt" field. It's identical to LikedAtEQ.
func LikedAt(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldLikedAt, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNotIn(FieldUserId, vs...))
}

// CommentIdEQ applies the EQ predicate on the "commentId" field.
func CommentIdEQ(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldCommentId, v))
}

// CommentIdNEQ applies the NEQ predicate on the "commentId" field.
func CommentIdNEQ(v int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNEQ(FieldCommentId, v))
}

// CommentIdIn applies the In predicate on the "commentId" field.
func CommentIdIn(vs ...int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldIn(FieldCommentId, vs...))
}

// CommentIdNotIn applies the NotIn predicate on the "commentId" field.
func CommentIdNotIn(vs ...int) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNotIn(FieldCommentId, vs...))
}

// LikedAtEQ applies the EQ predicate on the "likedAt" field.
func LikedAtEQ(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldEQ(FieldLikedAt, v))
}

// LikedAtNEQ applies the NEQ predicate on the "likedAt" field.
func LikedAtNEQ(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNEQ(FieldLikedAt, v))
}

// LikedAtIn applies the In predicate on the "likedAt" field.
func LikedAtIn(vs ...time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldIn(FieldLikedAt, vs...))
}

// LikedAtNotIn applies the NotIn predicate on the "likedAt" field.
func LikedAtNotIn(vs ...time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldNotIn(FieldLikedAt, vs...))
}

// LikedAtGT applies the GT predicate on the "likedAt" field.
func LikedAtGT(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldGT(FieldLikedAt, v))
}

// LikedAtGTE applies the GTE predicate on the "likedAt" field.
func LikedAtGTE(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldGTE(FieldLikedAt, v))
}

// LikedAtLT applies the LT predicate on the "likedAt" field.
func LikedAtLT(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldLT(FieldLikedAt, v))
}

// LikedAtLTE applies the LTE predicate on the "likedAt" field.
func LikedAtLTE(v time.Time) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.FieldLTE(FieldLikedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserCommentLike {
	return predicate.UserCommentLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserCommentLike {
	return predicate.UserCommentLike(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.UserCommentLike {
	return predicate.UserCommentLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, CommentColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.UserCommentLike {
	return predicate.UserCommentLike(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserCommentLike) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserCommentLike) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserCommentLike) predicate.UserCommentLike {
	return predicate.UserCommentLike(sql.NotPredicates(p))
}
