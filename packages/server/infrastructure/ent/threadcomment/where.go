// Code generated by ent, DO NOT EDIT.

package threadcomment

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldID, id))
}

// ThreadId applies equality check predicate on the "threadId" field. It's identical to ThreadIdEQ.
func ThreadId(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldThreadId, v))
}

// ParentCommentId applies equality check predicate on the "parentCommentId" field. It's identical to ParentCommentIdEQ.
func ParentCommentId(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldParentCommentId, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldUserId, v))
}

// GuestName applies equality check predicate on the "guestName" field. It's identical to GuestNameEQ.
func GuestName(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldGuestName, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldContent, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldIPAddress, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldUpdatedAt, v))
}

// ThreadIdEQ applies the EQ predicate on the "threadId" field.
func ThreadIdEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldThreadId, v))
}

// ThreadIdNEQ applies the NEQ predicate on the "threadId" field.
func ThreadIdNEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldThreadId, v))
}

// ThreadIdIn applies the In predicate on the "threadId" field.
func ThreadIdIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldThreadId, vs...))
}

// ThreadIdNotIn applies the NotIn predicate on the "threadId" field.
func ThreadIdNotIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldThreadId, vs...))
}

// ParentCommentIdEQ applies the EQ predicate on the "parentCommentId" field.
func ParentCommentIdEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldParentCommentId, v))
}

// ParentCommentIdNEQ applies the NEQ predicate on the "parentCommentId" field.
func ParentCommentIdNEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldParentCommentId, v))
}

// ParentCommentIdIn applies the In predicate on the "parentCommentId" field.
func ParentCommentIdIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldParentCommentId, vs...))
}

// ParentCommentIdNotIn applies the NotIn predicate on the "parentCommentId" field.
func ParentCommentIdNotIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldParentCommentId, vs...))
}

// ParentCommentIdIsNil applies the IsNil predicate on the "parentCommentId" field.
func ParentCommentIdIsNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIsNull(FieldParentCommentId))
}

// ParentCommentIdNotNil applies the NotNil predicate on the "parentCommentId" field.
func ParentCommentIdNotNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotNull(FieldParentCommentId))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIsNull(FieldUserId))
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotNull(FieldUserId))
}

// GuestNameEQ applies the EQ predicate on the "guestName" field.
func GuestNameEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldGuestName, v))
}

// GuestNameNEQ applies the NEQ predicate on the "guestName" field.
func GuestNameNEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldGuestName, v))
}

// GuestNameIn applies the In predicate on the "guestName" field.
func GuestNameIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldGuestName, vs...))
}

// GuestNameNotIn applies the NotIn predicate on the "guestName" field.
func GuestNameNotIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldGuestName, vs...))
}

// GuestNameGT applies the GT predicate on the "guestName" field.
func GuestNameGT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldGuestName, v))
}

// GuestNameGTE applies the GTE predicate on the "guestName" field.
func GuestNameGTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldGuestName, v))
}

// GuestNameLT applies the LT predicate on the "guestName" field.
func GuestNameLT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldGuestName, v))
}

// GuestNameLTE applies the LTE predicate on the "guestName" field.
func GuestNameLTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldGuestName, v))
}

// GuestNameContains applies the Contains predicate on the "guestName" field.
func GuestNameContains(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContains(FieldGuestName, v))
}

// GuestNameHasPrefix applies the HasPrefix predicate on the "guestName" field.
func GuestNameHasPrefix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasPrefix(FieldGuestName, v))
}

// GuestNameHasSuffix applies the HasSuffix predicate on the "guestName" field.
func GuestNameHasSuffix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasSuffix(FieldGuestName, v))
}

// GuestNameIsNil applies the IsNil predicate on the "guestName" field.
func GuestNameIsNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIsNull(FieldGuestName))
}

// GuestNameNotNil applies the NotNil predicate on the "guestName" field.
func GuestNameNotNil() predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotNull(FieldGuestName))
}

// GuestNameEqualFold applies the EqualFold predicate on the "guestName" field.
func GuestNameEqualFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEqualFold(FieldGuestName, v))
}

// GuestNameContainsFold applies the ContainsFold predicate on the "guestName" field.
func GuestNameContainsFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContainsFold(FieldGuestName, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContainsFold(FieldContent, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldContainsFold(FieldIPAddress, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ThreadComment {
	return predicate.ThreadComment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasThread applies the HasEdge predicate on the "thread" edge.
func HasThread() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ThreadTable, ThreadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadWith applies the HasEdge predicate on the "thread" edge with a given conditions (other predicates).
func HasThreadWith(preds ...predicate.Thread) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newThreadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentComment applies the HasEdge predicate on the "parent_comment" edge.
func HasParentComment() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentCommentTable, ParentCommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentCommentWith applies the HasEdge predicate on the "parent_comment" edge with a given conditions (other predicates).
func HasParentCommentWith(preds ...predicate.ThreadComment) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newParentCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReplies applies the HasEdge predicate on the "replies" edge.
func HasReplies() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepliesWith applies the HasEdge predicate on the "replies" edge with a given conditions (other predicates).
func HasRepliesWith(preds ...predicate.ThreadComment) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newRepliesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachments applies the HasEdge predicate on the "attachments" edge.
func HasAttachments() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentsWith applies the HasEdge predicate on the "attachments" edge with a given conditions (other predicates).
func HasAttachmentsWith(preds ...predicate.ThreadCommentAttachment) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikedUsers applies the HasEdge predicate on the "liked_users" edge.
func HasLikedUsers() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LikedUsersTable, LikedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikedUsersWith applies the HasEdge predicate on the "liked_users" edge with a given conditions (other predicates).
func HasLikedUsersWith(preds ...predicate.User) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newLikedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribedUsers applies the HasEdge predicate on the "subscribed_users" edge.
func HasSubscribedUsers() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedUsersWith applies the HasEdge predicate on the "subscribed_users" edge with a given conditions (other predicates).
func HasSubscribedUsersWith(preds ...predicate.User) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newSubscribedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCommentLike applies the HasEdge predicate on the "user_comment_like" edge.
func HasUserCommentLike() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserCommentLikeTable, UserCommentLikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCommentLikeWith applies the HasEdge predicate on the "user_comment_like" edge with a given conditions (other predicates).
func HasUserCommentLikeWith(preds ...predicate.UserCommentLike) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newUserCommentLikeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCommentSubscription applies the HasEdge predicate on the "user_comment_subscription" edge.
func HasUserCommentSubscription() predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserCommentSubscriptionTable, UserCommentSubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCommentSubscriptionWith applies the HasEdge predicate on the "user_comment_subscription" edge with a given conditions (other predicates).
func HasUserCommentSubscriptionWith(preds ...predicate.UserCommentSubscription) predicate.ThreadComment {
	return predicate.ThreadComment(func(s *sql.Selector) {
		step := newUserCommentSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ThreadComment) predicate.ThreadComment {
	return predicate.ThreadComment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ThreadComment) predicate.ThreadComment {
	return predicate.ThreadComment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ThreadComment) predicate.ThreadComment {
	return predicate.ThreadComment(sql.NotPredicates(p))
}
