// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentlike"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentLikeQuery is the builder for querying CommentLike entities.
type CommentLikeQuery struct {
	config
	ctx         *QueryContext
	order       []commentlike.OrderOption
	inters      []Interceptor
	predicates  []predicate.CommentLike
	withComment *CommentQuery
	withUser    *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CommentLikeQuery builder.
func (clq *CommentLikeQuery) Where(ps ...predicate.CommentLike) *CommentLikeQuery {
	clq.predicates = append(clq.predicates, ps...)
	return clq
}

// Limit the number of records to be returned by this query.
func (clq *CommentLikeQuery) Limit(limit int) *CommentLikeQuery {
	clq.ctx.Limit = &limit
	return clq
}

// Offset to start from.
func (clq *CommentLikeQuery) Offset(offset int) *CommentLikeQuery {
	clq.ctx.Offset = &offset
	return clq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clq *CommentLikeQuery) Unique(unique bool) *CommentLikeQuery {
	clq.ctx.Unique = &unique
	return clq
}

// Order specifies how the records should be ordered.
func (clq *CommentLikeQuery) Order(o ...commentlike.OrderOption) *CommentLikeQuery {
	clq.order = append(clq.order, o...)
	return clq
}

// QueryComment chains the current query on the "comment" edge.
func (clq *CommentLikeQuery) QueryComment() *CommentQuery {
	query := (&CommentClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(commentlike.Table, commentlike.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commentlike.CommentTable, commentlike.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (clq *CommentLikeQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(commentlike.Table, commentlike.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commentlike.UserTable, commentlike.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CommentLike entity from the query.
// Returns a *NotFoundError when no CommentLike was found.
func (clq *CommentLikeQuery) First(ctx context.Context) (*CommentLike, error) {
	nodes, err := clq.Limit(1).All(setContextOp(ctx, clq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{commentlike.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clq *CommentLikeQuery) FirstX(ctx context.Context) *CommentLike {
	node, err := clq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CommentLike ID from the query.
// Returns a *NotFoundError when no CommentLike ID was found.
func (clq *CommentLikeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(1).IDs(setContextOp(ctx, clq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{commentlike.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clq *CommentLikeQuery) FirstIDX(ctx context.Context) int {
	id, err := clq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CommentLike entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CommentLike entity is found.
// Returns a *NotFoundError when no CommentLike entities are found.
func (clq *CommentLikeQuery) Only(ctx context.Context) (*CommentLike, error) {
	nodes, err := clq.Limit(2).All(setContextOp(ctx, clq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{commentlike.Label}
	default:
		return nil, &NotSingularError{commentlike.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clq *CommentLikeQuery) OnlyX(ctx context.Context) *CommentLike {
	node, err := clq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CommentLike ID in the query.
// Returns a *NotSingularError when more than one CommentLike ID is found.
// Returns a *NotFoundError when no entities are found.
func (clq *CommentLikeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clq.Limit(2).IDs(setContextOp(ctx, clq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{commentlike.Label}
	default:
		err = &NotSingularError{commentlike.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clq *CommentLikeQuery) OnlyIDX(ctx context.Context) int {
	id, err := clq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CommentLikes.
func (clq *CommentLikeQuery) All(ctx context.Context) ([]*CommentLike, error) {
	ctx = setContextOp(ctx, clq.ctx, "All")
	if err := clq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CommentLike, *CommentLikeQuery]()
	return withInterceptors[[]*CommentLike](ctx, clq, qr, clq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clq *CommentLikeQuery) AllX(ctx context.Context) []*CommentLike {
	nodes, err := clq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CommentLike IDs.
func (clq *CommentLikeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if clq.ctx.Unique == nil && clq.path != nil {
		clq.Unique(true)
	}
	ctx = setContextOp(ctx, clq.ctx, "IDs")
	if err = clq.Select(commentlike.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clq *CommentLikeQuery) IDsX(ctx context.Context) []int {
	ids, err := clq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clq *CommentLikeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clq.ctx, "Count")
	if err := clq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clq, querierCount[*CommentLikeQuery](), clq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clq *CommentLikeQuery) CountX(ctx context.Context) int {
	count, err := clq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clq *CommentLikeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clq.ctx, "Exist")
	switch _, err := clq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clq *CommentLikeQuery) ExistX(ctx context.Context) bool {
	exist, err := clq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CommentLikeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clq *CommentLikeQuery) Clone() *CommentLikeQuery {
	if clq == nil {
		return nil
	}
	return &CommentLikeQuery{
		config:      clq.config,
		ctx:         clq.ctx.Clone(),
		order:       append([]commentlike.OrderOption{}, clq.order...),
		inters:      append([]Interceptor{}, clq.inters...),
		predicates:  append([]predicate.CommentLike{}, clq.predicates...),
		withComment: clq.withComment.Clone(),
		withUser:    clq.withUser.Clone(),
		// clone intermediate query.
		sql:  clq.sql.Clone(),
		path: clq.path,
	}
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CommentLikeQuery) WithComment(opts ...func(*CommentQuery)) *CommentLikeQuery {
	query := (&CommentClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withComment = query
	return clq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *CommentLikeQuery) WithUser(opts ...func(*UserQuery)) *CommentLikeQuery {
	query := (&UserClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withUser = query
	return clq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CommentID int `json:"comment_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CommentLike.Query().
//		GroupBy(commentlike.FieldCommentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (clq *CommentLikeQuery) GroupBy(field string, fields ...string) *CommentLikeGroupBy {
	clq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CommentLikeGroupBy{build: clq}
	grbuild.flds = &clq.ctx.Fields
	grbuild.label = commentlike.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CommentID int `json:"comment_id,omitempty"`
//	}
//
//	client.CommentLike.Query().
//		Select(commentlike.FieldCommentID).
//		Scan(ctx, &v)
func (clq *CommentLikeQuery) Select(fields ...string) *CommentLikeSelect {
	clq.ctx.Fields = append(clq.ctx.Fields, fields...)
	sbuild := &CommentLikeSelect{CommentLikeQuery: clq}
	sbuild.label = commentlike.Label
	sbuild.flds, sbuild.scan = &clq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CommentLikeSelect configured with the given aggregations.
func (clq *CommentLikeQuery) Aggregate(fns ...AggregateFunc) *CommentLikeSelect {
	return clq.Select().Aggregate(fns...)
}

func (clq *CommentLikeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clq); err != nil {
				return err
			}
		}
	}
	for _, f := range clq.ctx.Fields {
		if !commentlike.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if clq.path != nil {
		prev, err := clq.path(ctx)
		if err != nil {
			return err
		}
		clq.sql = prev
	}
	return nil
}

func (clq *CommentLikeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CommentLike, error) {
	var (
		nodes       = []*CommentLike{}
		_spec       = clq.querySpec()
		loadedTypes = [2]bool{
			clq.withComment != nil,
			clq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CommentLike).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CommentLike{config: clq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clq.withComment; query != nil {
		if err := clq.loadComment(ctx, query, nodes, nil,
			func(n *CommentLike, e *Comment) { n.Edges.Comment = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withUser; query != nil {
		if err := clq.loadUser(ctx, query, nodes, nil,
			func(n *CommentLike, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clq *CommentLikeQuery) loadComment(ctx context.Context, query *CommentQuery, nodes []*CommentLike, init func(*CommentLike), assign func(*CommentLike, *Comment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CommentLike)
	for i := range nodes {
		fk := nodes[i].CommentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(comment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "comment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clq *CommentLikeQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*CommentLike, init func(*CommentLike), assign func(*CommentLike, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CommentLike)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (clq *CommentLikeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clq.querySpec()
	_spec.Node.Columns = clq.ctx.Fields
	if len(clq.ctx.Fields) > 0 {
		_spec.Unique = clq.ctx.Unique != nil && *clq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clq.driver, _spec)
}

func (clq *CommentLikeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(commentlike.Table, commentlike.Columns, sqlgraph.NewFieldSpec(commentlike.FieldID, field.TypeInt))
	_spec.From = clq.sql
	if unique := clq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clq.path != nil {
		_spec.Unique = true
	}
	if fields := clq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentlike.FieldID)
		for i := range fields {
			if fields[i] != commentlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clq.withComment != nil {
			_spec.Node.AddColumnOnce(commentlike.FieldCommentID)
		}
		if clq.withUser != nil {
			_spec.Node.AddColumnOnce(commentlike.FieldUserID)
		}
	}
	if ps := clq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clq *CommentLikeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clq.driver.Dialect())
	t1 := builder.Table(commentlike.Table)
	columns := clq.ctx.Fields
	if len(columns) == 0 {
		columns = commentlike.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clq.sql != nil {
		selector = clq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clq.ctx.Unique != nil && *clq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clq.predicates {
		p(selector)
	}
	for _, p := range clq.order {
		p(selector)
	}
	if offset := clq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CommentLikeGroupBy is the group-by builder for CommentLike entities.
type CommentLikeGroupBy struct {
	selector
	build *CommentLikeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clgb *CommentLikeGroupBy) Aggregate(fns ...AggregateFunc) *CommentLikeGroupBy {
	clgb.fns = append(clgb.fns, fns...)
	return clgb
}

// Scan applies the selector query and scans the result into the given value.
func (clgb *CommentLikeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clgb.build.ctx, "GroupBy")
	if err := clgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CommentLikeQuery, *CommentLikeGroupBy](ctx, clgb.build, clgb, clgb.build.inters, v)
}

func (clgb *CommentLikeGroupBy) sqlScan(ctx context.Context, root *CommentLikeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clgb.fns))
	for _, fn := range clgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clgb.flds)+len(clgb.fns))
		for _, f := range *clgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CommentLikeSelect is the builder for selecting fields of CommentLike entities.
type CommentLikeSelect struct {
	*CommentLikeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cls *CommentLikeSelect) Aggregate(fns ...AggregateFunc) *CommentLikeSelect {
	cls.fns = append(cls.fns, fns...)
	return cls
}

// Scan applies the selector query and scans the result into the given value.
func (cls *CommentLikeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cls.ctx, "Select")
	if err := cls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CommentLikeQuery, *CommentLikeSelect](ctx, cls.CommentLikeQuery, cls, cls.inters, v)
}

func (cls *CommentLikeSelect) sqlScan(ctx context.Context, root *CommentLikeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cls.fns))
	for _, fn := range cls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
