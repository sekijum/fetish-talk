// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadtag"
	"server/infrastructure/ent/threadtagging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ThreadTaggingQuery is the builder for querying ThreadTagging entities.
type ThreadTaggingQuery struct {
	config
	ctx        *QueryContext
	order      []threadtagging.OrderOption
	inters     []Interceptor
	predicates []predicate.ThreadTagging
	withThread *ThreadQuery
	withTag    *ThreadTagQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ThreadTaggingQuery builder.
func (ttq *ThreadTaggingQuery) Where(ps ...predicate.ThreadTagging) *ThreadTaggingQuery {
	ttq.predicates = append(ttq.predicates, ps...)
	return ttq
}

// Limit the number of records to be returned by this query.
func (ttq *ThreadTaggingQuery) Limit(limit int) *ThreadTaggingQuery {
	ttq.ctx.Limit = &limit
	return ttq
}

// Offset to start from.
func (ttq *ThreadTaggingQuery) Offset(offset int) *ThreadTaggingQuery {
	ttq.ctx.Offset = &offset
	return ttq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttq *ThreadTaggingQuery) Unique(unique bool) *ThreadTaggingQuery {
	ttq.ctx.Unique = &unique
	return ttq
}

// Order specifies how the records should be ordered.
func (ttq *ThreadTaggingQuery) Order(o ...threadtagging.OrderOption) *ThreadTaggingQuery {
	ttq.order = append(ttq.order, o...)
	return ttq
}

// QueryThread chains the current query on the "thread" edge.
func (ttq *ThreadTaggingQuery) QueryThread() *ThreadQuery {
	query := (&ThreadClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadtagging.Table, threadtagging.ThreadColumn, selector),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, threadtagging.ThreadTable, threadtagging.ThreadColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTag chains the current query on the "tag" edge.
func (ttq *ThreadTaggingQuery) QueryTag() *ThreadTagQuery {
	query := (&ThreadTagClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadtagging.Table, threadtagging.TagColumn, selector),
			sqlgraph.To(threadtag.Table, threadtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, threadtagging.TagTable, threadtagging.TagColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ThreadTagging entity from the query.
// Returns a *NotFoundError when no ThreadTagging was found.
func (ttq *ThreadTaggingQuery) First(ctx context.Context) (*ThreadTagging, error) {
	nodes, err := ttq.Limit(1).All(setContextOp(ctx, ttq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{threadtagging.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttq *ThreadTaggingQuery) FirstX(ctx context.Context) *ThreadTagging {
	node, err := ttq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single ThreadTagging entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ThreadTagging entity is found.
// Returns a *NotFoundError when no ThreadTagging entities are found.
func (ttq *ThreadTaggingQuery) Only(ctx context.Context) (*ThreadTagging, error) {
	nodes, err := ttq.Limit(2).All(setContextOp(ctx, ttq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{threadtagging.Label}
	default:
		return nil, &NotSingularError{threadtagging.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttq *ThreadTaggingQuery) OnlyX(ctx context.Context) *ThreadTagging {
	node, err := ttq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of ThreadTaggings.
func (ttq *ThreadTaggingQuery) All(ctx context.Context) ([]*ThreadTagging, error) {
	ctx = setContextOp(ctx, ttq.ctx, "All")
	if err := ttq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ThreadTagging, *ThreadTaggingQuery]()
	return withInterceptors[[]*ThreadTagging](ctx, ttq, qr, ttq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttq *ThreadTaggingQuery) AllX(ctx context.Context) []*ThreadTagging {
	nodes, err := ttq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ttq *ThreadTaggingQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Count")
	if err := ttq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttq, querierCount[*ThreadTaggingQuery](), ttq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttq *ThreadTaggingQuery) CountX(ctx context.Context) int {
	count, err := ttq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttq *ThreadTaggingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Exist")
	switch _, err := ttq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttq *ThreadTaggingQuery) ExistX(ctx context.Context) bool {
	exist, err := ttq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ThreadTaggingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttq *ThreadTaggingQuery) Clone() *ThreadTaggingQuery {
	if ttq == nil {
		return nil
	}
	return &ThreadTaggingQuery{
		config:     ttq.config,
		ctx:        ttq.ctx.Clone(),
		order:      append([]threadtagging.OrderOption{}, ttq.order...),
		inters:     append([]Interceptor{}, ttq.inters...),
		predicates: append([]predicate.ThreadTagging{}, ttq.predicates...),
		withThread: ttq.withThread.Clone(),
		withTag:    ttq.withTag.Clone(),
		// clone intermediate query.
		sql:  ttq.sql.Clone(),
		path: ttq.path,
	}
}

// WithThread tells the query-builder to eager-load the nodes that are connected to
// the "thread" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *ThreadTaggingQuery) WithThread(opts ...func(*ThreadQuery)) *ThreadTaggingQuery {
	query := (&ThreadClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withThread = query
	return ttq
}

// WithTag tells the query-builder to eager-load the nodes that are connected to
// the "tag" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *ThreadTaggingQuery) WithTag(opts ...func(*ThreadTagQuery)) *ThreadTaggingQuery {
	query := (&ThreadTagClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withTag = query
	return ttq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ThreadId int `json:"threadId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThreadTagging.Query().
//		GroupBy(threadtagging.FieldThreadId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttq *ThreadTaggingQuery) GroupBy(field string, fields ...string) *ThreadTaggingGroupBy {
	ttq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ThreadTaggingGroupBy{build: ttq}
	grbuild.flds = &ttq.ctx.Fields
	grbuild.label = threadtagging.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ThreadId int `json:"threadId,omitempty"`
//	}
//
//	client.ThreadTagging.Query().
//		Select(threadtagging.FieldThreadId).
//		Scan(ctx, &v)
func (ttq *ThreadTaggingQuery) Select(fields ...string) *ThreadTaggingSelect {
	ttq.ctx.Fields = append(ttq.ctx.Fields, fields...)
	sbuild := &ThreadTaggingSelect{ThreadTaggingQuery: ttq}
	sbuild.label = threadtagging.Label
	sbuild.flds, sbuild.scan = &ttq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ThreadTaggingSelect configured with the given aggregations.
func (ttq *ThreadTaggingQuery) Aggregate(fns ...AggregateFunc) *ThreadTaggingSelect {
	return ttq.Select().Aggregate(fns...)
}

func (ttq *ThreadTaggingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttq.ctx.Fields {
		if !threadtagging.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttq.path != nil {
		prev, err := ttq.path(ctx)
		if err != nil {
			return err
		}
		ttq.sql = prev
	}
	return nil
}

func (ttq *ThreadTaggingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ThreadTagging, error) {
	var (
		nodes       = []*ThreadTagging{}
		_spec       = ttq.querySpec()
		loadedTypes = [2]bool{
			ttq.withThread != nil,
			ttq.withTag != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ThreadTagging).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ThreadTagging{config: ttq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttq.withThread; query != nil {
		if err := ttq.loadThread(ctx, query, nodes, nil,
			func(n *ThreadTagging, e *Thread) { n.Edges.Thread = e }); err != nil {
			return nil, err
		}
	}
	if query := ttq.withTag; query != nil {
		if err := ttq.loadTag(ctx, query, nodes, nil,
			func(n *ThreadTagging, e *ThreadTag) { n.Edges.Tag = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttq *ThreadTaggingQuery) loadThread(ctx context.Context, query *ThreadQuery, nodes []*ThreadTagging, init func(*ThreadTagging), assign func(*ThreadTagging, *Thread)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadTagging)
	for i := range nodes {
		fk := nodes[i].ThreadId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(thread.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "threadId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ttq *ThreadTaggingQuery) loadTag(ctx context.Context, query *ThreadTagQuery, nodes []*ThreadTagging, init func(*ThreadTagging), assign func(*ThreadTagging, *ThreadTag)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadTagging)
	for i := range nodes {
		fk := nodes[i].TagId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(threadtag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tagId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ttq *ThreadTaggingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ttq.driver, _spec)
}

func (ttq *ThreadTaggingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(threadtagging.Table, threadtagging.Columns, nil)
	_spec.From = ttq.sql
	if unique := ttq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttq.path != nil {
		_spec.Unique = true
	}
	if fields := ttq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ttq.withThread != nil {
			_spec.Node.AddColumnOnce(threadtagging.FieldThreadId)
		}
		if ttq.withTag != nil {
			_spec.Node.AddColumnOnce(threadtagging.FieldTagId)
		}
	}
	if ps := ttq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttq *ThreadTaggingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttq.driver.Dialect())
	t1 := builder.Table(threadtagging.Table)
	columns := ttq.ctx.Fields
	if len(columns) == 0 {
		columns = threadtagging.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttq.sql != nil {
		selector = ttq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttq.ctx.Unique != nil && *ttq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttq.predicates {
		p(selector)
	}
	for _, p := range ttq.order {
		p(selector)
	}
	if offset := ttq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThreadTaggingGroupBy is the group-by builder for ThreadTagging entities.
type ThreadTaggingGroupBy struct {
	selector
	build *ThreadTaggingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttgb *ThreadTaggingGroupBy) Aggregate(fns ...AggregateFunc) *ThreadTaggingGroupBy {
	ttgb.fns = append(ttgb.fns, fns...)
	return ttgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttgb *ThreadTaggingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttgb.build.ctx, "GroupBy")
	if err := ttgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadTaggingQuery, *ThreadTaggingGroupBy](ctx, ttgb.build, ttgb, ttgb.build.inters, v)
}

func (ttgb *ThreadTaggingGroupBy) sqlScan(ctx context.Context, root *ThreadTaggingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttgb.fns))
	for _, fn := range ttgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttgb.flds)+len(ttgb.fns))
		for _, f := range *ttgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ThreadTaggingSelect is the builder for selecting fields of ThreadTagging entities.
type ThreadTaggingSelect struct {
	*ThreadTaggingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tts *ThreadTaggingSelect) Aggregate(fns ...AggregateFunc) *ThreadTaggingSelect {
	tts.fns = append(tts.fns, fns...)
	return tts
}

// Scan applies the selector query and scans the result into the given value.
func (tts *ThreadTaggingSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tts.ctx, "Select")
	if err := tts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadTaggingQuery, *ThreadTaggingSelect](ctx, tts.ThreadTaggingQuery, tts, tts.inters, v)
}

func (tts *ThreadTaggingSelect) sqlScan(ctx context.Context, root *ThreadTaggingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tts.fns))
	for _, fn := range tts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
