// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topiclike"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicLikeUpdate is the builder for updating TopicLike entities.
type TopicLikeUpdate struct {
	config
	hooks    []Hook
	mutation *TopicLikeMutation
}

// Where appends a list predicates to the TopicLikeUpdate builder.
func (tlu *TopicLikeUpdate) Where(ps ...predicate.TopicLike) *TopicLikeUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetTopicID sets the "topic_id" field.
func (tlu *TopicLikeUpdate) SetTopicID(i int) *TopicLikeUpdate {
	tlu.mutation.SetTopicID(i)
	return tlu
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (tlu *TopicLikeUpdate) SetNillableTopicID(i *int) *TopicLikeUpdate {
	if i != nil {
		tlu.SetTopicID(*i)
	}
	return tlu
}

// SetUserID sets the "user_id" field.
func (tlu *TopicLikeUpdate) SetUserID(i int) *TopicLikeUpdate {
	tlu.mutation.SetUserID(i)
	return tlu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tlu *TopicLikeUpdate) SetNillableUserID(i *int) *TopicLikeUpdate {
	if i != nil {
		tlu.SetUserID(*i)
	}
	return tlu
}

// SetCreatedAt sets the "created_at" field.
func (tlu *TopicLikeUpdate) SetCreatedAt(t time.Time) *TopicLikeUpdate {
	tlu.mutation.SetCreatedAt(t)
	return tlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlu *TopicLikeUpdate) SetNillableCreatedAt(t *time.Time) *TopicLikeUpdate {
	if t != nil {
		tlu.SetCreatedAt(*t)
	}
	return tlu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tlu *TopicLikeUpdate) SetTopic(t *Topic) *TopicLikeUpdate {
	return tlu.SetTopicID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tlu *TopicLikeUpdate) SetUser(u *User) *TopicLikeUpdate {
	return tlu.SetUserID(u.ID)
}

// Mutation returns the TopicLikeMutation object of the builder.
func (tlu *TopicLikeUpdate) Mutation() *TopicLikeMutation {
	return tlu.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tlu *TopicLikeUpdate) ClearTopic() *TopicLikeUpdate {
	tlu.mutation.ClearTopic()
	return tlu
}

// ClearUser clears the "user" edge to the User entity.
func (tlu *TopicLikeUpdate) ClearUser() *TopicLikeUpdate {
	tlu.mutation.ClearUser()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TopicLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TopicLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TopicLikeUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TopicLikeUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TopicLikeUpdate) check() error {
	if _, ok := tlu.mutation.TopicID(); tlu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicLike.topic"`)
	}
	if _, ok := tlu.mutation.UserID(); tlu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicLike.user"`)
	}
	return nil
}

func (tlu *TopicLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topiclike.Table, topiclike.Columns, sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.CreatedAt(); ok {
		_spec.SetField(topiclike.FieldCreatedAt, field.TypeTime, value)
	}
	if tlu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.TopicTable,
			Columns: []string{topiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.TopicTable,
			Columns: []string{topiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.UserTable,
			Columns: []string{topiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.UserTable,
			Columns: []string{topiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topiclike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TopicLikeUpdateOne is the builder for updating a single TopicLike entity.
type TopicLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicLikeMutation
}

// SetTopicID sets the "topic_id" field.
func (tluo *TopicLikeUpdateOne) SetTopicID(i int) *TopicLikeUpdateOne {
	tluo.mutation.SetTopicID(i)
	return tluo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (tluo *TopicLikeUpdateOne) SetNillableTopicID(i *int) *TopicLikeUpdateOne {
	if i != nil {
		tluo.SetTopicID(*i)
	}
	return tluo
}

// SetUserID sets the "user_id" field.
func (tluo *TopicLikeUpdateOne) SetUserID(i int) *TopicLikeUpdateOne {
	tluo.mutation.SetUserID(i)
	return tluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tluo *TopicLikeUpdateOne) SetNillableUserID(i *int) *TopicLikeUpdateOne {
	if i != nil {
		tluo.SetUserID(*i)
	}
	return tluo
}

// SetCreatedAt sets the "created_at" field.
func (tluo *TopicLikeUpdateOne) SetCreatedAt(t time.Time) *TopicLikeUpdateOne {
	tluo.mutation.SetCreatedAt(t)
	return tluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tluo *TopicLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *TopicLikeUpdateOne {
	if t != nil {
		tluo.SetCreatedAt(*t)
	}
	return tluo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tluo *TopicLikeUpdateOne) SetTopic(t *Topic) *TopicLikeUpdateOne {
	return tluo.SetTopicID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tluo *TopicLikeUpdateOne) SetUser(u *User) *TopicLikeUpdateOne {
	return tluo.SetUserID(u.ID)
}

// Mutation returns the TopicLikeMutation object of the builder.
func (tluo *TopicLikeUpdateOne) Mutation() *TopicLikeMutation {
	return tluo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tluo *TopicLikeUpdateOne) ClearTopic() *TopicLikeUpdateOne {
	tluo.mutation.ClearTopic()
	return tluo
}

// ClearUser clears the "user" edge to the User entity.
func (tluo *TopicLikeUpdateOne) ClearUser() *TopicLikeUpdateOne {
	tluo.mutation.ClearUser()
	return tluo
}

// Where appends a list predicates to the TopicLikeUpdate builder.
func (tluo *TopicLikeUpdateOne) Where(ps ...predicate.TopicLike) *TopicLikeUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TopicLikeUpdateOne) Select(field string, fields ...string) *TopicLikeUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TopicLike entity.
func (tluo *TopicLikeUpdateOne) Save(ctx context.Context) (*TopicLike, error) {
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TopicLikeUpdateOne) SaveX(ctx context.Context) *TopicLike {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TopicLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TopicLikeUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TopicLikeUpdateOne) check() error {
	if _, ok := tluo.mutation.TopicID(); tluo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicLike.topic"`)
	}
	if _, ok := tluo.mutation.UserID(); tluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicLike.user"`)
	}
	return nil
}

func (tluo *TopicLikeUpdateOne) sqlSave(ctx context.Context) (_node *TopicLike, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topiclike.Table, topiclike.Columns, sqlgraph.NewFieldSpec(topiclike.FieldID, field.TypeInt))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopicLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topiclike.FieldID)
		for _, f := range fields {
			if !topiclike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topiclike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.CreatedAt(); ok {
		_spec.SetField(topiclike.FieldCreatedAt, field.TypeTime, value)
	}
	if tluo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.TopicTable,
			Columns: []string{topiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.TopicTable,
			Columns: []string{topiclike.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.UserTable,
			Columns: []string{topiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topiclike.UserTable,
			Columns: []string{topiclike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopicLike{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topiclike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
