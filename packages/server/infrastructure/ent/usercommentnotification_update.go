// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentnotification"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCommentNotificationUpdate is the builder for updating UserCommentNotification entities.
type UserCommentNotificationUpdate struct {
	config
	hooks    []Hook
	mutation *UserCommentNotificationMutation
}

// Where appends a list predicates to the UserCommentNotificationUpdate builder.
func (ucnu *UserCommentNotificationUpdate) Where(ps ...predicate.UserCommentNotification) *UserCommentNotificationUpdate {
	ucnu.mutation.Where(ps...)
	return ucnu
}

// SetUserID sets the "user_id" field.
func (ucnu *UserCommentNotificationUpdate) SetUserID(i int) *UserCommentNotificationUpdate {
	ucnu.mutation.SetUserID(i)
	return ucnu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucnu *UserCommentNotificationUpdate) SetNillableUserID(i *int) *UserCommentNotificationUpdate {
	if i != nil {
		ucnu.SetUserID(*i)
	}
	return ucnu
}

// SetCommentID sets the "comment_id" field.
func (ucnu *UserCommentNotificationUpdate) SetCommentID(i int) *UserCommentNotificationUpdate {
	ucnu.mutation.SetCommentID(i)
	return ucnu
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ucnu *UserCommentNotificationUpdate) SetNillableCommentID(i *int) *UserCommentNotificationUpdate {
	if i != nil {
		ucnu.SetCommentID(*i)
	}
	return ucnu
}

// SetCreatedAt sets the "created_at" field.
func (ucnu *UserCommentNotificationUpdate) SetCreatedAt(t time.Time) *UserCommentNotificationUpdate {
	ucnu.mutation.SetCreatedAt(t)
	return ucnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucnu *UserCommentNotificationUpdate) SetNillableCreatedAt(t *time.Time) *UserCommentNotificationUpdate {
	if t != nil {
		ucnu.SetCreatedAt(*t)
	}
	return ucnu
}

// SetUser sets the "user" edge to the User entity.
func (ucnu *UserCommentNotificationUpdate) SetUser(u *User) *UserCommentNotificationUpdate {
	return ucnu.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (ucnu *UserCommentNotificationUpdate) SetComment(c *Comment) *UserCommentNotificationUpdate {
	return ucnu.SetCommentID(c.ID)
}

// Mutation returns the UserCommentNotificationMutation object of the builder.
func (ucnu *UserCommentNotificationUpdate) Mutation() *UserCommentNotificationMutation {
	return ucnu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucnu *UserCommentNotificationUpdate) ClearUser() *UserCommentNotificationUpdate {
	ucnu.mutation.ClearUser()
	return ucnu
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ucnu *UserCommentNotificationUpdate) ClearComment() *UserCommentNotificationUpdate {
	ucnu.mutation.ClearComment()
	return ucnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucnu *UserCommentNotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucnu.sqlSave, ucnu.mutation, ucnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucnu *UserCommentNotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := ucnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucnu *UserCommentNotificationUpdate) Exec(ctx context.Context) error {
	_, err := ucnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucnu *UserCommentNotificationUpdate) ExecX(ctx context.Context) {
	if err := ucnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucnu *UserCommentNotificationUpdate) check() error {
	if _, ok := ucnu.mutation.UserID(); ucnu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCommentNotification.user"`)
	}
	if _, ok := ucnu.mutation.CommentID(); ucnu.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCommentNotification.comment"`)
	}
	return nil
}

func (ucnu *UserCommentNotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercommentnotification.Table, usercommentnotification.Columns, sqlgraph.NewFieldSpec(usercommentnotification.FieldID, field.TypeInt))
	if ps := ucnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucnu.mutation.CreatedAt(); ok {
		_spec.SetField(usercommentnotification.FieldCreatedAt, field.TypeTime, value)
	}
	if ucnu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.UserTable,
			Columns: []string{usercommentnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucnu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.UserTable,
			Columns: []string{usercommentnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucnu.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.CommentTable,
			Columns: []string{usercommentnotification.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucnu.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.CommentTable,
			Columns: []string{usercommentnotification.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercommentnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucnu.mutation.done = true
	return n, nil
}

// UserCommentNotificationUpdateOne is the builder for updating a single UserCommentNotification entity.
type UserCommentNotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCommentNotificationMutation
}

// SetUserID sets the "user_id" field.
func (ucnuo *UserCommentNotificationUpdateOne) SetUserID(i int) *UserCommentNotificationUpdateOne {
	ucnuo.mutation.SetUserID(i)
	return ucnuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucnuo *UserCommentNotificationUpdateOne) SetNillableUserID(i *int) *UserCommentNotificationUpdateOne {
	if i != nil {
		ucnuo.SetUserID(*i)
	}
	return ucnuo
}

// SetCommentID sets the "comment_id" field.
func (ucnuo *UserCommentNotificationUpdateOne) SetCommentID(i int) *UserCommentNotificationUpdateOne {
	ucnuo.mutation.SetCommentID(i)
	return ucnuo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ucnuo *UserCommentNotificationUpdateOne) SetNillableCommentID(i *int) *UserCommentNotificationUpdateOne {
	if i != nil {
		ucnuo.SetCommentID(*i)
	}
	return ucnuo
}

// SetCreatedAt sets the "created_at" field.
func (ucnuo *UserCommentNotificationUpdateOne) SetCreatedAt(t time.Time) *UserCommentNotificationUpdateOne {
	ucnuo.mutation.SetCreatedAt(t)
	return ucnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucnuo *UserCommentNotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *UserCommentNotificationUpdateOne {
	if t != nil {
		ucnuo.SetCreatedAt(*t)
	}
	return ucnuo
}

// SetUser sets the "user" edge to the User entity.
func (ucnuo *UserCommentNotificationUpdateOne) SetUser(u *User) *UserCommentNotificationUpdateOne {
	return ucnuo.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (ucnuo *UserCommentNotificationUpdateOne) SetComment(c *Comment) *UserCommentNotificationUpdateOne {
	return ucnuo.SetCommentID(c.ID)
}

// Mutation returns the UserCommentNotificationMutation object of the builder.
func (ucnuo *UserCommentNotificationUpdateOne) Mutation() *UserCommentNotificationMutation {
	return ucnuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucnuo *UserCommentNotificationUpdateOne) ClearUser() *UserCommentNotificationUpdateOne {
	ucnuo.mutation.ClearUser()
	return ucnuo
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ucnuo *UserCommentNotificationUpdateOne) ClearComment() *UserCommentNotificationUpdateOne {
	ucnuo.mutation.ClearComment()
	return ucnuo
}

// Where appends a list predicates to the UserCommentNotificationUpdate builder.
func (ucnuo *UserCommentNotificationUpdateOne) Where(ps ...predicate.UserCommentNotification) *UserCommentNotificationUpdateOne {
	ucnuo.mutation.Where(ps...)
	return ucnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucnuo *UserCommentNotificationUpdateOne) Select(field string, fields ...string) *UserCommentNotificationUpdateOne {
	ucnuo.fields = append([]string{field}, fields...)
	return ucnuo
}

// Save executes the query and returns the updated UserCommentNotification entity.
func (ucnuo *UserCommentNotificationUpdateOne) Save(ctx context.Context) (*UserCommentNotification, error) {
	return withHooks(ctx, ucnuo.sqlSave, ucnuo.mutation, ucnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucnuo *UserCommentNotificationUpdateOne) SaveX(ctx context.Context) *UserCommentNotification {
	node, err := ucnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucnuo *UserCommentNotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := ucnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucnuo *UserCommentNotificationUpdateOne) ExecX(ctx context.Context) {
	if err := ucnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucnuo *UserCommentNotificationUpdateOne) check() error {
	if _, ok := ucnuo.mutation.UserID(); ucnuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCommentNotification.user"`)
	}
	if _, ok := ucnuo.mutation.CommentID(); ucnuo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserCommentNotification.comment"`)
	}
	return nil
}

func (ucnuo *UserCommentNotificationUpdateOne) sqlSave(ctx context.Context) (_node *UserCommentNotification, err error) {
	if err := ucnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercommentnotification.Table, usercommentnotification.Columns, sqlgraph.NewFieldSpec(usercommentnotification.FieldID, field.TypeInt))
	id, ok := ucnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCommentNotification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercommentnotification.FieldID)
		for _, f := range fields {
			if !usercommentnotification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercommentnotification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucnuo.mutation.CreatedAt(); ok {
		_spec.SetField(usercommentnotification.FieldCreatedAt, field.TypeTime, value)
	}
	if ucnuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.UserTable,
			Columns: []string{usercommentnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucnuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.UserTable,
			Columns: []string{usercommentnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucnuo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.CommentTable,
			Columns: []string{usercommentnotification.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucnuo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercommentnotification.CommentTable,
			Columns: []string{usercommentnotification.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCommentNotification{config: ucnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercommentnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucnuo.mutation.done = true
	return _node, nil
}
