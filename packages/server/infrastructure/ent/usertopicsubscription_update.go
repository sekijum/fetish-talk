// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicsubscription"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicSubscriptionUpdate is the builder for updating UserTopicSubscription entities.
type UserTopicSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *UserTopicSubscriptionMutation
}

// Where appends a list predicates to the UserTopicSubscriptionUpdate builder.
func (utsu *UserTopicSubscriptionUpdate) Where(ps ...predicate.UserTopicSubscription) *UserTopicSubscriptionUpdate {
	utsu.mutation.Where(ps...)
	return utsu
}

// SetUserId sets the "userId" field.
func (utsu *UserTopicSubscriptionUpdate) SetUserId(i int) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetUserId(i)
	return utsu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (utsu *UserTopicSubscriptionUpdate) SetNillableUserId(i *int) *UserTopicSubscriptionUpdate {
	if i != nil {
		utsu.SetUserId(*i)
	}
	return utsu
}

// SetTopicId sets the "topicId" field.
func (utsu *UserTopicSubscriptionUpdate) SetTopicId(i int) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetTopicId(i)
	return utsu
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (utsu *UserTopicSubscriptionUpdate) SetNillableTopicId(i *int) *UserTopicSubscriptionUpdate {
	if i != nil {
		utsu.SetTopicId(*i)
	}
	return utsu
}

// SetIsNotified sets the "isNotified" field.
func (utsu *UserTopicSubscriptionUpdate) SetIsNotified(b bool) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetIsNotified(b)
	return utsu
}

// SetNillableIsNotified sets the "isNotified" field if the given value is not nil.
func (utsu *UserTopicSubscriptionUpdate) SetNillableIsNotified(b *bool) *UserTopicSubscriptionUpdate {
	if b != nil {
		utsu.SetIsNotified(*b)
	}
	return utsu
}

// SetSubscribedAt sets the "subscribedAt" field.
func (utsu *UserTopicSubscriptionUpdate) SetSubscribedAt(t time.Time) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetSubscribedAt(t)
	return utsu
}

// SetNillableSubscribedAt sets the "subscribedAt" field if the given value is not nil.
func (utsu *UserTopicSubscriptionUpdate) SetNillableSubscribedAt(t *time.Time) *UserTopicSubscriptionUpdate {
	if t != nil {
		utsu.SetSubscribedAt(*t)
	}
	return utsu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utsu *UserTopicSubscriptionUpdate) SetUserID(id int) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetUserID(id)
	return utsu
}

// SetUser sets the "user" edge to the User entity.
func (utsu *UserTopicSubscriptionUpdate) SetUser(u *User) *UserTopicSubscriptionUpdate {
	return utsu.SetUserID(u.ID)
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (utsu *UserTopicSubscriptionUpdate) SetTopicID(id int) *UserTopicSubscriptionUpdate {
	utsu.mutation.SetTopicID(id)
	return utsu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utsu *UserTopicSubscriptionUpdate) SetTopic(t *Topic) *UserTopicSubscriptionUpdate {
	return utsu.SetTopicID(t.ID)
}

// Mutation returns the UserTopicSubscriptionMutation object of the builder.
func (utsu *UserTopicSubscriptionUpdate) Mutation() *UserTopicSubscriptionMutation {
	return utsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsu *UserTopicSubscriptionUpdate) ClearUser() *UserTopicSubscriptionUpdate {
	utsu.mutation.ClearUser()
	return utsu
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utsu *UserTopicSubscriptionUpdate) ClearTopic() *UserTopicSubscriptionUpdate {
	utsu.mutation.ClearTopic()
	return utsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utsu *UserTopicSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utsu.sqlSave, utsu.mutation, utsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsu *UserTopicSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := utsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utsu *UserTopicSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := utsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsu *UserTopicSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := utsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsu *UserTopicSubscriptionUpdate) check() error {
	if _, ok := utsu.mutation.UserID(); utsu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicSubscription.user"`)
	}
	if _, ok := utsu.mutation.TopicID(); utsu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicSubscription.topic"`)
	}
	return nil
}

func (utsu *UserTopicSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopicsubscription.Table, usertopicsubscription.Columns, sqlgraph.NewFieldSpec(usertopicsubscription.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(usertopicsubscription.FieldTopicId, field.TypeInt))
	if ps := utsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsu.mutation.IsNotified(); ok {
		_spec.SetField(usertopicsubscription.FieldIsNotified, field.TypeBool, value)
	}
	if value, ok := utsu.mutation.SubscribedAt(); ok {
		_spec.SetField(usertopicsubscription.FieldSubscribedAt, field.TypeTime, value)
	}
	if utsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.UserTable,
			Columns: []string{usertopicsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.UserTable,
			Columns: []string{usertopicsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.TopicTable,
			Columns: []string{usertopicsubscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.TopicTable,
			Columns: []string{usertopicsubscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopicsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utsu.mutation.done = true
	return n, nil
}

// UserTopicSubscriptionUpdateOne is the builder for updating a single UserTopicSubscription entity.
type UserTopicSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTopicSubscriptionMutation
}

// SetUserId sets the "userId" field.
func (utsuo *UserTopicSubscriptionUpdateOne) SetUserId(i int) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetUserId(i)
	return utsuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (utsuo *UserTopicSubscriptionUpdateOne) SetNillableUserId(i *int) *UserTopicSubscriptionUpdateOne {
	if i != nil {
		utsuo.SetUserId(*i)
	}
	return utsuo
}

// SetTopicId sets the "topicId" field.
func (utsuo *UserTopicSubscriptionUpdateOne) SetTopicId(i int) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetTopicId(i)
	return utsuo
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (utsuo *UserTopicSubscriptionUpdateOne) SetNillableTopicId(i *int) *UserTopicSubscriptionUpdateOne {
	if i != nil {
		utsuo.SetTopicId(*i)
	}
	return utsuo
}

// SetIsNotified sets the "isNotified" field.
func (utsuo *UserTopicSubscriptionUpdateOne) SetIsNotified(b bool) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetIsNotified(b)
	return utsuo
}

// SetNillableIsNotified sets the "isNotified" field if the given value is not nil.
func (utsuo *UserTopicSubscriptionUpdateOne) SetNillableIsNotified(b *bool) *UserTopicSubscriptionUpdateOne {
	if b != nil {
		utsuo.SetIsNotified(*b)
	}
	return utsuo
}

// SetSubscribedAt sets the "subscribedAt" field.
func (utsuo *UserTopicSubscriptionUpdateOne) SetSubscribedAt(t time.Time) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetSubscribedAt(t)
	return utsuo
}

// SetNillableSubscribedAt sets the "subscribedAt" field if the given value is not nil.
func (utsuo *UserTopicSubscriptionUpdateOne) SetNillableSubscribedAt(t *time.Time) *UserTopicSubscriptionUpdateOne {
	if t != nil {
		utsuo.SetSubscribedAt(*t)
	}
	return utsuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utsuo *UserTopicSubscriptionUpdateOne) SetUserID(id int) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetUserID(id)
	return utsuo
}

// SetUser sets the "user" edge to the User entity.
func (utsuo *UserTopicSubscriptionUpdateOne) SetUser(u *User) *UserTopicSubscriptionUpdateOne {
	return utsuo.SetUserID(u.ID)
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (utsuo *UserTopicSubscriptionUpdateOne) SetTopicID(id int) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.SetTopicID(id)
	return utsuo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utsuo *UserTopicSubscriptionUpdateOne) SetTopic(t *Topic) *UserTopicSubscriptionUpdateOne {
	return utsuo.SetTopicID(t.ID)
}

// Mutation returns the UserTopicSubscriptionMutation object of the builder.
func (utsuo *UserTopicSubscriptionUpdateOne) Mutation() *UserTopicSubscriptionMutation {
	return utsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsuo *UserTopicSubscriptionUpdateOne) ClearUser() *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.ClearUser()
	return utsuo
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utsuo *UserTopicSubscriptionUpdateOne) ClearTopic() *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.ClearTopic()
	return utsuo
}

// Where appends a list predicates to the UserTopicSubscriptionUpdate builder.
func (utsuo *UserTopicSubscriptionUpdateOne) Where(ps ...predicate.UserTopicSubscription) *UserTopicSubscriptionUpdateOne {
	utsuo.mutation.Where(ps...)
	return utsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utsuo *UserTopicSubscriptionUpdateOne) Select(field string, fields ...string) *UserTopicSubscriptionUpdateOne {
	utsuo.fields = append([]string{field}, fields...)
	return utsuo
}

// Save executes the query and returns the updated UserTopicSubscription entity.
func (utsuo *UserTopicSubscriptionUpdateOne) Save(ctx context.Context) (*UserTopicSubscription, error) {
	return withHooks(ctx, utsuo.sqlSave, utsuo.mutation, utsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsuo *UserTopicSubscriptionUpdateOne) SaveX(ctx context.Context) *UserTopicSubscription {
	node, err := utsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utsuo *UserTopicSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := utsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsuo *UserTopicSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := utsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsuo *UserTopicSubscriptionUpdateOne) check() error {
	if _, ok := utsuo.mutation.UserID(); utsuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicSubscription.user"`)
	}
	if _, ok := utsuo.mutation.TopicID(); utsuo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicSubscription.topic"`)
	}
	return nil
}

func (utsuo *UserTopicSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *UserTopicSubscription, err error) {
	if err := utsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopicsubscription.Table, usertopicsubscription.Columns, sqlgraph.NewFieldSpec(usertopicsubscription.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(usertopicsubscription.FieldTopicId, field.TypeInt))
	if id, ok := utsuo.mutation.UserId(); !ok {
		return nil, &ValidationError{Name: "userId", err: errors.New(`ent: missing "UserTopicSubscription.userId" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utsuo.mutation.TopicId(); !ok {
		return nil, &ValidationError{Name: "topicId", err: errors.New(`ent: missing "UserTopicSubscription.topicId" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !usertopicsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsuo.mutation.IsNotified(); ok {
		_spec.SetField(usertopicsubscription.FieldIsNotified, field.TypeBool, value)
	}
	if value, ok := utsuo.mutation.SubscribedAt(); ok {
		_spec.SetField(usertopicsubscription.FieldSubscribedAt, field.TypeTime, value)
	}
	if utsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.UserTable,
			Columns: []string{usertopicsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.UserTable,
			Columns: []string{usertopicsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.TopicTable,
			Columns: []string{usertopicsubscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertopicsubscription.TopicTable,
			Columns: []string{usertopicsubscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserTopicSubscription{config: utsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopicsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utsuo.mutation.done = true
	return _node, nil
}
