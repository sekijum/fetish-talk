// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userboardlike"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBoardLike is the model entity for the UserBoardLike schema.
type UserBoardLike struct {
	config `json:"-"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// BoardId holds the value of the "boardId" field.
	BoardId int `json:"boardId,omitempty"`
	// LikedAt holds the value of the "likedAt" field.
	LikedAt time.Time `json:"likedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserBoardLikeQuery when eager-loading is set.
	Edges        UserBoardLikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserBoardLikeEdges holds the relations/edges for other nodes in the graph.
type UserBoardLikeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Board holds the value of the board edge.
	Board *Board `json:"board,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBoardLikeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BoardOrErr returns the Board value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBoardLikeEdges) BoardOrErr() (*Board, error) {
	if e.Board != nil {
		return e.Board, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: board.Label}
	}
	return nil, &NotLoadedError{edge: "board"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBoardLike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userboardlike.FieldUserId, userboardlike.FieldBoardId:
			values[i] = new(sql.NullInt64)
		case userboardlike.FieldLikedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBoardLike fields.
func (ubl *UserBoardLike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userboardlike.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ubl.UserId = int(value.Int64)
			}
		case userboardlike.FieldBoardId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field boardId", values[i])
			} else if value.Valid {
				ubl.BoardId = int(value.Int64)
			}
		case userboardlike.FieldLikedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field likedAt", values[i])
			} else if value.Valid {
				ubl.LikedAt = value.Time
			}
		default:
			ubl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBoardLike.
// This includes values selected through modifiers, order, etc.
func (ubl *UserBoardLike) Value(name string) (ent.Value, error) {
	return ubl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserBoardLike entity.
func (ubl *UserBoardLike) QueryUser() *UserQuery {
	return NewUserBoardLikeClient(ubl.config).QueryUser(ubl)
}

// QueryBoard queries the "board" edge of the UserBoardLike entity.
func (ubl *UserBoardLike) QueryBoard() *BoardQuery {
	return NewUserBoardLikeClient(ubl.config).QueryBoard(ubl)
}

// Update returns a builder for updating this UserBoardLike.
// Note that you need to call UserBoardLike.Unwrap() before calling this method if this UserBoardLike
// was returned from a transaction, and the transaction was committed or rolled back.
func (ubl *UserBoardLike) Update() *UserBoardLikeUpdateOne {
	return NewUserBoardLikeClient(ubl.config).UpdateOne(ubl)
}

// Unwrap unwraps the UserBoardLike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ubl *UserBoardLike) Unwrap() *UserBoardLike {
	_tx, ok := ubl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBoardLike is not a transactional entity")
	}
	ubl.config.driver = _tx.drv
	return ubl
}

// String implements the fmt.Stringer.
func (ubl *UserBoardLike) String() string {
	var builder strings.Builder
	builder.WriteString("UserBoardLike(")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", ubl.UserId))
	builder.WriteString(", ")
	builder.WriteString("boardId=")
	builder.WriteString(fmt.Sprintf("%v", ubl.BoardId))
	builder.WriteString(", ")
	builder.WriteString("likedAt=")
	builder.WriteString(ubl.LikedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserBoardLikes is a parsable slice of UserBoardLike.
type UserBoardLikes []*UserBoardLike
