// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicnotification"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicNotificationCreate is the builder for creating a UserTopicNotification entity.
type UserTopicNotificationCreate struct {
	config
	mutation *UserTopicNotificationMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (utnc *UserTopicNotificationCreate) SetUserID(i int) *UserTopicNotificationCreate {
	utnc.mutation.SetUserID(i)
	return utnc
}

// SetTopicID sets the "topic_id" field.
func (utnc *UserTopicNotificationCreate) SetTopicID(i int) *UserTopicNotificationCreate {
	utnc.mutation.SetTopicID(i)
	return utnc
}

// SetCreatedAt sets the "created_at" field.
func (utnc *UserTopicNotificationCreate) SetCreatedAt(t time.Time) *UserTopicNotificationCreate {
	utnc.mutation.SetCreatedAt(t)
	return utnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utnc *UserTopicNotificationCreate) SetNillableCreatedAt(t *time.Time) *UserTopicNotificationCreate {
	if t != nil {
		utnc.SetCreatedAt(*t)
	}
	return utnc
}

// SetID sets the "id" field.
func (utnc *UserTopicNotificationCreate) SetID(i int) *UserTopicNotificationCreate {
	utnc.mutation.SetID(i)
	return utnc
}

// SetUser sets the "user" edge to the User entity.
func (utnc *UserTopicNotificationCreate) SetUser(u *User) *UserTopicNotificationCreate {
	return utnc.SetUserID(u.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utnc *UserTopicNotificationCreate) SetTopic(t *Topic) *UserTopicNotificationCreate {
	return utnc.SetTopicID(t.ID)
}

// Mutation returns the UserTopicNotificationMutation object of the builder.
func (utnc *UserTopicNotificationCreate) Mutation() *UserTopicNotificationMutation {
	return utnc.mutation
}

// Save creates the UserTopicNotification in the database.
func (utnc *UserTopicNotificationCreate) Save(ctx context.Context) (*UserTopicNotification, error) {
	utnc.defaults()
	return withHooks(ctx, utnc.sqlSave, utnc.mutation, utnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utnc *UserTopicNotificationCreate) SaveX(ctx context.Context) *UserTopicNotification {
	v, err := utnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utnc *UserTopicNotificationCreate) Exec(ctx context.Context) error {
	_, err := utnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utnc *UserTopicNotificationCreate) ExecX(ctx context.Context) {
	if err := utnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (utnc *UserTopicNotificationCreate) defaults() {
	if _, ok := utnc.mutation.CreatedAt(); !ok {
		v := usertopicnotification.DefaultCreatedAt()
		utnc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utnc *UserTopicNotificationCreate) check() error {
	if _, ok := utnc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserTopicNotification.user_id"`)}
	}
	if _, ok := utnc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "UserTopicNotification.topic_id"`)}
	}
	if _, ok := utnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserTopicNotification.created_at"`)}
	}
	if _, ok := utnc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserTopicNotification.user"`)}
	}
	if _, ok := utnc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "UserTopicNotification.topic"`)}
	}
	return nil
}

func (utnc *UserTopicNotificationCreate) sqlSave(ctx context.Context) (*UserTopicNotification, error) {
	if err := utnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	utnc.mutation.id = &_node.ID
	utnc.mutation.done = true
	return _node, nil
}

func (utnc *UserTopicNotificationCreate) createSpec() (*UserTopicNotification, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTopicNotification{config: utnc.config}
		_spec = sqlgraph.NewCreateSpec(usertopicnotification.Table, sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt))
	)
	if id, ok := utnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utnc.mutation.CreatedAt(); ok {
		_spec.SetField(usertopicnotification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := utnc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.UserTable,
			Columns: []string{usertopicnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utnc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.TopicTable,
			Columns: []string{usertopicnotification.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserTopicNotificationCreateBulk is the builder for creating many UserTopicNotification entities in bulk.
type UserTopicNotificationCreateBulk struct {
	config
	err      error
	builders []*UserTopicNotificationCreate
}

// Save creates the UserTopicNotification entities in the database.
func (utncb *UserTopicNotificationCreateBulk) Save(ctx context.Context) ([]*UserTopicNotification, error) {
	if utncb.err != nil {
		return nil, utncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utncb.builders))
	nodes := make([]*UserTopicNotification, len(utncb.builders))
	mutators := make([]Mutator, len(utncb.builders))
	for i := range utncb.builders {
		func(i int, root context.Context) {
			builder := utncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTopicNotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utncb *UserTopicNotificationCreateBulk) SaveX(ctx context.Context) []*UserTopicNotification {
	v, err := utncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utncb *UserTopicNotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := utncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utncb *UserTopicNotificationCreateBulk) ExecX(ctx context.Context) {
	if err := utncb.Exec(ctx); err != nil {
		panic(err)
	}
}
