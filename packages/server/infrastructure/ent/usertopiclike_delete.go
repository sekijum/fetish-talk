// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/usertopiclike"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserTopicLikeDelete is the builder for deleting a UserTopicLike entity.
type UserTopicLikeDelete struct {
	config
	hooks    []Hook
	mutation *UserTopicLikeMutation
}

// Where appends a list predicates to the UserTopicLikeDelete builder.
func (utld *UserTopicLikeDelete) Where(ps ...predicate.UserTopicLike) *UserTopicLikeDelete {
	utld.mutation.Where(ps...)
	return utld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utld *UserTopicLikeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utld.sqlExec, utld.mutation, utld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utld *UserTopicLikeDelete) ExecX(ctx context.Context) int {
	n, err := utld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utld *UserTopicLikeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertopiclike.Table, nil)
	if ps := utld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utld.mutation.done = true
	return affected, err
}

// UserTopicLikeDeleteOne is the builder for deleting a single UserTopicLike entity.
type UserTopicLikeDeleteOne struct {
	utld *UserTopicLikeDelete
}

// Where appends a list predicates to the UserTopicLikeDelete builder.
func (utldo *UserTopicLikeDeleteOne) Where(ps ...predicate.UserTopicLike) *UserTopicLikeDeleteOne {
	utldo.utld.mutation.Where(ps...)
	return utldo
}

// Exec executes the deletion query.
func (utldo *UserTopicLikeDeleteOne) Exec(ctx context.Context) error {
	n, err := utldo.utld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertopiclike.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utldo *UserTopicLikeDeleteOne) ExecX(ctx context.Context) {
	if err := utldo.Exec(ctx); err != nil {
		panic(err)
	}
}
