// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userforumlike"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserForumLikeUpdate is the builder for updating UserForumLike entities.
type UserForumLikeUpdate struct {
	config
	hooks    []Hook
	mutation *UserForumLikeMutation
}

// Where appends a list predicates to the UserForumLikeUpdate builder.
func (uflu *UserForumLikeUpdate) Where(ps ...predicate.UserForumLike) *UserForumLikeUpdate {
	uflu.mutation.Where(ps...)
	return uflu
}

// SetUserId sets the "userId" field.
func (uflu *UserForumLikeUpdate) SetUserId(i int) *UserForumLikeUpdate {
	uflu.mutation.SetUserId(i)
	return uflu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (uflu *UserForumLikeUpdate) SetNillableUserId(i *int) *UserForumLikeUpdate {
	if i != nil {
		uflu.SetUserId(*i)
	}
	return uflu
}

// SetForumId sets the "forumId" field.
func (uflu *UserForumLikeUpdate) SetForumId(i int) *UserForumLikeUpdate {
	uflu.mutation.SetForumId(i)
	return uflu
}

// SetNillableForumId sets the "forumId" field if the given value is not nil.
func (uflu *UserForumLikeUpdate) SetNillableForumId(i *int) *UserForumLikeUpdate {
	if i != nil {
		uflu.SetForumId(*i)
	}
	return uflu
}

// SetType sets the "type" field.
func (uflu *UserForumLikeUpdate) SetType(u userforumlike.Type) *UserForumLikeUpdate {
	uflu.mutation.SetType(u)
	return uflu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uflu *UserForumLikeUpdate) SetNillableType(u *userforumlike.Type) *UserForumLikeUpdate {
	if u != nil {
		uflu.SetType(*u)
	}
	return uflu
}

// SetLikedAt sets the "likedAt" field.
func (uflu *UserForumLikeUpdate) SetLikedAt(t time.Time) *UserForumLikeUpdate {
	uflu.mutation.SetLikedAt(t)
	return uflu
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (uflu *UserForumLikeUpdate) SetNillableLikedAt(t *time.Time) *UserForumLikeUpdate {
	if t != nil {
		uflu.SetLikedAt(*t)
	}
	return uflu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uflu *UserForumLikeUpdate) SetUserID(id int) *UserForumLikeUpdate {
	uflu.mutation.SetUserID(id)
	return uflu
}

// SetUser sets the "user" edge to the User entity.
func (uflu *UserForumLikeUpdate) SetUser(u *User) *UserForumLikeUpdate {
	return uflu.SetUserID(u.ID)
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (uflu *UserForumLikeUpdate) SetForumID(id int) *UserForumLikeUpdate {
	uflu.mutation.SetForumID(id)
	return uflu
}

// SetForum sets the "forum" edge to the Forum entity.
func (uflu *UserForumLikeUpdate) SetForum(f *Forum) *UserForumLikeUpdate {
	return uflu.SetForumID(f.ID)
}

// Mutation returns the UserForumLikeMutation object of the builder.
func (uflu *UserForumLikeUpdate) Mutation() *UserForumLikeMutation {
	return uflu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uflu *UserForumLikeUpdate) ClearUser() *UserForumLikeUpdate {
	uflu.mutation.ClearUser()
	return uflu
}

// ClearForum clears the "forum" edge to the Forum entity.
func (uflu *UserForumLikeUpdate) ClearForum() *UserForumLikeUpdate {
	uflu.mutation.ClearForum()
	return uflu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uflu *UserForumLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uflu.sqlSave, uflu.mutation, uflu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uflu *UserForumLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := uflu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uflu *UserForumLikeUpdate) Exec(ctx context.Context) error {
	_, err := uflu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uflu *UserForumLikeUpdate) ExecX(ctx context.Context) {
	if err := uflu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uflu *UserForumLikeUpdate) check() error {
	if v, ok := uflu.mutation.GetType(); ok {
		if err := userforumlike.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserForumLike.type": %w`, err)}
		}
	}
	if _, ok := uflu.mutation.UserID(); uflu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserForumLike.user"`)
	}
	if _, ok := uflu.mutation.ForumID(); uflu.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserForumLike.forum"`)
	}
	return nil
}

func (uflu *UserForumLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uflu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userforumlike.Table, userforumlike.Columns, sqlgraph.NewFieldSpec(userforumlike.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(userforumlike.FieldForumId, field.TypeInt))
	if ps := uflu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uflu.mutation.GetType(); ok {
		_spec.SetField(userforumlike.FieldType, field.TypeEnum, value)
	}
	if value, ok := uflu.mutation.LikedAt(); ok {
		_spec.SetField(userforumlike.FieldLikedAt, field.TypeTime, value)
	}
	if uflu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.UserTable,
			Columns: []string{userforumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uflu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.UserTable,
			Columns: []string{userforumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uflu.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.ForumTable,
			Columns: []string{userforumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uflu.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.ForumTable,
			Columns: []string{userforumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uflu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userforumlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uflu.mutation.done = true
	return n, nil
}

// UserForumLikeUpdateOne is the builder for updating a single UserForumLike entity.
type UserForumLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserForumLikeMutation
}

// SetUserId sets the "userId" field.
func (ufluo *UserForumLikeUpdateOne) SetUserId(i int) *UserForumLikeUpdateOne {
	ufluo.mutation.SetUserId(i)
	return ufluo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (ufluo *UserForumLikeUpdateOne) SetNillableUserId(i *int) *UserForumLikeUpdateOne {
	if i != nil {
		ufluo.SetUserId(*i)
	}
	return ufluo
}

// SetForumId sets the "forumId" field.
func (ufluo *UserForumLikeUpdateOne) SetForumId(i int) *UserForumLikeUpdateOne {
	ufluo.mutation.SetForumId(i)
	return ufluo
}

// SetNillableForumId sets the "forumId" field if the given value is not nil.
func (ufluo *UserForumLikeUpdateOne) SetNillableForumId(i *int) *UserForumLikeUpdateOne {
	if i != nil {
		ufluo.SetForumId(*i)
	}
	return ufluo
}

// SetType sets the "type" field.
func (ufluo *UserForumLikeUpdateOne) SetType(u userforumlike.Type) *UserForumLikeUpdateOne {
	ufluo.mutation.SetType(u)
	return ufluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ufluo *UserForumLikeUpdateOne) SetNillableType(u *userforumlike.Type) *UserForumLikeUpdateOne {
	if u != nil {
		ufluo.SetType(*u)
	}
	return ufluo
}

// SetLikedAt sets the "likedAt" field.
func (ufluo *UserForumLikeUpdateOne) SetLikedAt(t time.Time) *UserForumLikeUpdateOne {
	ufluo.mutation.SetLikedAt(t)
	return ufluo
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (ufluo *UserForumLikeUpdateOne) SetNillableLikedAt(t *time.Time) *UserForumLikeUpdateOne {
	if t != nil {
		ufluo.SetLikedAt(*t)
	}
	return ufluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufluo *UserForumLikeUpdateOne) SetUserID(id int) *UserForumLikeUpdateOne {
	ufluo.mutation.SetUserID(id)
	return ufluo
}

// SetUser sets the "user" edge to the User entity.
func (ufluo *UserForumLikeUpdateOne) SetUser(u *User) *UserForumLikeUpdateOne {
	return ufluo.SetUserID(u.ID)
}

// SetForumID sets the "forum" edge to the Forum entity by ID.
func (ufluo *UserForumLikeUpdateOne) SetForumID(id int) *UserForumLikeUpdateOne {
	ufluo.mutation.SetForumID(id)
	return ufluo
}

// SetForum sets the "forum" edge to the Forum entity.
func (ufluo *UserForumLikeUpdateOne) SetForum(f *Forum) *UserForumLikeUpdateOne {
	return ufluo.SetForumID(f.ID)
}

// Mutation returns the UserForumLikeMutation object of the builder.
func (ufluo *UserForumLikeUpdateOne) Mutation() *UserForumLikeMutation {
	return ufluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ufluo *UserForumLikeUpdateOne) ClearUser() *UserForumLikeUpdateOne {
	ufluo.mutation.ClearUser()
	return ufluo
}

// ClearForum clears the "forum" edge to the Forum entity.
func (ufluo *UserForumLikeUpdateOne) ClearForum() *UserForumLikeUpdateOne {
	ufluo.mutation.ClearForum()
	return ufluo
}

// Where appends a list predicates to the UserForumLikeUpdate builder.
func (ufluo *UserForumLikeUpdateOne) Where(ps ...predicate.UserForumLike) *UserForumLikeUpdateOne {
	ufluo.mutation.Where(ps...)
	return ufluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufluo *UserForumLikeUpdateOne) Select(field string, fields ...string) *UserForumLikeUpdateOne {
	ufluo.fields = append([]string{field}, fields...)
	return ufluo
}

// Save executes the query and returns the updated UserForumLike entity.
func (ufluo *UserForumLikeUpdateOne) Save(ctx context.Context) (*UserForumLike, error) {
	return withHooks(ctx, ufluo.sqlSave, ufluo.mutation, ufluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufluo *UserForumLikeUpdateOne) SaveX(ctx context.Context) *UserForumLike {
	node, err := ufluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufluo *UserForumLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := ufluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufluo *UserForumLikeUpdateOne) ExecX(ctx context.Context) {
	if err := ufluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufluo *UserForumLikeUpdateOne) check() error {
	if v, ok := ufluo.mutation.GetType(); ok {
		if err := userforumlike.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserForumLike.type": %w`, err)}
		}
	}
	if _, ok := ufluo.mutation.UserID(); ufluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserForumLike.user"`)
	}
	if _, ok := ufluo.mutation.ForumID(); ufluo.mutation.ForumCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserForumLike.forum"`)
	}
	return nil
}

func (ufluo *UserForumLikeUpdateOne) sqlSave(ctx context.Context) (_node *UserForumLike, err error) {
	if err := ufluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userforumlike.Table, userforumlike.Columns, sqlgraph.NewFieldSpec(userforumlike.FieldUserId, field.TypeInt), sqlgraph.NewFieldSpec(userforumlike.FieldForumId, field.TypeInt))
	if id, ok := ufluo.mutation.UserId(); !ok {
		return nil, &ValidationError{Name: "userId", err: errors.New(`ent: missing "UserForumLike.userId" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ufluo.mutation.ForumId(); !ok {
		return nil, &ValidationError{Name: "forumId", err: errors.New(`ent: missing "UserForumLike.forumId" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ufluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userforumlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ufluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufluo.mutation.GetType(); ok {
		_spec.SetField(userforumlike.FieldType, field.TypeEnum, value)
	}
	if value, ok := ufluo.mutation.LikedAt(); ok {
		_spec.SetField(userforumlike.FieldLikedAt, field.TypeTime, value)
	}
	if ufluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.UserTable,
			Columns: []string{userforumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.UserTable,
			Columns: []string{userforumlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufluo.mutation.ForumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.ForumTable,
			Columns: []string{userforumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufluo.mutation.ForumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userforumlike.ForumTable,
			Columns: []string{userforumlike.ForumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserForumLike{config: ufluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userforumlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufluo.mutation.done = true
	return _node, nil
}
