// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentlike"
	"server/infrastructure/ent/usercommentsubscription"
	"server/infrastructure/ent/userforumlike"
	"server/infrastructure/ent/userforumsubscription"
	"server/infrastructure/ent/usertopiclike"
	"server/infrastructure/ent/usertopicsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                         *QueryContext
	order                       []user.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.User
	withForums                  *ForumQuery
	withTopics                  *TopicQuery
	withComments                *CommentQuery
	withLikedForums             *ForumQuery
	withLikedTopics             *TopicQuery
	withLikedComments           *CommentQuery
	withSubscribedForums        *ForumQuery
	withSubscribedTopics        *TopicQuery
	withSubscribedComments      *CommentQuery
	withUserForumLike           *UserForumLikeQuery
	withUserTopicLike           *UserTopicLikeQuery
	withUserCommentLike         *UserCommentLikeQuery
	withUserForumSubscription   *UserForumSubscriptionQuery
	withUserTopicSubscription   *UserTopicSubscriptionQuery
	withUserCommentSubscription *UserCommentSubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryForums chains the current query on the "forums" edge.
func (uq *UserQuery) QueryForums() *ForumQuery {
	query := (&ForumClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ForumsTable, user.ForumsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTopics chains the current query on the "topics" edge.
func (uq *UserQuery) QueryTopics() *TopicQuery {
	query := (&TopicClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TopicsTable, user.TopicsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (uq *UserQuery) QueryComments() *CommentQuery {
	query := (&CommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CommentsTable, user.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedForums chains the current query on the "liked_forums" edge.
func (uq *UserQuery) QueryLikedForums() *ForumQuery {
	query := (&ForumClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedForumsTable, user.LikedForumsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedTopics chains the current query on the "liked_topics" edge.
func (uq *UserQuery) QueryLikedTopics() *TopicQuery {
	query := (&TopicClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedTopicsTable, user.LikedTopicsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedComments chains the current query on the "liked_comments" edge.
func (uq *UserQuery) QueryLikedComments() *CommentQuery {
	query := (&CommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedCommentsTable, user.LikedCommentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribedForums chains the current query on the "subscribed_forums" edge.
func (uq *UserQuery) QuerySubscribedForums() *ForumQuery {
	query := (&ForumClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedForumsTable, user.SubscribedForumsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribedTopics chains the current query on the "subscribed_topics" edge.
func (uq *UserQuery) QuerySubscribedTopics() *TopicQuery {
	query := (&TopicClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedTopicsTable, user.SubscribedTopicsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribedComments chains the current query on the "subscribed_comments" edge.
func (uq *UserQuery) QuerySubscribedComments() *CommentQuery {
	query := (&CommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedCommentsTable, user.SubscribedCommentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserForumLike chains the current query on the "user_forum_like" edge.
func (uq *UserQuery) QueryUserForumLike() *UserForumLikeQuery {
	query := (&UserForumLikeClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userforumlike.Table, userforumlike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserForumLikeTable, user.UserForumLikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserTopicLike chains the current query on the "user_topic_like" edge.
func (uq *UserQuery) QueryUserTopicLike() *UserTopicLikeQuery {
	query := (&UserTopicLikeClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usertopiclike.Table, usertopiclike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserTopicLikeTable, user.UserTopicLikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserCommentLike chains the current query on the "user_comment_like" edge.
func (uq *UserQuery) QueryUserCommentLike() *UserCommentLikeQuery {
	query := (&UserCommentLikeClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usercommentlike.Table, usercommentlike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserCommentLikeTable, user.UserCommentLikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserForumSubscription chains the current query on the "user_forum_subscription" edge.
func (uq *UserQuery) QueryUserForumSubscription() *UserForumSubscriptionQuery {
	query := (&UserForumSubscriptionClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userforumsubscription.Table, userforumsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserForumSubscriptionTable, user.UserForumSubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserTopicSubscription chains the current query on the "user_topic_subscription" edge.
func (uq *UserQuery) QueryUserTopicSubscription() *UserTopicSubscriptionQuery {
	query := (&UserTopicSubscriptionClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usertopicsubscription.Table, usertopicsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserTopicSubscriptionTable, user.UserTopicSubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserCommentSubscription chains the current query on the "user_comment_subscription" edge.
func (uq *UserQuery) QueryUserCommentSubscription() *UserCommentSubscriptionQuery {
	query := (&UserCommentSubscriptionClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usercommentsubscription.Table, usercommentsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserCommentSubscriptionTable, user.UserCommentSubscriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                      uq.config,
		ctx:                         uq.ctx.Clone(),
		order:                       append([]user.OrderOption{}, uq.order...),
		inters:                      append([]Interceptor{}, uq.inters...),
		predicates:                  append([]predicate.User{}, uq.predicates...),
		withForums:                  uq.withForums.Clone(),
		withTopics:                  uq.withTopics.Clone(),
		withComments:                uq.withComments.Clone(),
		withLikedForums:             uq.withLikedForums.Clone(),
		withLikedTopics:             uq.withLikedTopics.Clone(),
		withLikedComments:           uq.withLikedComments.Clone(),
		withSubscribedForums:        uq.withSubscribedForums.Clone(),
		withSubscribedTopics:        uq.withSubscribedTopics.Clone(),
		withSubscribedComments:      uq.withSubscribedComments.Clone(),
		withUserForumLike:           uq.withUserForumLike.Clone(),
		withUserTopicLike:           uq.withUserTopicLike.Clone(),
		withUserCommentLike:         uq.withUserCommentLike.Clone(),
		withUserForumSubscription:   uq.withUserForumSubscription.Clone(),
		withUserTopicSubscription:   uq.withUserTopicSubscription.Clone(),
		withUserCommentSubscription: uq.withUserCommentSubscription.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithForums tells the query-builder to eager-load the nodes that are connected to
// the "forums" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithForums(opts ...func(*ForumQuery)) *UserQuery {
	query := (&ForumClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withForums = query
	return uq
}

// WithTopics tells the query-builder to eager-load the nodes that are connected to
// the "topics" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTopics(opts ...func(*TopicQuery)) *UserQuery {
	query := (&TopicClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTopics = query
	return uq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithComments(opts ...func(*CommentQuery)) *UserQuery {
	query := (&CommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withComments = query
	return uq
}

// WithLikedForums tells the query-builder to eager-load the nodes that are connected to
// the "liked_forums" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLikedForums(opts ...func(*ForumQuery)) *UserQuery {
	query := (&ForumClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLikedForums = query
	return uq
}

// WithLikedTopics tells the query-builder to eager-load the nodes that are connected to
// the "liked_topics" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLikedTopics(opts ...func(*TopicQuery)) *UserQuery {
	query := (&TopicClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLikedTopics = query
	return uq
}

// WithLikedComments tells the query-builder to eager-load the nodes that are connected to
// the "liked_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLikedComments(opts ...func(*CommentQuery)) *UserQuery {
	query := (&CommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLikedComments = query
	return uq
}

// WithSubscribedForums tells the query-builder to eager-load the nodes that are connected to
// the "subscribed_forums" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSubscribedForums(opts ...func(*ForumQuery)) *UserQuery {
	query := (&ForumClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSubscribedForums = query
	return uq
}

// WithSubscribedTopics tells the query-builder to eager-load the nodes that are connected to
// the "subscribed_topics" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSubscribedTopics(opts ...func(*TopicQuery)) *UserQuery {
	query := (&TopicClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSubscribedTopics = query
	return uq
}

// WithSubscribedComments tells the query-builder to eager-load the nodes that are connected to
// the "subscribed_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSubscribedComments(opts ...func(*CommentQuery)) *UserQuery {
	query := (&CommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSubscribedComments = query
	return uq
}

// WithUserForumLike tells the query-builder to eager-load the nodes that are connected to
// the "user_forum_like" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserForumLike(opts ...func(*UserForumLikeQuery)) *UserQuery {
	query := (&UserForumLikeClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserForumLike = query
	return uq
}

// WithUserTopicLike tells the query-builder to eager-load the nodes that are connected to
// the "user_topic_like" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserTopicLike(opts ...func(*UserTopicLikeQuery)) *UserQuery {
	query := (&UserTopicLikeClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserTopicLike = query
	return uq
}

// WithUserCommentLike tells the query-builder to eager-load the nodes that are connected to
// the "user_comment_like" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserCommentLike(opts ...func(*UserCommentLikeQuery)) *UserQuery {
	query := (&UserCommentLikeClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserCommentLike = query
	return uq
}

// WithUserForumSubscription tells the query-builder to eager-load the nodes that are connected to
// the "user_forum_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserForumSubscription(opts ...func(*UserForumSubscriptionQuery)) *UserQuery {
	query := (&UserForumSubscriptionClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserForumSubscription = query
	return uq
}

// WithUserTopicSubscription tells the query-builder to eager-load the nodes that are connected to
// the "user_topic_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserTopicSubscription(opts ...func(*UserTopicSubscriptionQuery)) *UserQuery {
	query := (&UserTopicSubscriptionClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserTopicSubscription = query
	return uq
}

// WithUserCommentSubscription tells the query-builder to eager-load the nodes that are connected to
// the "user_comment_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserCommentSubscription(opts ...func(*UserCommentSubscriptionQuery)) *UserQuery {
	query := (&UserCommentSubscriptionClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserCommentSubscription = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserName string `json:"userName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldUserName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserName string `json:"userName,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldUserName).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [15]bool{
			uq.withForums != nil,
			uq.withTopics != nil,
			uq.withComments != nil,
			uq.withLikedForums != nil,
			uq.withLikedTopics != nil,
			uq.withLikedComments != nil,
			uq.withSubscribedForums != nil,
			uq.withSubscribedTopics != nil,
			uq.withSubscribedComments != nil,
			uq.withUserForumLike != nil,
			uq.withUserTopicLike != nil,
			uq.withUserCommentLike != nil,
			uq.withUserForumSubscription != nil,
			uq.withUserTopicSubscription != nil,
			uq.withUserCommentSubscription != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withForums; query != nil {
		if err := uq.loadForums(ctx, query, nodes,
			func(n *User) { n.Edges.Forums = []*Forum{} },
			func(n *User, e *Forum) { n.Edges.Forums = append(n.Edges.Forums, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTopics; query != nil {
		if err := uq.loadTopics(ctx, query, nodes,
			func(n *User) { n.Edges.Topics = []*Topic{} },
			func(n *User, e *Topic) { n.Edges.Topics = append(n.Edges.Topics, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withComments; query != nil {
		if err := uq.loadComments(ctx, query, nodes,
			func(n *User) { n.Edges.Comments = []*Comment{} },
			func(n *User, e *Comment) { n.Edges.Comments = append(n.Edges.Comments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLikedForums; query != nil {
		if err := uq.loadLikedForums(ctx, query, nodes,
			func(n *User) { n.Edges.LikedForums = []*Forum{} },
			func(n *User, e *Forum) { n.Edges.LikedForums = append(n.Edges.LikedForums, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLikedTopics; query != nil {
		if err := uq.loadLikedTopics(ctx, query, nodes,
			func(n *User) { n.Edges.LikedTopics = []*Topic{} },
			func(n *User, e *Topic) { n.Edges.LikedTopics = append(n.Edges.LikedTopics, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLikedComments; query != nil {
		if err := uq.loadLikedComments(ctx, query, nodes,
			func(n *User) { n.Edges.LikedComments = []*Comment{} },
			func(n *User, e *Comment) { n.Edges.LikedComments = append(n.Edges.LikedComments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSubscribedForums; query != nil {
		if err := uq.loadSubscribedForums(ctx, query, nodes,
			func(n *User) { n.Edges.SubscribedForums = []*Forum{} },
			func(n *User, e *Forum) { n.Edges.SubscribedForums = append(n.Edges.SubscribedForums, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSubscribedTopics; query != nil {
		if err := uq.loadSubscribedTopics(ctx, query, nodes,
			func(n *User) { n.Edges.SubscribedTopics = []*Topic{} },
			func(n *User, e *Topic) { n.Edges.SubscribedTopics = append(n.Edges.SubscribedTopics, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSubscribedComments; query != nil {
		if err := uq.loadSubscribedComments(ctx, query, nodes,
			func(n *User) { n.Edges.SubscribedComments = []*Comment{} },
			func(n *User, e *Comment) { n.Edges.SubscribedComments = append(n.Edges.SubscribedComments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserForumLike; query != nil {
		if err := uq.loadUserForumLike(ctx, query, nodes,
			func(n *User) { n.Edges.UserForumLike = []*UserForumLike{} },
			func(n *User, e *UserForumLike) { n.Edges.UserForumLike = append(n.Edges.UserForumLike, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserTopicLike; query != nil {
		if err := uq.loadUserTopicLike(ctx, query, nodes,
			func(n *User) { n.Edges.UserTopicLike = []*UserTopicLike{} },
			func(n *User, e *UserTopicLike) { n.Edges.UserTopicLike = append(n.Edges.UserTopicLike, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserCommentLike; query != nil {
		if err := uq.loadUserCommentLike(ctx, query, nodes,
			func(n *User) { n.Edges.UserCommentLike = []*UserCommentLike{} },
			func(n *User, e *UserCommentLike) { n.Edges.UserCommentLike = append(n.Edges.UserCommentLike, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserForumSubscription; query != nil {
		if err := uq.loadUserForumSubscription(ctx, query, nodes,
			func(n *User) { n.Edges.UserForumSubscription = []*UserForumSubscription{} },
			func(n *User, e *UserForumSubscription) {
				n.Edges.UserForumSubscription = append(n.Edges.UserForumSubscription, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserTopicSubscription; query != nil {
		if err := uq.loadUserTopicSubscription(ctx, query, nodes,
			func(n *User) { n.Edges.UserTopicSubscription = []*UserTopicSubscription{} },
			func(n *User, e *UserTopicSubscription) {
				n.Edges.UserTopicSubscription = append(n.Edges.UserTopicSubscription, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserCommentSubscription; query != nil {
		if err := uq.loadUserCommentSubscription(ctx, query, nodes,
			func(n *User) { n.Edges.UserCommentSubscription = []*UserCommentSubscription{} },
			func(n *User, e *UserCommentSubscription) {
				n.Edges.UserCommentSubscription = append(n.Edges.UserCommentSubscription, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadForums(ctx context.Context, query *ForumQuery, nodes []*User, init func(*User), assign func(*User, *Forum)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Forum(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ForumsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_forums
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_forums" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_forums" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTopics(ctx context.Context, query *TopicQuery, nodes []*User, init func(*User), assign func(*User, *Topic)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(topic.FieldUserId)
	}
	query.Where(predicate.Topic(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TopicsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadComments(ctx context.Context, query *CommentQuery, nodes []*User, init func(*User), assign func(*User, *Comment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(comment.FieldUserId)
	}
	query.Where(predicate.Comment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLikedForums(ctx context.Context, query *ForumQuery, nodes []*User, init func(*User), assign func(*User, *Forum)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.LikedForumsTable)
		s.Join(joinT).On(s.C(forum.FieldID), joinT.C(user.LikedForumsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.LikedForumsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.LikedForumsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Forum](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "liked_forums" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadLikedTopics(ctx context.Context, query *TopicQuery, nodes []*User, init func(*User), assign func(*User, *Topic)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.LikedTopicsTable)
		s.Join(joinT).On(s.C(topic.FieldID), joinT.C(user.LikedTopicsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.LikedTopicsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.LikedTopicsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Topic](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "liked_topics" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadLikedComments(ctx context.Context, query *CommentQuery, nodes []*User, init func(*User), assign func(*User, *Comment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.LikedCommentsTable)
		s.Join(joinT).On(s.C(comment.FieldID), joinT.C(user.LikedCommentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.LikedCommentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.LikedCommentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Comment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "liked_comments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadSubscribedForums(ctx context.Context, query *ForumQuery, nodes []*User, init func(*User), assign func(*User, *Forum)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.SubscribedForumsTable)
		s.Join(joinT).On(s.C(forum.FieldID), joinT.C(user.SubscribedForumsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.SubscribedForumsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.SubscribedForumsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Forum](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscribed_forums" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadSubscribedTopics(ctx context.Context, query *TopicQuery, nodes []*User, init func(*User), assign func(*User, *Topic)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.SubscribedTopicsTable)
		s.Join(joinT).On(s.C(topic.FieldID), joinT.C(user.SubscribedTopicsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.SubscribedTopicsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.SubscribedTopicsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Topic](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscribed_topics" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadSubscribedComments(ctx context.Context, query *CommentQuery, nodes []*User, init func(*User), assign func(*User, *Comment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*User)
	nids := make(map[int]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.SubscribedCommentsTable)
		s.Join(joinT).On(s.C(comment.FieldID), joinT.C(user.SubscribedCommentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.SubscribedCommentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.SubscribedCommentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Comment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscribed_comments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadUserForumLike(ctx context.Context, query *UserForumLikeQuery, nodes []*User, init func(*User), assign func(*User, *UserForumLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(userforumlike.FieldUserId)
	}
	query.Where(predicate.UserForumLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserForumLikeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserTopicLike(ctx context.Context, query *UserTopicLikeQuery, nodes []*User, init func(*User), assign func(*User, *UserTopicLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usertopiclike.FieldUserId)
	}
	query.Where(predicate.UserTopicLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserTopicLikeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserCommentLike(ctx context.Context, query *UserCommentLikeQuery, nodes []*User, init func(*User), assign func(*User, *UserCommentLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usercommentlike.FieldUserId)
	}
	query.Where(predicate.UserCommentLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserCommentLikeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserForumSubscription(ctx context.Context, query *UserForumSubscriptionQuery, nodes []*User, init func(*User), assign func(*User, *UserForumSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(userforumsubscription.FieldUserId)
	}
	query.Where(predicate.UserForumSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserForumSubscriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserTopicSubscription(ctx context.Context, query *UserTopicSubscriptionQuery, nodes []*User, init func(*User), assign func(*User, *UserTopicSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usertopicsubscription.FieldUserId)
	}
	query.Where(predicate.UserTopicSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserTopicSubscriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserCommentSubscription(ctx context.Context, query *UserCommentSubscriptionQuery, nodes []*User, init func(*User), assign func(*User, *UserCommentSubscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usercommentsubscription.FieldUserId)
	}
	query.Where(predicate.UserCommentSubscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserCommentSubscriptionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "userId" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
