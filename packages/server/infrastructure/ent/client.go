// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"server/infrastructure/ent/migrate"

	"server/infrastructure/ent/adminuser"
	"server/infrastructure/ent/comment"
	"server/infrastructure/ent/commentattachment"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentlike"
	"server/infrastructure/ent/usercommentsubscription"
	"server/infrastructure/ent/userforumlike"
	"server/infrastructure/ent/userforumsubscription"
	"server/infrastructure/ent/usertopiclike"
	"server/infrastructure/ent/usertopicsubscription"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminUser is the client for interacting with the AdminUser builders.
	AdminUser *AdminUserClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// CommentAttachment is the client for interacting with the CommentAttachment builders.
	CommentAttachment *CommentAttachmentClient
	// Forum is the client for interacting with the Forum builders.
	Forum *ForumClient
	// Topic is the client for interacting with the Topic builders.
	Topic *TopicClient
	// TopicTag is the client for interacting with the TopicTag builders.
	TopicTag *TopicTagClient
	// TopicTagging is the client for interacting with the TopicTagging builders.
	TopicTagging *TopicTaggingClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserCommentLike is the client for interacting with the UserCommentLike builders.
	UserCommentLike *UserCommentLikeClient
	// UserCommentSubscription is the client for interacting with the UserCommentSubscription builders.
	UserCommentSubscription *UserCommentSubscriptionClient
	// UserForumLike is the client for interacting with the UserForumLike builders.
	UserForumLike *UserForumLikeClient
	// UserForumSubscription is the client for interacting with the UserForumSubscription builders.
	UserForumSubscription *UserForumSubscriptionClient
	// UserTopicLike is the client for interacting with the UserTopicLike builders.
	UserTopicLike *UserTopicLikeClient
	// UserTopicSubscription is the client for interacting with the UserTopicSubscription builders.
	UserTopicSubscription *UserTopicSubscriptionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminUser = NewAdminUserClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.CommentAttachment = NewCommentAttachmentClient(c.config)
	c.Forum = NewForumClient(c.config)
	c.Topic = NewTopicClient(c.config)
	c.TopicTag = NewTopicTagClient(c.config)
	c.TopicTagging = NewTopicTaggingClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserCommentLike = NewUserCommentLikeClient(c.config)
	c.UserCommentSubscription = NewUserCommentSubscriptionClient(c.config)
	c.UserForumLike = NewUserForumLikeClient(c.config)
	c.UserForumSubscription = NewUserForumSubscriptionClient(c.config)
	c.UserTopicLike = NewUserTopicLikeClient(c.config)
	c.UserTopicSubscription = NewUserTopicSubscriptionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AdminUser:               NewAdminUserClient(cfg),
		Comment:                 NewCommentClient(cfg),
		CommentAttachment:       NewCommentAttachmentClient(cfg),
		Forum:                   NewForumClient(cfg),
		Topic:                   NewTopicClient(cfg),
		TopicTag:                NewTopicTagClient(cfg),
		TopicTagging:            NewTopicTaggingClient(cfg),
		User:                    NewUserClient(cfg),
		UserCommentLike:         NewUserCommentLikeClient(cfg),
		UserCommentSubscription: NewUserCommentSubscriptionClient(cfg),
		UserForumLike:           NewUserForumLikeClient(cfg),
		UserForumSubscription:   NewUserForumSubscriptionClient(cfg),
		UserTopicLike:           NewUserTopicLikeClient(cfg),
		UserTopicSubscription:   NewUserTopicSubscriptionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		AdminUser:               NewAdminUserClient(cfg),
		Comment:                 NewCommentClient(cfg),
		CommentAttachment:       NewCommentAttachmentClient(cfg),
		Forum:                   NewForumClient(cfg),
		Topic:                   NewTopicClient(cfg),
		TopicTag:                NewTopicTagClient(cfg),
		TopicTagging:            NewTopicTaggingClient(cfg),
		User:                    NewUserClient(cfg),
		UserCommentLike:         NewUserCommentLikeClient(cfg),
		UserCommentSubscription: NewUserCommentSubscriptionClient(cfg),
		UserForumLike:           NewUserForumLikeClient(cfg),
		UserForumSubscription:   NewUserForumSubscriptionClient(cfg),
		UserTopicLike:           NewUserTopicLikeClient(cfg),
		UserTopicSubscription:   NewUserTopicSubscriptionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminUser.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AdminUser, c.Comment, c.CommentAttachment, c.Forum, c.Topic, c.TopicTag,
		c.TopicTagging, c.User, c.UserCommentLike, c.UserCommentSubscription,
		c.UserForumLike, c.UserForumSubscription, c.UserTopicLike,
		c.UserTopicSubscription,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AdminUser, c.Comment, c.CommentAttachment, c.Forum, c.Topic, c.TopicTag,
		c.TopicTagging, c.User, c.UserCommentLike, c.UserCommentSubscription,
		c.UserForumLike, c.UserForumSubscription, c.UserTopicLike,
		c.UserTopicSubscription,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminUserMutation:
		return c.AdminUser.mutate(ctx, m)
	case *CommentMutation:
		return c.Comment.mutate(ctx, m)
	case *CommentAttachmentMutation:
		return c.CommentAttachment.mutate(ctx, m)
	case *ForumMutation:
		return c.Forum.mutate(ctx, m)
	case *TopicMutation:
		return c.Topic.mutate(ctx, m)
	case *TopicTagMutation:
		return c.TopicTag.mutate(ctx, m)
	case *TopicTaggingMutation:
		return c.TopicTagging.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserCommentLikeMutation:
		return c.UserCommentLike.mutate(ctx, m)
	case *UserCommentSubscriptionMutation:
		return c.UserCommentSubscription.mutate(ctx, m)
	case *UserForumLikeMutation:
		return c.UserForumLike.mutate(ctx, m)
	case *UserForumSubscriptionMutation:
		return c.UserForumSubscription.mutate(ctx, m)
	case *UserTopicLikeMutation:
		return c.UserTopicLike.mutate(ctx, m)
	case *UserTopicSubscriptionMutation:
		return c.UserTopicSubscription.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminUserClient is a client for the AdminUser schema.
type AdminUserClient struct {
	config
}

// NewAdminUserClient returns a client for the AdminUser from the given config.
func NewAdminUserClient(c config) *AdminUserClient {
	return &AdminUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminuser.Hooks(f(g(h())))`.
func (c *AdminUserClient) Use(hooks ...Hook) {
	c.hooks.AdminUser = append(c.hooks.AdminUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminuser.Intercept(f(g(h())))`.
func (c *AdminUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminUser = append(c.inters.AdminUser, interceptors...)
}

// Create returns a builder for creating a AdminUser entity.
func (c *AdminUserClient) Create() *AdminUserCreate {
	mutation := newAdminUserMutation(c.config, OpCreate)
	return &AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminUser entities.
func (c *AdminUserClient) CreateBulk(builders ...*AdminUserCreate) *AdminUserCreateBulk {
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminUserClient) MapCreateBulk(slice any, setFunc func(*AdminUserCreate, int)) *AdminUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminUserCreateBulk{err: fmt.Errorf("calling to AdminUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminUser.
func (c *AdminUserClient) Update() *AdminUserUpdate {
	mutation := newAdminUserMutation(c.config, OpUpdate)
	return &AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminUserClient) UpdateOne(au *AdminUser) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUser(au))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminUserClient) UpdateOneID(id int) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUserID(id))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminUser.
func (c *AdminUserClient) Delete() *AdminUserDelete {
	mutation := newAdminUserMutation(c.config, OpDelete)
	return &AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminUserClient) DeleteOne(au *AdminUser) *AdminUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminUserClient) DeleteOneID(id int) *AdminUserDeleteOne {
	builder := c.Delete().Where(adminuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminUserDeleteOne{builder}
}

// Query returns a query builder for AdminUser.
func (c *AdminUserClient) Query() *AdminUserQuery {
	return &AdminUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminUser},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminUser entity by its id.
func (c *AdminUserClient) Get(ctx context.Context, id int) (*AdminUser, error) {
	return c.Query().Where(adminuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminUserClient) GetX(ctx context.Context, id int) *AdminUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminUserClient) Hooks() []Hook {
	return c.hooks.AdminUser
}

// Interceptors returns the client interceptors.
func (c *AdminUserClient) Interceptors() []Interceptor {
	return c.inters.AdminUser
}

func (c *AdminUserClient) mutate(ctx context.Context, m *AdminUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminUser mutation op: %q", m.Op())
	}
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `comment.Intercept(f(g(h())))`.
func (c *CommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Comment = append(c.inters.Comment, interceptors...)
}

// Create returns a builder for creating a Comment entity.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentClient) MapCreateBulk(slice any, setFunc func(*CommentCreate, int)) *CommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentCreateBulk{err: fmt.Errorf("calling to CommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id int) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentClient) DeleteOneID(id int) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComment},
		inters: c.Interceptors(),
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id int) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id int) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTopic queries the topic edge of a Comment.
func (c *CommentClient) QueryTopic(co *Comment) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.TopicTable, comment.TopicColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthor queries the author edge of a Comment.
func (c *CommentClient) QueryAuthor(co *Comment) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.AuthorTable, comment.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Comment.
func (c *CommentClient) QueryParent(co *Comment) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.ParentTable, comment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a Comment.
func (c *CommentClient) QueryReplies(co *Comment) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comment.RepliesTable, comment.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommentAttachments queries the comment_attachments edge of a Comment.
func (c *CommentClient) QueryCommentAttachments(co *Comment) *CommentAttachmentQuery {
	query := (&CommentAttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(commentattachment.Table, commentattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comment.CommentAttachmentsTable, comment.CommentAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedUsers queries the liked_users edge of a Comment.
func (c *CommentClient) QueryLikedUsers(co *Comment) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, comment.LikedUsersTable, comment.LikedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedUsers queries the subscribed_users edge of a Comment.
func (c *CommentClient) QuerySubscribedUsers(co *Comment) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, comment.SubscribedUsersTable, comment.SubscribedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCommentLike queries the user_comment_like edge of a Comment.
func (c *CommentClient) QueryUserCommentLike(co *Comment) *UserCommentLikeQuery {
	query := (&UserCommentLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(usercommentlike.Table, usercommentlike.CommentColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, comment.UserCommentLikeTable, comment.UserCommentLikeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCommentSubscription queries the user_comment_subscription edge of a Comment.
func (c *CommentClient) QueryUserCommentSubscription(co *Comment) *UserCommentSubscriptionQuery {
	query := (&UserCommentSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(usercommentsubscription.Table, usercommentsubscription.CommentColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, comment.UserCommentSubscriptionTable, comment.UserCommentSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	return c.hooks.Comment
}

// Interceptors returns the client interceptors.
func (c *CommentClient) Interceptors() []Interceptor {
	return c.inters.Comment
}

func (c *CommentClient) mutate(ctx context.Context, m *CommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Comment mutation op: %q", m.Op())
	}
}

// CommentAttachmentClient is a client for the CommentAttachment schema.
type CommentAttachmentClient struct {
	config
}

// NewCommentAttachmentClient returns a client for the CommentAttachment from the given config.
func NewCommentAttachmentClient(c config) *CommentAttachmentClient {
	return &CommentAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentattachment.Hooks(f(g(h())))`.
func (c *CommentAttachmentClient) Use(hooks ...Hook) {
	c.hooks.CommentAttachment = append(c.hooks.CommentAttachment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commentattachment.Intercept(f(g(h())))`.
func (c *CommentAttachmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommentAttachment = append(c.inters.CommentAttachment, interceptors...)
}

// Create returns a builder for creating a CommentAttachment entity.
func (c *CommentAttachmentClient) Create() *CommentAttachmentCreate {
	mutation := newCommentAttachmentMutation(c.config, OpCreate)
	return &CommentAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentAttachment entities.
func (c *CommentAttachmentClient) CreateBulk(builders ...*CommentAttachmentCreate) *CommentAttachmentCreateBulk {
	return &CommentAttachmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentAttachmentClient) MapCreateBulk(slice any, setFunc func(*CommentAttachmentCreate, int)) *CommentAttachmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentAttachmentCreateBulk{err: fmt.Errorf("calling to CommentAttachmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentAttachmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentAttachment.
func (c *CommentAttachmentClient) Update() *CommentAttachmentUpdate {
	mutation := newCommentAttachmentMutation(c.config, OpUpdate)
	return &CommentAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentAttachmentClient) UpdateOne(ca *CommentAttachment) *CommentAttachmentUpdateOne {
	mutation := newCommentAttachmentMutation(c.config, OpUpdateOne, withCommentAttachment(ca))
	return &CommentAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentAttachmentClient) UpdateOneID(id int) *CommentAttachmentUpdateOne {
	mutation := newCommentAttachmentMutation(c.config, OpUpdateOne, withCommentAttachmentID(id))
	return &CommentAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentAttachment.
func (c *CommentAttachmentClient) Delete() *CommentAttachmentDelete {
	mutation := newCommentAttachmentMutation(c.config, OpDelete)
	return &CommentAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentAttachmentClient) DeleteOne(ca *CommentAttachment) *CommentAttachmentDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentAttachmentClient) DeleteOneID(id int) *CommentAttachmentDeleteOne {
	builder := c.Delete().Where(commentattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentAttachmentDeleteOne{builder}
}

// Query returns a query builder for CommentAttachment.
func (c *CommentAttachmentClient) Query() *CommentAttachmentQuery {
	return &CommentAttachmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommentAttachment},
		inters: c.Interceptors(),
	}
}

// Get returns a CommentAttachment entity by its id.
func (c *CommentAttachmentClient) Get(ctx context.Context, id int) (*CommentAttachment, error) {
	return c.Query().Where(commentattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentAttachmentClient) GetX(ctx context.Context, id int) *CommentAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComment queries the comment edge of a CommentAttachment.
func (c *CommentAttachmentClient) QueryComment(ca *CommentAttachment) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commentattachment.Table, commentattachment.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commentattachment.CommentTable, commentattachment.CommentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentAttachmentClient) Hooks() []Hook {
	return c.hooks.CommentAttachment
}

// Interceptors returns the client interceptors.
func (c *CommentAttachmentClient) Interceptors() []Interceptor {
	return c.inters.CommentAttachment
}

func (c *CommentAttachmentClient) mutate(ctx context.Context, m *CommentAttachmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommentAttachment mutation op: %q", m.Op())
	}
}

// ForumClient is a client for the Forum schema.
type ForumClient struct {
	config
}

// NewForumClient returns a client for the Forum from the given config.
func NewForumClient(c config) *ForumClient {
	return &ForumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `forum.Hooks(f(g(h())))`.
func (c *ForumClient) Use(hooks ...Hook) {
	c.hooks.Forum = append(c.hooks.Forum, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `forum.Intercept(f(g(h())))`.
func (c *ForumClient) Intercept(interceptors ...Interceptor) {
	c.inters.Forum = append(c.inters.Forum, interceptors...)
}

// Create returns a builder for creating a Forum entity.
func (c *ForumClient) Create() *ForumCreate {
	mutation := newForumMutation(c.config, OpCreate)
	return &ForumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Forum entities.
func (c *ForumClient) CreateBulk(builders ...*ForumCreate) *ForumCreateBulk {
	return &ForumCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ForumClient) MapCreateBulk(slice any, setFunc func(*ForumCreate, int)) *ForumCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ForumCreateBulk{err: fmt.Errorf("calling to ForumClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ForumCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ForumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Forum.
func (c *ForumClient) Update() *ForumUpdate {
	mutation := newForumMutation(c.config, OpUpdate)
	return &ForumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ForumClient) UpdateOne(f *Forum) *ForumUpdateOne {
	mutation := newForumMutation(c.config, OpUpdateOne, withForum(f))
	return &ForumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ForumClient) UpdateOneID(id int) *ForumUpdateOne {
	mutation := newForumMutation(c.config, OpUpdateOne, withForumID(id))
	return &ForumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Forum.
func (c *ForumClient) Delete() *ForumDelete {
	mutation := newForumMutation(c.config, OpDelete)
	return &ForumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ForumClient) DeleteOne(f *Forum) *ForumDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ForumClient) DeleteOneID(id int) *ForumDeleteOne {
	builder := c.Delete().Where(forum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ForumDeleteOne{builder}
}

// Query returns a query builder for Forum.
func (c *ForumClient) Query() *ForumQuery {
	return &ForumQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeForum},
		inters: c.Interceptors(),
	}
}

// Get returns a Forum entity by its id.
func (c *ForumClient) Get(ctx context.Context, id int) (*Forum, error) {
	return c.Query().Where(forum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ForumClient) GetX(ctx context.Context, id int) *Forum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLikedUsers queries the liked_users edge of a Forum.
func (c *ForumClient) QueryLikedUsers(f *Forum) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forum.Table, forum.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, forum.LikedUsersTable, forum.LikedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedUsers queries the subscribed_users edge of a Forum.
func (c *ForumClient) QuerySubscribedUsers(f *Forum) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forum.Table, forum.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, forum.SubscribedUsersTable, forum.SubscribedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopics queries the topics edge of a Forum.
func (c *ForumClient) QueryTopics(f *Forum) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forum.Table, forum.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, forum.TopicsTable, forum.TopicsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserForumLike queries the user_forum_like edge of a Forum.
func (c *ForumClient) QueryUserForumLike(f *Forum) *UserForumSubscriptionQuery {
	query := (&UserForumSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forum.Table, forum.FieldID, id),
			sqlgraph.To(userforumsubscription.Table, userforumsubscription.ForumColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, forum.UserForumLikeTable, forum.UserForumLikeColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserForumSubscription queries the user_forum_subscription edge of a Forum.
func (c *ForumClient) QueryUserForumSubscription(f *Forum) *UserForumLikeQuery {
	query := (&UserForumLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(forum.Table, forum.FieldID, id),
			sqlgraph.To(userforumlike.Table, userforumlike.ForumColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, forum.UserForumSubscriptionTable, forum.UserForumSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ForumClient) Hooks() []Hook {
	return c.hooks.Forum
}

// Interceptors returns the client interceptors.
func (c *ForumClient) Interceptors() []Interceptor {
	return c.inters.Forum
}

func (c *ForumClient) mutate(ctx context.Context, m *ForumMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ForumCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ForumUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ForumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ForumDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Forum mutation op: %q", m.Op())
	}
}

// TopicClient is a client for the Topic schema.
type TopicClient struct {
	config
}

// NewTopicClient returns a client for the Topic from the given config.
func NewTopicClient(c config) *TopicClient {
	return &TopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topic.Hooks(f(g(h())))`.
func (c *TopicClient) Use(hooks ...Hook) {
	c.hooks.Topic = append(c.hooks.Topic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `topic.Intercept(f(g(h())))`.
func (c *TopicClient) Intercept(interceptors ...Interceptor) {
	c.inters.Topic = append(c.inters.Topic, interceptors...)
}

// Create returns a builder for creating a Topic entity.
func (c *TopicClient) Create() *TopicCreate {
	mutation := newTopicMutation(c.config, OpCreate)
	return &TopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Topic entities.
func (c *TopicClient) CreateBulk(builders ...*TopicCreate) *TopicCreateBulk {
	return &TopicCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TopicClient) MapCreateBulk(slice any, setFunc func(*TopicCreate, int)) *TopicCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TopicCreateBulk{err: fmt.Errorf("calling to TopicClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TopicCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TopicCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Topic.
func (c *TopicClient) Update() *TopicUpdate {
	mutation := newTopicMutation(c.config, OpUpdate)
	return &TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicClient) UpdateOne(t *Topic) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopic(t))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicClient) UpdateOneID(id int) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopicID(id))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Topic.
func (c *TopicClient) Delete() *TopicDelete {
	mutation := newTopicMutation(c.config, OpDelete)
	return &TopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopicClient) DeleteOne(t *Topic) *TopicDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TopicClient) DeleteOneID(id int) *TopicDeleteOne {
	builder := c.Delete().Where(topic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicDeleteOne{builder}
}

// Query returns a query builder for Topic.
func (c *TopicClient) Query() *TopicQuery {
	return &TopicQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTopic},
		inters: c.Interceptors(),
	}
}

// Get returns a Topic entity by its id.
func (c *TopicClient) Get(ctx context.Context, id int) (*Topic, error) {
	return c.Query().Where(topic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicClient) GetX(ctx context.Context, id int) *Topic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryForum queries the forum edge of a Topic.
func (c *TopicClient) QueryForum(t *Topic) *ForumQuery {
	query := (&ForumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, topic.ForumTable, topic.ForumColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Topic.
func (c *TopicClient) QueryOwner(t *Topic) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, topic.OwnerTable, topic.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a Topic.
func (c *TopicClient) QueryComments(t *Topic) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, topic.CommentsTable, topic.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Topic.
func (c *TopicClient) QueryTags(t *Topic) *TopicTagQuery {
	query := (&TopicTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(topictag.Table, topictag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, topic.TagsTable, topic.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedUsers queries the liked_users edge of a Topic.
func (c *TopicClient) QueryLikedUsers(t *Topic) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topic.LikedUsersTable, topic.LikedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedUsers queries the subscribed_users edge of a Topic.
func (c *TopicClient) QuerySubscribedUsers(t *Topic) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topic.SubscribedUsersTable, topic.SubscribedUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopicTaggings queries the topic_taggings edge of a Topic.
func (c *TopicClient) QueryTopicTaggings(t *Topic) *TopicTaggingQuery {
	query := (&TopicTaggingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(topictagging.Table, topictagging.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.TopicTaggingsTable, topic.TopicTaggingsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTopicLike queries the user_topic_like edge of a Topic.
func (c *TopicClient) QueryUserTopicLike(t *Topic) *UserTopicLikeQuery {
	query := (&UserTopicLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(usertopiclike.Table, usertopiclike.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.UserTopicLikeTable, topic.UserTopicLikeColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTopicSubscription queries the user_topic_subscription edge of a Topic.
func (c *TopicClient) QueryUserTopicSubscription(t *Topic) *UserTopicSubscriptionQuery {
	query := (&UserTopicSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topic.Table, topic.FieldID, id),
			sqlgraph.To(usertopicsubscription.Table, usertopicsubscription.TopicColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topic.UserTopicSubscriptionTable, topic.UserTopicSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TopicClient) Hooks() []Hook {
	return c.hooks.Topic
}

// Interceptors returns the client interceptors.
func (c *TopicClient) Interceptors() []Interceptor {
	return c.inters.Topic
}

func (c *TopicClient) mutate(ctx context.Context, m *TopicMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TopicCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TopicDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Topic mutation op: %q", m.Op())
	}
}

// TopicTagClient is a client for the TopicTag schema.
type TopicTagClient struct {
	config
}

// NewTopicTagClient returns a client for the TopicTag from the given config.
func NewTopicTagClient(c config) *TopicTagClient {
	return &TopicTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topictag.Hooks(f(g(h())))`.
func (c *TopicTagClient) Use(hooks ...Hook) {
	c.hooks.TopicTag = append(c.hooks.TopicTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `topictag.Intercept(f(g(h())))`.
func (c *TopicTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.TopicTag = append(c.inters.TopicTag, interceptors...)
}

// Create returns a builder for creating a TopicTag entity.
func (c *TopicTagClient) Create() *TopicTagCreate {
	mutation := newTopicTagMutation(c.config, OpCreate)
	return &TopicTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopicTag entities.
func (c *TopicTagClient) CreateBulk(builders ...*TopicTagCreate) *TopicTagCreateBulk {
	return &TopicTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TopicTagClient) MapCreateBulk(slice any, setFunc func(*TopicTagCreate, int)) *TopicTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TopicTagCreateBulk{err: fmt.Errorf("calling to TopicTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TopicTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TopicTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopicTag.
func (c *TopicTagClient) Update() *TopicTagUpdate {
	mutation := newTopicTagMutation(c.config, OpUpdate)
	return &TopicTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicTagClient) UpdateOne(tt *TopicTag) *TopicTagUpdateOne {
	mutation := newTopicTagMutation(c.config, OpUpdateOne, withTopicTag(tt))
	return &TopicTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicTagClient) UpdateOneID(id int) *TopicTagUpdateOne {
	mutation := newTopicTagMutation(c.config, OpUpdateOne, withTopicTagID(id))
	return &TopicTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopicTag.
func (c *TopicTagClient) Delete() *TopicTagDelete {
	mutation := newTopicTagMutation(c.config, OpDelete)
	return &TopicTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopicTagClient) DeleteOne(tt *TopicTag) *TopicTagDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TopicTagClient) DeleteOneID(id int) *TopicTagDeleteOne {
	builder := c.Delete().Where(topictag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicTagDeleteOne{builder}
}

// Query returns a query builder for TopicTag.
func (c *TopicTagClient) Query() *TopicTagQuery {
	return &TopicTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTopicTag},
		inters: c.Interceptors(),
	}
}

// Get returns a TopicTag entity by its id.
func (c *TopicTagClient) Get(ctx context.Context, id int) (*TopicTag, error) {
	return c.Query().Where(topictag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicTagClient) GetX(ctx context.Context, id int) *TopicTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTopics queries the topics edge of a TopicTag.
func (c *TopicTagClient) QueryTopics(tt *TopicTag) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topictag.Table, topictag.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, topictag.TopicsTable, topictag.TopicsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopicTaggings queries the topic_taggings edge of a TopicTag.
func (c *TopicTagClient) QueryTopicTaggings(tt *TopicTag) *TopicTaggingQuery {
	query := (&TopicTaggingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(topictag.Table, topictag.FieldID, id),
			sqlgraph.To(topictagging.Table, topictagging.TagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, topictag.TopicTaggingsTable, topictag.TopicTaggingsColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TopicTagClient) Hooks() []Hook {
	return c.hooks.TopicTag
}

// Interceptors returns the client interceptors.
func (c *TopicTagClient) Interceptors() []Interceptor {
	return c.inters.TopicTag
}

func (c *TopicTagClient) mutate(ctx context.Context, m *TopicTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TopicTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TopicTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TopicTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TopicTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TopicTag mutation op: %q", m.Op())
	}
}

// TopicTaggingClient is a client for the TopicTagging schema.
type TopicTaggingClient struct {
	config
}

// NewTopicTaggingClient returns a client for the TopicTagging from the given config.
func NewTopicTaggingClient(c config) *TopicTaggingClient {
	return &TopicTaggingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topictagging.Hooks(f(g(h())))`.
func (c *TopicTaggingClient) Use(hooks ...Hook) {
	c.hooks.TopicTagging = append(c.hooks.TopicTagging, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `topictagging.Intercept(f(g(h())))`.
func (c *TopicTaggingClient) Intercept(interceptors ...Interceptor) {
	c.inters.TopicTagging = append(c.inters.TopicTagging, interceptors...)
}

// Create returns a builder for creating a TopicTagging entity.
func (c *TopicTaggingClient) Create() *TopicTaggingCreate {
	mutation := newTopicTaggingMutation(c.config, OpCreate)
	return &TopicTaggingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TopicTagging entities.
func (c *TopicTaggingClient) CreateBulk(builders ...*TopicTaggingCreate) *TopicTaggingCreateBulk {
	return &TopicTaggingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TopicTaggingClient) MapCreateBulk(slice any, setFunc func(*TopicTaggingCreate, int)) *TopicTaggingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TopicTaggingCreateBulk{err: fmt.Errorf("calling to TopicTaggingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TopicTaggingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TopicTaggingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TopicTagging.
func (c *TopicTaggingClient) Update() *TopicTaggingUpdate {
	mutation := newTopicTaggingMutation(c.config, OpUpdate)
	return &TopicTaggingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicTaggingClient) UpdateOne(tt *TopicTagging) *TopicTaggingUpdateOne {
	mutation := newTopicTaggingMutation(c.config, OpUpdateOne)
	mutation.topic = &tt.TopicId
	mutation.tag = &tt.TagId
	return &TopicTaggingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TopicTagging.
func (c *TopicTaggingClient) Delete() *TopicTaggingDelete {
	mutation := newTopicTaggingMutation(c.config, OpDelete)
	return &TopicTaggingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for TopicTagging.
func (c *TopicTaggingClient) Query() *TopicTaggingQuery {
	return &TopicTaggingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTopicTagging},
		inters: c.Interceptors(),
	}
}

// QueryTopic queries the topic edge of a TopicTagging.
func (c *TopicTaggingClient) QueryTopic(tt *TopicTagging) *TopicQuery {
	return c.Query().
		Where(topictagging.TopicId(tt.TopicId), topictagging.TagId(tt.TagId)).
		QueryTopic()
}

// QueryTag queries the tag edge of a TopicTagging.
func (c *TopicTaggingClient) QueryTag(tt *TopicTagging) *TopicTagQuery {
	return c.Query().
		Where(topictagging.TopicId(tt.TopicId), topictagging.TagId(tt.TagId)).
		QueryTag()
}

// Hooks returns the client hooks.
func (c *TopicTaggingClient) Hooks() []Hook {
	return c.hooks.TopicTagging
}

// Interceptors returns the client interceptors.
func (c *TopicTaggingClient) Interceptors() []Interceptor {
	return c.inters.TopicTagging
}

func (c *TopicTaggingClient) mutate(ctx context.Context, m *TopicTaggingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TopicTaggingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TopicTaggingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TopicTaggingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TopicTaggingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TopicTagging mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryForums queries the forums edge of a User.
func (c *UserClient) QueryForums(u *User) *ForumQuery {
	query := (&ForumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ForumsTable, user.ForumsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTopics queries the topics edge of a User.
func (c *UserClient) QueryTopics(u *User) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TopicsTable, user.TopicsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a User.
func (c *UserClient) QueryComments(u *User) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CommentsTable, user.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedForums queries the liked_forums edge of a User.
func (c *UserClient) QueryLikedForums(u *User) *ForumQuery {
	query := (&ForumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedForumsTable, user.LikedForumsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedTopics queries the liked_topics edge of a User.
func (c *UserClient) QueryLikedTopics(u *User) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedTopicsTable, user.LikedTopicsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLikedComments queries the liked_comments edge of a User.
func (c *UserClient) QueryLikedComments(u *User) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.LikedCommentsTable, user.LikedCommentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedForums queries the subscribed_forums edge of a User.
func (c *UserClient) QuerySubscribedForums(u *User) *ForumQuery {
	query := (&ForumClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(forum.Table, forum.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedForumsTable, user.SubscribedForumsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedTopics queries the subscribed_topics edge of a User.
func (c *UserClient) QuerySubscribedTopics(u *User) *TopicQuery {
	query := (&TopicClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(topic.Table, topic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedTopicsTable, user.SubscribedTopicsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribedComments queries the subscribed_comments edge of a User.
func (c *UserClient) QuerySubscribedComments(u *User) *CommentQuery {
	query := (&CommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SubscribedCommentsTable, user.SubscribedCommentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserForumLike queries the user_forum_like edge of a User.
func (c *UserClient) QueryUserForumLike(u *User) *UserForumLikeQuery {
	query := (&UserForumLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userforumlike.Table, userforumlike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserForumLikeTable, user.UserForumLikeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTopicLike queries the user_topic_like edge of a User.
func (c *UserClient) QueryUserTopicLike(u *User) *UserTopicLikeQuery {
	query := (&UserTopicLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usertopiclike.Table, usertopiclike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserTopicLikeTable, user.UserTopicLikeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCommentLike queries the user_comment_like edge of a User.
func (c *UserClient) QueryUserCommentLike(u *User) *UserCommentLikeQuery {
	query := (&UserCommentLikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercommentlike.Table, usercommentlike.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserCommentLikeTable, user.UserCommentLikeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserForumSubscription queries the user_forum_subscription edge of a User.
func (c *UserClient) QueryUserForumSubscription(u *User) *UserForumSubscriptionQuery {
	query := (&UserForumSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userforumsubscription.Table, userforumsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserForumSubscriptionTable, user.UserForumSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTopicSubscription queries the user_topic_subscription edge of a User.
func (c *UserClient) QueryUserTopicSubscription(u *User) *UserTopicSubscriptionQuery {
	query := (&UserTopicSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usertopicsubscription.Table, usertopicsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserTopicSubscriptionTable, user.UserTopicSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCommentSubscription queries the user_comment_subscription edge of a User.
func (c *UserClient) QueryUserCommentSubscription(u *User) *UserCommentSubscriptionQuery {
	query := (&UserCommentSubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercommentsubscription.Table, usercommentsubscription.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserCommentSubscriptionTable, user.UserCommentSubscriptionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserCommentLikeClient is a client for the UserCommentLike schema.
type UserCommentLikeClient struct {
	config
}

// NewUserCommentLikeClient returns a client for the UserCommentLike from the given config.
func NewUserCommentLikeClient(c config) *UserCommentLikeClient {
	return &UserCommentLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercommentlike.Hooks(f(g(h())))`.
func (c *UserCommentLikeClient) Use(hooks ...Hook) {
	c.hooks.UserCommentLike = append(c.hooks.UserCommentLike, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usercommentlike.Intercept(f(g(h())))`.
func (c *UserCommentLikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserCommentLike = append(c.inters.UserCommentLike, interceptors...)
}

// Create returns a builder for creating a UserCommentLike entity.
func (c *UserCommentLikeClient) Create() *UserCommentLikeCreate {
	mutation := newUserCommentLikeMutation(c.config, OpCreate)
	return &UserCommentLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCommentLike entities.
func (c *UserCommentLikeClient) CreateBulk(builders ...*UserCommentLikeCreate) *UserCommentLikeCreateBulk {
	return &UserCommentLikeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserCommentLikeClient) MapCreateBulk(slice any, setFunc func(*UserCommentLikeCreate, int)) *UserCommentLikeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCommentLikeCreateBulk{err: fmt.Errorf("calling to UserCommentLikeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCommentLikeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCommentLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCommentLike.
func (c *UserCommentLikeClient) Update() *UserCommentLikeUpdate {
	mutation := newUserCommentLikeMutation(c.config, OpUpdate)
	return &UserCommentLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCommentLikeClient) UpdateOne(ucl *UserCommentLike) *UserCommentLikeUpdateOne {
	mutation := newUserCommentLikeMutation(c.config, OpUpdateOne)
	mutation.user = &ucl.UserId
	mutation.comment = &ucl.CommentId
	return &UserCommentLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCommentLike.
func (c *UserCommentLikeClient) Delete() *UserCommentLikeDelete {
	mutation := newUserCommentLikeMutation(c.config, OpDelete)
	return &UserCommentLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserCommentLike.
func (c *UserCommentLikeClient) Query() *UserCommentLikeQuery {
	return &UserCommentLikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserCommentLike},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserCommentLike.
func (c *UserCommentLikeClient) QueryUser(ucl *UserCommentLike) *UserQuery {
	return c.Query().
		Where(usercommentlike.UserId(ucl.UserId), usercommentlike.CommentId(ucl.CommentId)).
		QueryUser()
}

// QueryComment queries the comment edge of a UserCommentLike.
func (c *UserCommentLikeClient) QueryComment(ucl *UserCommentLike) *CommentQuery {
	return c.Query().
		Where(usercommentlike.UserId(ucl.UserId), usercommentlike.CommentId(ucl.CommentId)).
		QueryComment()
}

// Hooks returns the client hooks.
func (c *UserCommentLikeClient) Hooks() []Hook {
	return c.hooks.UserCommentLike
}

// Interceptors returns the client interceptors.
func (c *UserCommentLikeClient) Interceptors() []Interceptor {
	return c.inters.UserCommentLike
}

func (c *UserCommentLikeClient) mutate(ctx context.Context, m *UserCommentLikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCommentLikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserCommentLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserCommentLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserCommentLikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserCommentLike mutation op: %q", m.Op())
	}
}

// UserCommentSubscriptionClient is a client for the UserCommentSubscription schema.
type UserCommentSubscriptionClient struct {
	config
}

// NewUserCommentSubscriptionClient returns a client for the UserCommentSubscription from the given config.
func NewUserCommentSubscriptionClient(c config) *UserCommentSubscriptionClient {
	return &UserCommentSubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercommentsubscription.Hooks(f(g(h())))`.
func (c *UserCommentSubscriptionClient) Use(hooks ...Hook) {
	c.hooks.UserCommentSubscription = append(c.hooks.UserCommentSubscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usercommentsubscription.Intercept(f(g(h())))`.
func (c *UserCommentSubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserCommentSubscription = append(c.inters.UserCommentSubscription, interceptors...)
}

// Create returns a builder for creating a UserCommentSubscription entity.
func (c *UserCommentSubscriptionClient) Create() *UserCommentSubscriptionCreate {
	mutation := newUserCommentSubscriptionMutation(c.config, OpCreate)
	return &UserCommentSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCommentSubscription entities.
func (c *UserCommentSubscriptionClient) CreateBulk(builders ...*UserCommentSubscriptionCreate) *UserCommentSubscriptionCreateBulk {
	return &UserCommentSubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserCommentSubscriptionClient) MapCreateBulk(slice any, setFunc func(*UserCommentSubscriptionCreate, int)) *UserCommentSubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCommentSubscriptionCreateBulk{err: fmt.Errorf("calling to UserCommentSubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCommentSubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCommentSubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCommentSubscription.
func (c *UserCommentSubscriptionClient) Update() *UserCommentSubscriptionUpdate {
	mutation := newUserCommentSubscriptionMutation(c.config, OpUpdate)
	return &UserCommentSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCommentSubscriptionClient) UpdateOne(ucs *UserCommentSubscription) *UserCommentSubscriptionUpdateOne {
	mutation := newUserCommentSubscriptionMutation(c.config, OpUpdateOne)
	mutation.user = &ucs.UserId
	mutation.comment = &ucs.CommentId
	return &UserCommentSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCommentSubscription.
func (c *UserCommentSubscriptionClient) Delete() *UserCommentSubscriptionDelete {
	mutation := newUserCommentSubscriptionMutation(c.config, OpDelete)
	return &UserCommentSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserCommentSubscription.
func (c *UserCommentSubscriptionClient) Query() *UserCommentSubscriptionQuery {
	return &UserCommentSubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserCommentSubscription},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserCommentSubscription.
func (c *UserCommentSubscriptionClient) QueryUser(ucs *UserCommentSubscription) *UserQuery {
	return c.Query().
		Where(usercommentsubscription.UserId(ucs.UserId), usercommentsubscription.CommentId(ucs.CommentId)).
		QueryUser()
}

// QueryComment queries the comment edge of a UserCommentSubscription.
func (c *UserCommentSubscriptionClient) QueryComment(ucs *UserCommentSubscription) *CommentQuery {
	return c.Query().
		Where(usercommentsubscription.UserId(ucs.UserId), usercommentsubscription.CommentId(ucs.CommentId)).
		QueryComment()
}

// Hooks returns the client hooks.
func (c *UserCommentSubscriptionClient) Hooks() []Hook {
	return c.hooks.UserCommentSubscription
}

// Interceptors returns the client interceptors.
func (c *UserCommentSubscriptionClient) Interceptors() []Interceptor {
	return c.inters.UserCommentSubscription
}

func (c *UserCommentSubscriptionClient) mutate(ctx context.Context, m *UserCommentSubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCommentSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserCommentSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserCommentSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserCommentSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserCommentSubscription mutation op: %q", m.Op())
	}
}

// UserForumLikeClient is a client for the UserForumLike schema.
type UserForumLikeClient struct {
	config
}

// NewUserForumLikeClient returns a client for the UserForumLike from the given config.
func NewUserForumLikeClient(c config) *UserForumLikeClient {
	return &UserForumLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userforumlike.Hooks(f(g(h())))`.
func (c *UserForumLikeClient) Use(hooks ...Hook) {
	c.hooks.UserForumLike = append(c.hooks.UserForumLike, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userforumlike.Intercept(f(g(h())))`.
func (c *UserForumLikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserForumLike = append(c.inters.UserForumLike, interceptors...)
}

// Create returns a builder for creating a UserForumLike entity.
func (c *UserForumLikeClient) Create() *UserForumLikeCreate {
	mutation := newUserForumLikeMutation(c.config, OpCreate)
	return &UserForumLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserForumLike entities.
func (c *UserForumLikeClient) CreateBulk(builders ...*UserForumLikeCreate) *UserForumLikeCreateBulk {
	return &UserForumLikeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserForumLikeClient) MapCreateBulk(slice any, setFunc func(*UserForumLikeCreate, int)) *UserForumLikeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserForumLikeCreateBulk{err: fmt.Errorf("calling to UserForumLikeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserForumLikeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserForumLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserForumLike.
func (c *UserForumLikeClient) Update() *UserForumLikeUpdate {
	mutation := newUserForumLikeMutation(c.config, OpUpdate)
	return &UserForumLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserForumLikeClient) UpdateOne(ufl *UserForumLike) *UserForumLikeUpdateOne {
	mutation := newUserForumLikeMutation(c.config, OpUpdateOne)
	mutation.user = &ufl.UserId
	mutation.forum = &ufl.ForumId
	return &UserForumLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserForumLike.
func (c *UserForumLikeClient) Delete() *UserForumLikeDelete {
	mutation := newUserForumLikeMutation(c.config, OpDelete)
	return &UserForumLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserForumLike.
func (c *UserForumLikeClient) Query() *UserForumLikeQuery {
	return &UserForumLikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserForumLike},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserForumLike.
func (c *UserForumLikeClient) QueryUser(ufl *UserForumLike) *UserQuery {
	return c.Query().
		Where(userforumlike.UserId(ufl.UserId), userforumlike.ForumId(ufl.ForumId)).
		QueryUser()
}

// QueryForum queries the forum edge of a UserForumLike.
func (c *UserForumLikeClient) QueryForum(ufl *UserForumLike) *ForumQuery {
	return c.Query().
		Where(userforumlike.UserId(ufl.UserId), userforumlike.ForumId(ufl.ForumId)).
		QueryForum()
}

// Hooks returns the client hooks.
func (c *UserForumLikeClient) Hooks() []Hook {
	return c.hooks.UserForumLike
}

// Interceptors returns the client interceptors.
func (c *UserForumLikeClient) Interceptors() []Interceptor {
	return c.inters.UserForumLike
}

func (c *UserForumLikeClient) mutate(ctx context.Context, m *UserForumLikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserForumLikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserForumLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserForumLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserForumLikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserForumLike mutation op: %q", m.Op())
	}
}

// UserForumSubscriptionClient is a client for the UserForumSubscription schema.
type UserForumSubscriptionClient struct {
	config
}

// NewUserForumSubscriptionClient returns a client for the UserForumSubscription from the given config.
func NewUserForumSubscriptionClient(c config) *UserForumSubscriptionClient {
	return &UserForumSubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userforumsubscription.Hooks(f(g(h())))`.
func (c *UserForumSubscriptionClient) Use(hooks ...Hook) {
	c.hooks.UserForumSubscription = append(c.hooks.UserForumSubscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userforumsubscription.Intercept(f(g(h())))`.
func (c *UserForumSubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserForumSubscription = append(c.inters.UserForumSubscription, interceptors...)
}

// Create returns a builder for creating a UserForumSubscription entity.
func (c *UserForumSubscriptionClient) Create() *UserForumSubscriptionCreate {
	mutation := newUserForumSubscriptionMutation(c.config, OpCreate)
	return &UserForumSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserForumSubscription entities.
func (c *UserForumSubscriptionClient) CreateBulk(builders ...*UserForumSubscriptionCreate) *UserForumSubscriptionCreateBulk {
	return &UserForumSubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserForumSubscriptionClient) MapCreateBulk(slice any, setFunc func(*UserForumSubscriptionCreate, int)) *UserForumSubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserForumSubscriptionCreateBulk{err: fmt.Errorf("calling to UserForumSubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserForumSubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserForumSubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserForumSubscription.
func (c *UserForumSubscriptionClient) Update() *UserForumSubscriptionUpdate {
	mutation := newUserForumSubscriptionMutation(c.config, OpUpdate)
	return &UserForumSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserForumSubscriptionClient) UpdateOne(ufs *UserForumSubscription) *UserForumSubscriptionUpdateOne {
	mutation := newUserForumSubscriptionMutation(c.config, OpUpdateOne)
	mutation.user = &ufs.UserId
	mutation.forum = &ufs.ForumId
	return &UserForumSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserForumSubscription.
func (c *UserForumSubscriptionClient) Delete() *UserForumSubscriptionDelete {
	mutation := newUserForumSubscriptionMutation(c.config, OpDelete)
	return &UserForumSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserForumSubscription.
func (c *UserForumSubscriptionClient) Query() *UserForumSubscriptionQuery {
	return &UserForumSubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserForumSubscription},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserForumSubscription.
func (c *UserForumSubscriptionClient) QueryUser(ufs *UserForumSubscription) *UserQuery {
	return c.Query().
		Where(userforumsubscription.UserId(ufs.UserId), userforumsubscription.ForumId(ufs.ForumId)).
		QueryUser()
}

// QueryForum queries the forum edge of a UserForumSubscription.
func (c *UserForumSubscriptionClient) QueryForum(ufs *UserForumSubscription) *ForumQuery {
	return c.Query().
		Where(userforumsubscription.UserId(ufs.UserId), userforumsubscription.ForumId(ufs.ForumId)).
		QueryForum()
}

// Hooks returns the client hooks.
func (c *UserForumSubscriptionClient) Hooks() []Hook {
	return c.hooks.UserForumSubscription
}

// Interceptors returns the client interceptors.
func (c *UserForumSubscriptionClient) Interceptors() []Interceptor {
	return c.inters.UserForumSubscription
}

func (c *UserForumSubscriptionClient) mutate(ctx context.Context, m *UserForumSubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserForumSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserForumSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserForumSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserForumSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserForumSubscription mutation op: %q", m.Op())
	}
}

// UserTopicLikeClient is a client for the UserTopicLike schema.
type UserTopicLikeClient struct {
	config
}

// NewUserTopicLikeClient returns a client for the UserTopicLike from the given config.
func NewUserTopicLikeClient(c config) *UserTopicLikeClient {
	return &UserTopicLikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertopiclike.Hooks(f(g(h())))`.
func (c *UserTopicLikeClient) Use(hooks ...Hook) {
	c.hooks.UserTopicLike = append(c.hooks.UserTopicLike, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertopiclike.Intercept(f(g(h())))`.
func (c *UserTopicLikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTopicLike = append(c.inters.UserTopicLike, interceptors...)
}

// Create returns a builder for creating a UserTopicLike entity.
func (c *UserTopicLikeClient) Create() *UserTopicLikeCreate {
	mutation := newUserTopicLikeMutation(c.config, OpCreate)
	return &UserTopicLikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTopicLike entities.
func (c *UserTopicLikeClient) CreateBulk(builders ...*UserTopicLikeCreate) *UserTopicLikeCreateBulk {
	return &UserTopicLikeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTopicLikeClient) MapCreateBulk(slice any, setFunc func(*UserTopicLikeCreate, int)) *UserTopicLikeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTopicLikeCreateBulk{err: fmt.Errorf("calling to UserTopicLikeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTopicLikeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTopicLikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTopicLike.
func (c *UserTopicLikeClient) Update() *UserTopicLikeUpdate {
	mutation := newUserTopicLikeMutation(c.config, OpUpdate)
	return &UserTopicLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTopicLikeClient) UpdateOne(utl *UserTopicLike) *UserTopicLikeUpdateOne {
	mutation := newUserTopicLikeMutation(c.config, OpUpdateOne)
	mutation.user = &utl.UserId
	mutation.topic = &utl.TopicId
	return &UserTopicLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTopicLike.
func (c *UserTopicLikeClient) Delete() *UserTopicLikeDelete {
	mutation := newUserTopicLikeMutation(c.config, OpDelete)
	return &UserTopicLikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserTopicLike.
func (c *UserTopicLikeClient) Query() *UserTopicLikeQuery {
	return &UserTopicLikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTopicLike},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserTopicLike.
func (c *UserTopicLikeClient) QueryUser(utl *UserTopicLike) *UserQuery {
	return c.Query().
		Where(usertopiclike.UserId(utl.UserId), usertopiclike.TopicId(utl.TopicId)).
		QueryUser()
}

// QueryTopic queries the topic edge of a UserTopicLike.
func (c *UserTopicLikeClient) QueryTopic(utl *UserTopicLike) *TopicQuery {
	return c.Query().
		Where(usertopiclike.UserId(utl.UserId), usertopiclike.TopicId(utl.TopicId)).
		QueryTopic()
}

// Hooks returns the client hooks.
func (c *UserTopicLikeClient) Hooks() []Hook {
	return c.hooks.UserTopicLike
}

// Interceptors returns the client interceptors.
func (c *UserTopicLikeClient) Interceptors() []Interceptor {
	return c.inters.UserTopicLike
}

func (c *UserTopicLikeClient) mutate(ctx context.Context, m *UserTopicLikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTopicLikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTopicLikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTopicLikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTopicLikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTopicLike mutation op: %q", m.Op())
	}
}

// UserTopicSubscriptionClient is a client for the UserTopicSubscription schema.
type UserTopicSubscriptionClient struct {
	config
}

// NewUserTopicSubscriptionClient returns a client for the UserTopicSubscription from the given config.
func NewUserTopicSubscriptionClient(c config) *UserTopicSubscriptionClient {
	return &UserTopicSubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertopicsubscription.Hooks(f(g(h())))`.
func (c *UserTopicSubscriptionClient) Use(hooks ...Hook) {
	c.hooks.UserTopicSubscription = append(c.hooks.UserTopicSubscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertopicsubscription.Intercept(f(g(h())))`.
func (c *UserTopicSubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserTopicSubscription = append(c.inters.UserTopicSubscription, interceptors...)
}

// Create returns a builder for creating a UserTopicSubscription entity.
func (c *UserTopicSubscriptionClient) Create() *UserTopicSubscriptionCreate {
	mutation := newUserTopicSubscriptionMutation(c.config, OpCreate)
	return &UserTopicSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTopicSubscription entities.
func (c *UserTopicSubscriptionClient) CreateBulk(builders ...*UserTopicSubscriptionCreate) *UserTopicSubscriptionCreateBulk {
	return &UserTopicSubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTopicSubscriptionClient) MapCreateBulk(slice any, setFunc func(*UserTopicSubscriptionCreate, int)) *UserTopicSubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTopicSubscriptionCreateBulk{err: fmt.Errorf("calling to UserTopicSubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTopicSubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTopicSubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTopicSubscription.
func (c *UserTopicSubscriptionClient) Update() *UserTopicSubscriptionUpdate {
	mutation := newUserTopicSubscriptionMutation(c.config, OpUpdate)
	return &UserTopicSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTopicSubscriptionClient) UpdateOne(uts *UserTopicSubscription) *UserTopicSubscriptionUpdateOne {
	mutation := newUserTopicSubscriptionMutation(c.config, OpUpdateOne)
	mutation.user = &uts.UserId
	mutation.topic = &uts.TopicId
	return &UserTopicSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTopicSubscription.
func (c *UserTopicSubscriptionClient) Delete() *UserTopicSubscriptionDelete {
	mutation := newUserTopicSubscriptionMutation(c.config, OpDelete)
	return &UserTopicSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserTopicSubscription.
func (c *UserTopicSubscriptionClient) Query() *UserTopicSubscriptionQuery {
	return &UserTopicSubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserTopicSubscription},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserTopicSubscription.
func (c *UserTopicSubscriptionClient) QueryUser(uts *UserTopicSubscription) *UserQuery {
	return c.Query().
		Where(usertopicsubscription.UserId(uts.UserId), usertopicsubscription.TopicId(uts.TopicId)).
		QueryUser()
}

// QueryTopic queries the topic edge of a UserTopicSubscription.
func (c *UserTopicSubscriptionClient) QueryTopic(uts *UserTopicSubscription) *TopicQuery {
	return c.Query().
		Where(usertopicsubscription.UserId(uts.UserId), usertopicsubscription.TopicId(uts.TopicId)).
		QueryTopic()
}

// Hooks returns the client hooks.
func (c *UserTopicSubscriptionClient) Hooks() []Hook {
	return c.hooks.UserTopicSubscription
}

// Interceptors returns the client interceptors.
func (c *UserTopicSubscriptionClient) Interceptors() []Interceptor {
	return c.inters.UserTopicSubscription
}

func (c *UserTopicSubscriptionClient) mutate(ctx context.Context, m *UserTopicSubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTopicSubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTopicSubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTopicSubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTopicSubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserTopicSubscription mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdminUser, Comment, CommentAttachment, Forum, Topic, TopicTag, TopicTagging,
		User, UserCommentLike, UserCommentSubscription, UserForumLike,
		UserForumSubscription, UserTopicLike, UserTopicSubscription []ent.Hook
	}
	inters struct {
		AdminUser, Comment, CommentAttachment, Forum, Topic, TopicTag, TopicTagging,
		User, UserCommentLike, UserCommentSubscription, UserForumLike,
		UserForumSubscription, UserTopicLike, UserTopicSubscription []ent.Interceptor
	}
)
