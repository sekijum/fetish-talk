// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TopicTagging is the model entity for the TopicTagging schema.
type TopicTagging struct {
	config `json:"-"`
	// TopicId holds the value of the "topicId" field.
	TopicId int `json:"topicId,omitempty"`
	// TagId holds the value of the "tagId" field.
	TagId int `json:"tagId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicTaggingQuery when eager-loading is set.
	Edges        TopicTaggingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TopicTaggingEdges holds the relations/edges for other nodes in the graph.
type TopicTaggingEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *TopicTag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicTaggingEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicTaggingEdges) TagOrErr() (*TopicTag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: topictag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopicTagging) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topictagging.FieldTopicId, topictagging.FieldTagId:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopicTagging fields.
func (tt *TopicTagging) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topictagging.FieldTopicId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topicId", values[i])
			} else if value.Valid {
				tt.TopicId = int(value.Int64)
			}
		case topictagging.FieldTagId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tagId", values[i])
			} else if value.Valid {
				tt.TagId = int(value.Int64)
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TopicTagging.
// This includes values selected through modifiers, order, etc.
func (tt *TopicTagging) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the TopicTagging entity.
func (tt *TopicTagging) QueryTopic() *TopicQuery {
	return NewTopicTaggingClient(tt.config).QueryTopic(tt)
}

// QueryTag queries the "tag" edge of the TopicTagging entity.
func (tt *TopicTagging) QueryTag() *TopicTagQuery {
	return NewTopicTaggingClient(tt.config).QueryTag(tt)
}

// Update returns a builder for updating this TopicTagging.
// Note that you need to call TopicTagging.Unwrap() before calling this method if this TopicTagging
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TopicTagging) Update() *TopicTaggingUpdateOne {
	return NewTopicTaggingClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TopicTagging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TopicTagging) Unwrap() *TopicTagging {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopicTagging is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TopicTagging) String() string {
	var builder strings.Builder
	builder.WriteString("TopicTagging(")
	builder.WriteString("topicId=")
	builder.WriteString(fmt.Sprintf("%v", tt.TopicId))
	builder.WriteString(", ")
	builder.WriteString("tagId=")
	builder.WriteString(fmt.Sprintf("%v", tt.TagId))
	builder.WriteByte(')')
	return builder.String()
}

// TopicTaggings is a parsable slice of TopicTagging.
type TopicTaggings []*TopicTagging
