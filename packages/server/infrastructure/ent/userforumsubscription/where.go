// Code generated by ent, DO NOT EDIT.

package userforumsubscription

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldUserId, v))
}

// ForumId applies equality check predicate on the "forumId" field. It's identical to ForumIdEQ.
func ForumId(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldForumId, v))
}

// IsNotified applies equality check predicate on the "isNotified" field. It's identical to IsNotifiedEQ.
func IsNotified(v bool) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldIsNotified, v))
}

// SubscribedAt applies equality check predicate on the "subscribedAt" field. It's identical to SubscribedAtEQ.
func SubscribedAt(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldSubscribedAt, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNotIn(FieldUserId, vs...))
}

// ForumIdEQ applies the EQ predicate on the "forumId" field.
func ForumIdEQ(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldForumId, v))
}

// ForumIdNEQ applies the NEQ predicate on the "forumId" field.
func ForumIdNEQ(v int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNEQ(FieldForumId, v))
}

// ForumIdIn applies the In predicate on the "forumId" field.
func ForumIdIn(vs ...int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldIn(FieldForumId, vs...))
}

// ForumIdNotIn applies the NotIn predicate on the "forumId" field.
func ForumIdNotIn(vs ...int) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNotIn(FieldForumId, vs...))
}

// IsNotifiedEQ applies the EQ predicate on the "isNotified" field.
func IsNotifiedEQ(v bool) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldIsNotified, v))
}

// IsNotifiedNEQ applies the NEQ predicate on the "isNotified" field.
func IsNotifiedNEQ(v bool) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNEQ(FieldIsNotified, v))
}

// SubscribedAtEQ applies the EQ predicate on the "subscribedAt" field.
func SubscribedAtEQ(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldEQ(FieldSubscribedAt, v))
}

// SubscribedAtNEQ applies the NEQ predicate on the "subscribedAt" field.
func SubscribedAtNEQ(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNEQ(FieldSubscribedAt, v))
}

// SubscribedAtIn applies the In predicate on the "subscribedAt" field.
func SubscribedAtIn(vs ...time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldIn(FieldSubscribedAt, vs...))
}

// SubscribedAtNotIn applies the NotIn predicate on the "subscribedAt" field.
func SubscribedAtNotIn(vs ...time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldNotIn(FieldSubscribedAt, vs...))
}

// SubscribedAtGT applies the GT predicate on the "subscribedAt" field.
func SubscribedAtGT(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldGT(FieldSubscribedAt, v))
}

// SubscribedAtGTE applies the GTE predicate on the "subscribedAt" field.
func SubscribedAtGTE(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldGTE(FieldSubscribedAt, v))
}

// SubscribedAtLT applies the LT predicate on the "subscribedAt" field.
func SubscribedAtLT(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldLT(FieldSubscribedAt, v))
}

// SubscribedAtLTE applies the LTE predicate on the "subscribedAt" field.
func SubscribedAtLTE(v time.Time) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.FieldLTE(FieldSubscribedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserForumSubscription {
	return predicate.UserForumSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForum applies the HasEdge predicate on the "forum" edge.
func HasForum() predicate.UserForumSubscription {
	return predicate.UserForumSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ForumColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ForumTable, ForumColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForumWith applies the HasEdge predicate on the "forum" edge with a given conditions (other predicates).
func HasForumWith(preds ...predicate.Forum) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(func(s *sql.Selector) {
		step := newForumStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserForumSubscription) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserForumSubscription) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserForumSubscription) predicate.UserForumSubscription {
	return predicate.UserForumSubscription(sql.NotPredicates(p))
}
