// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdminUsersColumns holds the columns for the "admin_users" table.
	AdminUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_name", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 254},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// AdminUsersTable holds the schema information for the "admin_users" table.
	AdminUsersTable = &schema.Table{
		Name:       "admin_users",
		Columns:    AdminUsersColumns,
		PrimaryKey: []*schema.Column{AdminUsersColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "guest_name", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Visible", "Disapproved"}, Default: "Visible"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_comments_replies",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_topics_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CommentAttachmentsColumns holds the columns for the "comment_attachments" table.
	CommentAttachmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "url", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt, Default: 0},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"image", "video"}},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// CommentAttachmentsTable holds the schema information for the "comment_attachments" table.
	CommentAttachmentsTable = &schema.Table{
		Name:       "comment_attachments",
		Columns:    CommentAttachmentsColumns,
		PrimaryKey: []*schema.Column{CommentAttachmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_attachments_comments_comment_attachments",
				Columns:    []*schema.Column{CommentAttachmentsColumns[4]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ForumsColumns holds the columns for the "forums" table.
	ForumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Public", "Private", "Archived"}, Default: "Public"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_forums", Type: field.TypeInt, Nullable: true},
	}
	// ForumsTable holds the schema information for the "forums" table.
	ForumsTable = &schema.Table{
		Name:       "forums",
		Columns:    ForumsColumns,
		PrimaryKey: []*schema.Column{ForumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "forums_users_forums",
				Columns:    []*schema.Column{ForumsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TopicsColumns holds the columns for the "topics" table.
	TopicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "thumbnail_url", Type: field.TypeString, Nullable: true},
		{Name: "is_auto_generated", Type: field.TypeBool, Default: false},
		{Name: "is_notify_on_comment", Type: field.TypeBool, Default: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Open", "Closed", "Archived"}, Default: "Open"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "forum_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TopicsTable holds the schema information for the "topics" table.
	TopicsTable = &schema.Table{
		Name:       "topics",
		Columns:    TopicsColumns,
		PrimaryKey: []*schema.Column{TopicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topics_forums_topics",
				Columns:    []*schema.Column{TopicsColumns[9]},
				RefColumns: []*schema.Column{ForumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "topics_users_topics",
				Columns:    []*schema.Column{TopicsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TopicTagsColumns holds the columns for the "topic_tags" table.
	TopicTagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TopicTagsTable holds the schema information for the "topic_tags" table.
	TopicTagsTable = &schema.Table{
		Name:       "topic_tags",
		Columns:    TopicTagsColumns,
		PrimaryKey: []*schema.Column{TopicTagsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "topictag_name",
				Unique:  true,
				Columns: []*schema.Column{TopicTagsColumns[1]},
			},
		},
	}
	// TopicTaggingsColumns holds the columns for the "topic_taggings" table.
	TopicTaggingsColumns = []*schema.Column{
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// TopicTaggingsTable holds the schema information for the "topic_taggings" table.
	TopicTaggingsTable = &schema.Table{
		Name:       "topic_taggings",
		Columns:    TopicTaggingsColumns,
		PrimaryKey: []*schema.Column{TopicTaggingsColumns[0], TopicTaggingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topic_taggings_topics_topic",
				Columns:    []*schema.Column{TopicTaggingsColumns[0]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "topic_taggings_topic_tags_tag",
				Columns:    []*schema.Column{TopicTaggingsColumns[1]},
				RefColumns: []*schema.Column{TopicTagsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_name", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 254},
		{Name: "password", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Active", "Withdrawn", "Suspended", "Inactive"}, Default: "Active"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserCommentLikesColumns holds the columns for the "user_comment_likes" table.
	UserCommentLikesColumns = []*schema.Column{
		{Name: "type", Type: field.TypeEnum, Enums: []string{"like", "dislike"}},
		{Name: "liked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// UserCommentLikesTable holds the schema information for the "user_comment_likes" table.
	UserCommentLikesTable = &schema.Table{
		Name:       "user_comment_likes",
		Columns:    UserCommentLikesColumns,
		PrimaryKey: []*schema.Column{UserCommentLikesColumns[2], UserCommentLikesColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_comment_likes_users_user",
				Columns:    []*schema.Column{UserCommentLikesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_comment_likes_comments_comment",
				Columns:    []*schema.Column{UserCommentLikesColumns[3]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserCommentSubscriptionsColumns holds the columns for the "user_comment_subscriptions" table.
	UserCommentSubscriptionsColumns = []*schema.Column{
		{Name: "is_notified", Type: field.TypeBool, Default: true},
		{Name: "subscribed_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// UserCommentSubscriptionsTable holds the schema information for the "user_comment_subscriptions" table.
	UserCommentSubscriptionsTable = &schema.Table{
		Name:       "user_comment_subscriptions",
		Columns:    UserCommentSubscriptionsColumns,
		PrimaryKey: []*schema.Column{UserCommentSubscriptionsColumns[2], UserCommentSubscriptionsColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_comment_subscriptions_users_user",
				Columns:    []*schema.Column{UserCommentSubscriptionsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_comment_subscriptions_comments_comment",
				Columns:    []*schema.Column{UserCommentSubscriptionsColumns[3]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserForumLikesColumns holds the columns for the "user_forum_likes" table.
	UserForumLikesColumns = []*schema.Column{
		{Name: "type", Type: field.TypeEnum, Enums: []string{"like", "dislike"}},
		{Name: "liked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "forum_id", Type: field.TypeInt},
	}
	// UserForumLikesTable holds the schema information for the "user_forum_likes" table.
	UserForumLikesTable = &schema.Table{
		Name:       "user_forum_likes",
		Columns:    UserForumLikesColumns,
		PrimaryKey: []*schema.Column{UserForumLikesColumns[2], UserForumLikesColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_forum_likes_users_user",
				Columns:    []*schema.Column{UserForumLikesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_forum_likes_forums_forum",
				Columns:    []*schema.Column{UserForumLikesColumns[3]},
				RefColumns: []*schema.Column{ForumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserForumSubscriptionsColumns holds the columns for the "user_forum_subscriptions" table.
	UserForumSubscriptionsColumns = []*schema.Column{
		{Name: "is_notified", Type: field.TypeBool, Default: true},
		{Name: "subscribed_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "forum_id", Type: field.TypeInt},
	}
	// UserForumSubscriptionsTable holds the schema information for the "user_forum_subscriptions" table.
	UserForumSubscriptionsTable = &schema.Table{
		Name:       "user_forum_subscriptions",
		Columns:    UserForumSubscriptionsColumns,
		PrimaryKey: []*schema.Column{UserForumSubscriptionsColumns[2], UserForumSubscriptionsColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_forum_subscriptions_users_user",
				Columns:    []*schema.Column{UserForumSubscriptionsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_forum_subscriptions_forums_forum",
				Columns:    []*schema.Column{UserForumSubscriptionsColumns[3]},
				RefColumns: []*schema.Column{ForumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserTopicLikesColumns holds the columns for the "user_topic_likes" table.
	UserTopicLikesColumns = []*schema.Column{
		{Name: "type", Type: field.TypeEnum, Enums: []string{"like", "dislike"}},
		{Name: "liked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "topic_id", Type: field.TypeInt},
	}
	// UserTopicLikesTable holds the schema information for the "user_topic_likes" table.
	UserTopicLikesTable = &schema.Table{
		Name:       "user_topic_likes",
		Columns:    UserTopicLikesColumns,
		PrimaryKey: []*schema.Column{UserTopicLikesColumns[2], UserTopicLikesColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_topic_likes_users_user",
				Columns:    []*schema.Column{UserTopicLikesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_topic_likes_topics_topic",
				Columns:    []*schema.Column{UserTopicLikesColumns[3]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserTopicSubscriptionsColumns holds the columns for the "user_topic_subscriptions" table.
	UserTopicSubscriptionsColumns = []*schema.Column{
		{Name: "is_notified", Type: field.TypeBool, Default: true},
		{Name: "subscribed_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "topic_id", Type: field.TypeInt},
	}
	// UserTopicSubscriptionsTable holds the schema information for the "user_topic_subscriptions" table.
	UserTopicSubscriptionsTable = &schema.Table{
		Name:       "user_topic_subscriptions",
		Columns:    UserTopicSubscriptionsColumns,
		PrimaryKey: []*schema.Column{UserTopicSubscriptionsColumns[2], UserTopicSubscriptionsColumns[3]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_topic_subscriptions_users_user",
				Columns:    []*schema.Column{UserTopicSubscriptionsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_topic_subscriptions_topics_topic",
				Columns:    []*schema.Column{UserTopicSubscriptionsColumns[3]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdminUsersTable,
		CommentsTable,
		CommentAttachmentsTable,
		ForumsTable,
		TopicsTable,
		TopicTagsTable,
		TopicTaggingsTable,
		UsersTable,
		UserCommentLikesTable,
		UserCommentSubscriptionsTable,
		UserForumLikesTable,
		UserForumSubscriptionsTable,
		UserTopicLikesTable,
		UserTopicSubscriptionsTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentsTable.ForeignKeys[1].RefTable = TopicsTable
	CommentsTable.ForeignKeys[2].RefTable = UsersTable
	CommentAttachmentsTable.ForeignKeys[0].RefTable = CommentsTable
	ForumsTable.ForeignKeys[0].RefTable = UsersTable
	TopicsTable.ForeignKeys[0].RefTable = ForumsTable
	TopicsTable.ForeignKeys[1].RefTable = UsersTable
	TopicTaggingsTable.ForeignKeys[0].RefTable = TopicsTable
	TopicTaggingsTable.ForeignKeys[1].RefTable = TopicTagsTable
	UserCommentLikesTable.ForeignKeys[0].RefTable = UsersTable
	UserCommentLikesTable.ForeignKeys[1].RefTable = CommentsTable
	UserCommentSubscriptionsTable.ForeignKeys[0].RefTable = UsersTable
	UserCommentSubscriptionsTable.ForeignKeys[1].RefTable = CommentsTable
	UserForumLikesTable.ForeignKeys[0].RefTable = UsersTable
	UserForumLikesTable.ForeignKeys[1].RefTable = ForumsTable
	UserForumSubscriptionsTable.ForeignKeys[0].RefTable = UsersTable
	UserForumSubscriptionsTable.ForeignKeys[1].RefTable = ForumsTable
	UserTopicLikesTable.ForeignKeys[0].RefTable = UsersTable
	UserTopicLikesTable.ForeignKeys[1].RefTable = TopicsTable
	UserTopicSubscriptionsTable.ForeignKeys[0].RefTable = UsersTable
	UserTopicSubscriptionsTable.ForeignKeys[1].RefTable = TopicsTable
}
