// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdminUsersColumns holds the columns for the "admin_users" table.
	AdminUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// AdminUsersTable holds the schema information for the "admin_users" table.
	AdminUsersTable = &schema.Table{
		Name:       "admin_users",
		Columns:    AdminUsersColumns,
		PrimaryKey: []*schema.Column{AdminUsersColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Visible", "Hidden", "Deleted", "Disapproved"}, Default: "Visible"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_comments_replies",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_topics_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CommentAttachmentsColumns holds the columns for the "comment_attachments" table.
	CommentAttachmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"image", "video"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// CommentAttachmentsTable holds the schema information for the "comment_attachments" table.
	CommentAttachmentsTable = &schema.Table{
		Name:       "comment_attachments",
		Columns:    CommentAttachmentsColumns,
		PrimaryKey: []*schema.Column{CommentAttachmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_attachments_comments_comment_attachments",
				Columns:    []*schema.Column{CommentAttachmentsColumns[4]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CommentLikesColumns holds the columns for the "comment_likes" table.
	CommentLikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "comment_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// CommentLikesTable holds the schema information for the "comment_likes" table.
	CommentLikesTable = &schema.Table{
		Name:       "comment_likes",
		Columns:    CommentLikesColumns,
		PrimaryKey: []*schema.Column{CommentLikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_likes_comments_comment_likes",
				Columns:    []*schema.Column{CommentLikesColumns[2]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comment_likes_users_comment_likes",
				Columns:    []*schema.Column{CommentLikesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ForumsColumns holds the columns for the "forums" table.
	ForumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Public", "Private", "Archived", "Disapproved"}, Default: "Public"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ForumsTable holds the schema information for the "forums" table.
	ForumsTable = &schema.Table{
		Name:       "forums",
		Columns:    ForumsColumns,
		PrimaryKey: []*schema.Column{ForumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "forums_users_forums",
				Columns:    []*schema.Column{ForumsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ForumLikesColumns holds the columns for the "forum_likes" table.
	ForumLikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "forum_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ForumLikesTable holds the schema information for the "forum_likes" table.
	ForumLikesTable = &schema.Table{
		Name:       "forum_likes",
		Columns:    ForumLikesColumns,
		PrimaryKey: []*schema.Column{ForumLikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "forum_likes_forums_forum_likes",
				Columns:    []*schema.Column{ForumLikesColumns[2]},
				RefColumns: []*schema.Column{ForumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "forum_likes_users_forum_likes",
				Columns:    []*schema.Column{ForumLikesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TopicsColumns holds the columns for the "topics" table.
	TopicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Open", "Closed", "Archived", "Disapproved"}, Default: "Open"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "forum_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// TopicsTable holds the schema information for the "topics" table.
	TopicsTable = &schema.Table{
		Name:       "topics",
		Columns:    TopicsColumns,
		PrimaryKey: []*schema.Column{TopicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topics_forums_topics",
				Columns:    []*schema.Column{TopicsColumns[7]},
				RefColumns: []*schema.Column{ForumsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "topics_users_topics",
				Columns:    []*schema.Column{TopicsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TopicLikesColumns holds the columns for the "topic_likes" table.
	TopicLikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TopicLikesTable holds the schema information for the "topic_likes" table.
	TopicLikesTable = &schema.Table{
		Name:       "topic_likes",
		Columns:    TopicLikesColumns,
		PrimaryKey: []*schema.Column{TopicLikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topic_likes_topics_topic_likes",
				Columns:    []*schema.Column{TopicLikesColumns[2]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "topic_likes_users_topic_likes",
				Columns:    []*schema.Column{TopicLikesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Active", "Withdrawn", "Suspended", "Inactive"}, Default: "Active"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserCommentNotificationsColumns holds the columns for the "user_comment_notifications" table.
	UserCommentNotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "comment_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// UserCommentNotificationsTable holds the schema information for the "user_comment_notifications" table.
	UserCommentNotificationsTable = &schema.Table{
		Name:       "user_comment_notifications",
		Columns:    UserCommentNotificationsColumns,
		PrimaryKey: []*schema.Column{UserCommentNotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_comment_notifications_comments_user_comment_notifications",
				Columns:    []*schema.Column{UserCommentNotificationsColumns[2]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_comment_notifications_users_user_comment_notifications",
				Columns:    []*schema.Column{UserCommentNotificationsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserTopicNotificationsColumns holds the columns for the "user_topic_notifications" table.
	UserTopicNotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// UserTopicNotificationsTable holds the schema information for the "user_topic_notifications" table.
	UserTopicNotificationsTable = &schema.Table{
		Name:       "user_topic_notifications",
		Columns:    UserTopicNotificationsColumns,
		PrimaryKey: []*schema.Column{UserTopicNotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_topic_notifications_topics_user_topic_notifications",
				Columns:    []*schema.Column{UserTopicNotificationsColumns[2]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_topic_notifications_users_user_topic_notifications",
				Columns:    []*schema.Column{UserTopicNotificationsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdminUsersTable,
		CommentsTable,
		CommentAttachmentsTable,
		CommentLikesTable,
		ForumsTable,
		ForumLikesTable,
		TopicsTable,
		TopicLikesTable,
		UsersTable,
		UserCommentNotificationsTable,
		UserTopicNotificationsTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentsTable.ForeignKeys[1].RefTable = TopicsTable
	CommentsTable.ForeignKeys[2].RefTable = UsersTable
	CommentAttachmentsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentLikesTable.ForeignKeys[0].RefTable = CommentsTable
	CommentLikesTable.ForeignKeys[1].RefTable = UsersTable
	ForumsTable.ForeignKeys[0].RefTable = UsersTable
	ForumLikesTable.ForeignKeys[0].RefTable = ForumsTable
	ForumLikesTable.ForeignKeys[1].RefTable = UsersTable
	TopicsTable.ForeignKeys[0].RefTable = ForumsTable
	TopicsTable.ForeignKeys[1].RefTable = UsersTable
	TopicLikesTable.ForeignKeys[0].RefTable = TopicsTable
	TopicLikesTable.ForeignKeys[1].RefTable = UsersTable
	UserCommentNotificationsTable.ForeignKeys[0].RefTable = CommentsTable
	UserCommentNotificationsTable.ForeignKeys[1].RefTable = UsersTable
	UserTopicNotificationsTable.ForeignKeys[0].RefTable = TopicsTable
	UserTopicNotificationsTable.ForeignKeys[1].RefTable = UsersTable
}
