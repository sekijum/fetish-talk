// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/usertopicnotification"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicNotificationDelete is the builder for deleting a UserTopicNotification entity.
type UserTopicNotificationDelete struct {
	config
	hooks    []Hook
	mutation *UserTopicNotificationMutation
}

// Where appends a list predicates to the UserTopicNotificationDelete builder.
func (utnd *UserTopicNotificationDelete) Where(ps ...predicate.UserTopicNotification) *UserTopicNotificationDelete {
	utnd.mutation.Where(ps...)
	return utnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utnd *UserTopicNotificationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utnd.sqlExec, utnd.mutation, utnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utnd *UserTopicNotificationDelete) ExecX(ctx context.Context) int {
	n, err := utnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utnd *UserTopicNotificationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usertopicnotification.Table, sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt))
	if ps := utnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utnd.mutation.done = true
	return affected, err
}

// UserTopicNotificationDeleteOne is the builder for deleting a single UserTopicNotification entity.
type UserTopicNotificationDeleteOne struct {
	utnd *UserTopicNotificationDelete
}

// Where appends a list predicates to the UserTopicNotificationDelete builder.
func (utndo *UserTopicNotificationDeleteOne) Where(ps ...predicate.UserTopicNotification) *UserTopicNotificationDeleteOne {
	utndo.utnd.mutation.Where(ps...)
	return utndo
}

// Exec executes the deletion query.
func (utndo *UserTopicNotificationDeleteOne) Exec(ctx context.Context) error {
	n, err := utndo.utnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usertopicnotification.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utndo *UserTopicNotificationDeleteOne) ExecX(ctx context.Context) {
	if err := utndo.Exec(ctx); err != nil {
		panic(err)
	}
}
