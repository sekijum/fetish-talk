// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Topic is the model entity for the Topic schema.
type Topic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ForumID holds the value of the "forum_id" field.
	ForumID int `json:"forum_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// Status holds the value of the "status" field.
	Status topic.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicQuery when eager-loading is set.
	Edges        TopicEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TopicEdges holds the relations/edges for other nodes in the graph.
type TopicEdges struct {
	// Forum holds the value of the forum edge.
	Forum *Forum `json:"forum,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// TopicLikes holds the value of the topic_likes edge.
	TopicLikes []*TopicLike `json:"topic_likes,omitempty"`
	// UserTopicNotifications holds the value of the user_topic_notifications edge.
	UserTopicNotifications []*UserTopicNotification `json:"user_topic_notifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ForumOrErr returns the Forum value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicEdges) ForumOrErr() (*Forum, error) {
	if e.Forum != nil {
		return e.Forum, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: forum.Label}
	}
	return nil, &NotLoadedError{edge: "forum"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TopicLikesOrErr returns the TopicLikes value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) TopicLikesOrErr() ([]*TopicLike, error) {
	if e.loadedTypes[3] {
		return e.TopicLikes, nil
	}
	return nil, &NotLoadedError{edge: "topic_likes"}
}

// UserTopicNotificationsOrErr returns the UserTopicNotifications value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) UserTopicNotificationsOrErr() ([]*UserTopicNotification, error) {
	if e.loadedTypes[4] {
		return e.UserTopicNotifications, nil
	}
	return nil, &NotLoadedError{edge: "user_topic_notifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Topic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topic.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case topic.FieldID, topic.FieldForumID, topic.FieldUserID:
			values[i] = new(sql.NullInt64)
		case topic.FieldTitle, topic.FieldContent, topic.FieldStatus:
			values[i] = new(sql.NullString)
		case topic.FieldCreatedAt, topic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Topic fields.
func (t *Topic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case topic.FieldForumID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forum_id", values[i])
			} else if value.Valid {
				t.ForumID = int(value.Int64)
			}
		case topic.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = int(value.Int64)
			}
		case topic.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case topic.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case topic.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				t.IsDefault = value.Bool
			}
		case topic.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = topic.Status(value.String)
			}
		case topic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case topic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Topic.
// This includes values selected through modifiers, order, etc.
func (t *Topic) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryForum queries the "forum" edge of the Topic entity.
func (t *Topic) QueryForum() *ForumQuery {
	return NewTopicClient(t.config).QueryForum(t)
}

// QueryUser queries the "user" edge of the Topic entity.
func (t *Topic) QueryUser() *UserQuery {
	return NewTopicClient(t.config).QueryUser(t)
}

// QueryComments queries the "comments" edge of the Topic entity.
func (t *Topic) QueryComments() *CommentQuery {
	return NewTopicClient(t.config).QueryComments(t)
}

// QueryTopicLikes queries the "topic_likes" edge of the Topic entity.
func (t *Topic) QueryTopicLikes() *TopicLikeQuery {
	return NewTopicClient(t.config).QueryTopicLikes(t)
}

// QueryUserTopicNotifications queries the "user_topic_notifications" edge of the Topic entity.
func (t *Topic) QueryUserTopicNotifications() *UserTopicNotificationQuery {
	return NewTopicClient(t.config).QueryUserTopicNotifications(t)
}

// Update returns a builder for updating this Topic.
// Note that you need to call Topic.Unwrap() before calling this method if this Topic
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Topic) Update() *TopicUpdateOne {
	return NewTopicClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Topic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Topic) Unwrap() *Topic {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Topic is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Topic) String() string {
	var builder strings.Builder
	builder.WriteString("Topic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("forum_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ForumID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(t.Content)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Topics is a parsable slice of Topic.
type Topics []*Topic
