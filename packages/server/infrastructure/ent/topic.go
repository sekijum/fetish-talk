// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Topic is the model entity for the Topic schema.
type Topic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ForumId holds the value of the "forumId" field.
	ForumId int `json:"forumId,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ThumbnailUrl holds the value of the "thumbnailUrl" field.
	ThumbnailUrl string `json:"thumbnailUrl,omitempty"`
	// 自動生成されたトピックを示すフラグ
	IsAutoGenerated bool `json:"isAutoGenerated,omitempty"`
	// コメントされた時に通知するかどうかのフラグ
	IsNotifyOnComment bool `json:"isNotifyOnComment,omitempty"`
	// Status holds the value of the "status" field.
	Status topic.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicQuery when eager-loading is set.
	Edges        TopicEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TopicEdges holds the relations/edges for other nodes in the graph.
type TopicEdges struct {
	// Forum holds the value of the forum edge.
	Forum *Forum `json:"forum,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*TopicTag `json:"tags,omitempty"`
	// LikedUsers holds the value of the liked_users edge.
	LikedUsers []*User `json:"liked_users,omitempty"`
	// SubscribedUsers holds the value of the subscribed_users edge.
	SubscribedUsers []*User `json:"subscribed_users,omitempty"`
	// TopicTaggings holds the value of the topic_taggings edge.
	TopicTaggings []*TopicTagging `json:"topic_taggings,omitempty"`
	// UserTopicLike holds the value of the user_topic_like edge.
	UserTopicLike []*UserTopicLike `json:"user_topic_like,omitempty"`
	// UserTopicSubscription holds the value of the user_topic_subscription edge.
	UserTopicSubscription []*UserTopicSubscription `json:"user_topic_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// ForumOrErr returns the Forum value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicEdges) ForumOrErr() (*Forum, error) {
	if e.Forum != nil {
		return e.Forum, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: forum.Label}
	}
	return nil, &NotLoadedError{edge: "forum"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) TagsOrErr() ([]*TopicTag, error) {
	if e.loadedTypes[3] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// LikedUsersOrErr returns the LikedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) LikedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.LikedUsers, nil
	}
	return nil, &NotLoadedError{edge: "liked_users"}
}

// SubscribedUsersOrErr returns the SubscribedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) SubscribedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.SubscribedUsers, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_users"}
}

// TopicTaggingsOrErr returns the TopicTaggings value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) TopicTaggingsOrErr() ([]*TopicTagging, error) {
	if e.loadedTypes[6] {
		return e.TopicTaggings, nil
	}
	return nil, &NotLoadedError{edge: "topic_taggings"}
}

// UserTopicLikeOrErr returns the UserTopicLike value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) UserTopicLikeOrErr() ([]*UserTopicLike, error) {
	if e.loadedTypes[7] {
		return e.UserTopicLike, nil
	}
	return nil, &NotLoadedError{edge: "user_topic_like"}
}

// UserTopicSubscriptionOrErr returns the UserTopicSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e TopicEdges) UserTopicSubscriptionOrErr() ([]*UserTopicSubscription, error) {
	if e.loadedTypes[8] {
		return e.UserTopicSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_topic_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Topic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topic.FieldIsAutoGenerated, topic.FieldIsNotifyOnComment:
			values[i] = new(sql.NullBool)
		case topic.FieldID, topic.FieldForumId, topic.FieldUserId:
			values[i] = new(sql.NullInt64)
		case topic.FieldTitle, topic.FieldDescription, topic.FieldThumbnailUrl, topic.FieldStatus:
			values[i] = new(sql.NullString)
		case topic.FieldCreatedAt, topic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Topic fields.
func (t *Topic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case topic.FieldForumId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forumId", values[i])
			} else if value.Valid {
				t.ForumId = int(value.Int64)
			}
		case topic.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				t.UserId = int(value.Int64)
			}
		case topic.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case topic.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case topic.FieldThumbnailUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnailUrl", values[i])
			} else if value.Valid {
				t.ThumbnailUrl = value.String
			}
		case topic.FieldIsAutoGenerated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isAutoGenerated", values[i])
			} else if value.Valid {
				t.IsAutoGenerated = value.Bool
			}
		case topic.FieldIsNotifyOnComment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isNotifyOnComment", values[i])
			} else if value.Valid {
				t.IsNotifyOnComment = value.Bool
			}
		case topic.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = topic.Status(value.String)
			}
		case topic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case topic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Topic.
// This includes values selected through modifiers, order, etc.
func (t *Topic) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryForum queries the "forum" edge of the Topic entity.
func (t *Topic) QueryForum() *ForumQuery {
	return NewTopicClient(t.config).QueryForum(t)
}

// QueryOwner queries the "owner" edge of the Topic entity.
func (t *Topic) QueryOwner() *UserQuery {
	return NewTopicClient(t.config).QueryOwner(t)
}

// QueryComments queries the "comments" edge of the Topic entity.
func (t *Topic) QueryComments() *CommentQuery {
	return NewTopicClient(t.config).QueryComments(t)
}

// QueryTags queries the "tags" edge of the Topic entity.
func (t *Topic) QueryTags() *TopicTagQuery {
	return NewTopicClient(t.config).QueryTags(t)
}

// QueryLikedUsers queries the "liked_users" edge of the Topic entity.
func (t *Topic) QueryLikedUsers() *UserQuery {
	return NewTopicClient(t.config).QueryLikedUsers(t)
}

// QuerySubscribedUsers queries the "subscribed_users" edge of the Topic entity.
func (t *Topic) QuerySubscribedUsers() *UserQuery {
	return NewTopicClient(t.config).QuerySubscribedUsers(t)
}

// QueryTopicTaggings queries the "topic_taggings" edge of the Topic entity.
func (t *Topic) QueryTopicTaggings() *TopicTaggingQuery {
	return NewTopicClient(t.config).QueryTopicTaggings(t)
}

// QueryUserTopicLike queries the "user_topic_like" edge of the Topic entity.
func (t *Topic) QueryUserTopicLike() *UserTopicLikeQuery {
	return NewTopicClient(t.config).QueryUserTopicLike(t)
}

// QueryUserTopicSubscription queries the "user_topic_subscription" edge of the Topic entity.
func (t *Topic) QueryUserTopicSubscription() *UserTopicSubscriptionQuery {
	return NewTopicClient(t.config).QueryUserTopicSubscription(t)
}

// Update returns a builder for updating this Topic.
// Note that you need to call Topic.Unwrap() before calling this method if this Topic
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Topic) Update() *TopicUpdateOne {
	return NewTopicClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Topic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Topic) Unwrap() *Topic {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Topic is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Topic) String() string {
	var builder strings.Builder
	builder.WriteString("Topic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("forumId=")
	builder.WriteString(fmt.Sprintf("%v", t.ForumId))
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", t.UserId))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("thumbnailUrl=")
	builder.WriteString(t.ThumbnailUrl)
	builder.WriteString(", ")
	builder.WriteString("isAutoGenerated=")
	builder.WriteString(fmt.Sprintf("%v", t.IsAutoGenerated))
	builder.WriteString(", ")
	builder.WriteString("isNotifyOnComment=")
	builder.WriteString(fmt.Sprintf("%v", t.IsNotifyOnComment))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Topics is a parsable slice of Topic.
type Topics []*Topic
