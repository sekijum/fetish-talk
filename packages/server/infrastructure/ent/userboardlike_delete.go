// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/userboardlike"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserBoardLikeDelete is the builder for deleting a UserBoardLike entity.
type UserBoardLikeDelete struct {
	config
	hooks    []Hook
	mutation *UserBoardLikeMutation
}

// Where appends a list predicates to the UserBoardLikeDelete builder.
func (ubld *UserBoardLikeDelete) Where(ps ...predicate.UserBoardLike) *UserBoardLikeDelete {
	ubld.mutation.Where(ps...)
	return ubld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ubld *UserBoardLikeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ubld.sqlExec, ubld.mutation, ubld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ubld *UserBoardLikeDelete) ExecX(ctx context.Context) int {
	n, err := ubld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ubld *UserBoardLikeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userboardlike.Table, nil)
	if ps := ubld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ubld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ubld.mutation.done = true
	return affected, err
}

// UserBoardLikeDeleteOne is the builder for deleting a single UserBoardLike entity.
type UserBoardLikeDeleteOne struct {
	ubld *UserBoardLikeDelete
}

// Where appends a list predicates to the UserBoardLikeDelete builder.
func (ubldo *UserBoardLikeDeleteOne) Where(ps ...predicate.UserBoardLike) *UserBoardLikeDeleteOne {
	ubldo.ubld.mutation.Where(ps...)
	return ubldo
}

// Exec executes the deletion query.
func (ubldo *UserBoardLikeDeleteOne) Exec(ctx context.Context) error {
	n, err := ubldo.ubld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userboardlike.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ubldo *UserBoardLikeDeleteOne) ExecX(ctx context.Context) {
	if err := ubldo.Exec(ctx); err != nil {
		panic(err)
	}
}
