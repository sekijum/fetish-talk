// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/topictag"
	"server/infrastructure/ent/topictagging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicTaggingUpdate is the builder for updating TopicTagging entities.
type TopicTaggingUpdate struct {
	config
	hooks    []Hook
	mutation *TopicTaggingMutation
}

// Where appends a list predicates to the TopicTaggingUpdate builder.
func (ttu *TopicTaggingUpdate) Where(ps ...predicate.TopicTagging) *TopicTaggingUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetTopicId sets the "topicId" field.
func (ttu *TopicTaggingUpdate) SetTopicId(i int) *TopicTaggingUpdate {
	ttu.mutation.SetTopicId(i)
	return ttu
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (ttu *TopicTaggingUpdate) SetNillableTopicId(i *int) *TopicTaggingUpdate {
	if i != nil {
		ttu.SetTopicId(*i)
	}
	return ttu
}

// SetTagId sets the "tagId" field.
func (ttu *TopicTaggingUpdate) SetTagId(i int) *TopicTaggingUpdate {
	ttu.mutation.SetTagId(i)
	return ttu
}

// SetNillableTagId sets the "tagId" field if the given value is not nil.
func (ttu *TopicTaggingUpdate) SetNillableTagId(i *int) *TopicTaggingUpdate {
	if i != nil {
		ttu.SetTagId(*i)
	}
	return ttu
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (ttu *TopicTaggingUpdate) SetTopicID(id int) *TopicTaggingUpdate {
	ttu.mutation.SetTopicID(id)
	return ttu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (ttu *TopicTaggingUpdate) SetTopic(t *Topic) *TopicTaggingUpdate {
	return ttu.SetTopicID(t.ID)
}

// SetTagID sets the "tag" edge to the TopicTag entity by ID.
func (ttu *TopicTaggingUpdate) SetTagID(id int) *TopicTaggingUpdate {
	ttu.mutation.SetTagID(id)
	return ttu
}

// SetTag sets the "tag" edge to the TopicTag entity.
func (ttu *TopicTaggingUpdate) SetTag(t *TopicTag) *TopicTaggingUpdate {
	return ttu.SetTagID(t.ID)
}

// Mutation returns the TopicTaggingMutation object of the builder.
func (ttu *TopicTaggingUpdate) Mutation() *TopicTaggingMutation {
	return ttu.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (ttu *TopicTaggingUpdate) ClearTopic() *TopicTaggingUpdate {
	ttu.mutation.ClearTopic()
	return ttu
}

// ClearTag clears the "tag" edge to the TopicTag entity.
func (ttu *TopicTaggingUpdate) ClearTag() *TopicTaggingUpdate {
	ttu.mutation.ClearTag()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TopicTaggingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TopicTaggingUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TopicTaggingUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TopicTaggingUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TopicTaggingUpdate) check() error {
	if _, ok := ttu.mutation.TopicID(); ttu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicTagging.topic"`)
	}
	if _, ok := ttu.mutation.TagID(); ttu.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicTagging.tag"`)
	}
	return nil
}

func (ttu *TopicTaggingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topictagging.Table, topictagging.Columns, sqlgraph.NewFieldSpec(topictagging.FieldTopicId, field.TypeInt), sqlgraph.NewFieldSpec(topictagging.FieldTagId, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TopicTable,
			Columns: []string{topictagging.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TopicTable,
			Columns: []string{topictagging.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TagTable,
			Columns: []string{topictagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TagTable,
			Columns: []string{topictagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topictagging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TopicTaggingUpdateOne is the builder for updating a single TopicTagging entity.
type TopicTaggingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicTaggingMutation
}

// SetTopicId sets the "topicId" field.
func (ttuo *TopicTaggingUpdateOne) SetTopicId(i int) *TopicTaggingUpdateOne {
	ttuo.mutation.SetTopicId(i)
	return ttuo
}

// SetNillableTopicId sets the "topicId" field if the given value is not nil.
func (ttuo *TopicTaggingUpdateOne) SetNillableTopicId(i *int) *TopicTaggingUpdateOne {
	if i != nil {
		ttuo.SetTopicId(*i)
	}
	return ttuo
}

// SetTagId sets the "tagId" field.
func (ttuo *TopicTaggingUpdateOne) SetTagId(i int) *TopicTaggingUpdateOne {
	ttuo.mutation.SetTagId(i)
	return ttuo
}

// SetNillableTagId sets the "tagId" field if the given value is not nil.
func (ttuo *TopicTaggingUpdateOne) SetNillableTagId(i *int) *TopicTaggingUpdateOne {
	if i != nil {
		ttuo.SetTagId(*i)
	}
	return ttuo
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (ttuo *TopicTaggingUpdateOne) SetTopicID(id int) *TopicTaggingUpdateOne {
	ttuo.mutation.SetTopicID(id)
	return ttuo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (ttuo *TopicTaggingUpdateOne) SetTopic(t *Topic) *TopicTaggingUpdateOne {
	return ttuo.SetTopicID(t.ID)
}

// SetTagID sets the "tag" edge to the TopicTag entity by ID.
func (ttuo *TopicTaggingUpdateOne) SetTagID(id int) *TopicTaggingUpdateOne {
	ttuo.mutation.SetTagID(id)
	return ttuo
}

// SetTag sets the "tag" edge to the TopicTag entity.
func (ttuo *TopicTaggingUpdateOne) SetTag(t *TopicTag) *TopicTaggingUpdateOne {
	return ttuo.SetTagID(t.ID)
}

// Mutation returns the TopicTaggingMutation object of the builder.
func (ttuo *TopicTaggingUpdateOne) Mutation() *TopicTaggingMutation {
	return ttuo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (ttuo *TopicTaggingUpdateOne) ClearTopic() *TopicTaggingUpdateOne {
	ttuo.mutation.ClearTopic()
	return ttuo
}

// ClearTag clears the "tag" edge to the TopicTag entity.
func (ttuo *TopicTaggingUpdateOne) ClearTag() *TopicTaggingUpdateOne {
	ttuo.mutation.ClearTag()
	return ttuo
}

// Where appends a list predicates to the TopicTaggingUpdate builder.
func (ttuo *TopicTaggingUpdateOne) Where(ps ...predicate.TopicTagging) *TopicTaggingUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TopicTaggingUpdateOne) Select(field string, fields ...string) *TopicTaggingUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TopicTagging entity.
func (ttuo *TopicTaggingUpdateOne) Save(ctx context.Context) (*TopicTagging, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TopicTaggingUpdateOne) SaveX(ctx context.Context) *TopicTagging {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TopicTaggingUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TopicTaggingUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TopicTaggingUpdateOne) check() error {
	if _, ok := ttuo.mutation.TopicID(); ttuo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicTagging.topic"`)
	}
	if _, ok := ttuo.mutation.TagID(); ttuo.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicTagging.tag"`)
	}
	return nil
}

func (ttuo *TopicTaggingUpdateOne) sqlSave(ctx context.Context) (_node *TopicTagging, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topictagging.Table, topictagging.Columns, sqlgraph.NewFieldSpec(topictagging.FieldTopicId, field.TypeInt), sqlgraph.NewFieldSpec(topictagging.FieldTagId, field.TypeInt))
	if id, ok := ttuo.mutation.TopicId(); !ok {
		return nil, &ValidationError{Name: "topicId", err: errors.New(`ent: missing "TopicTagging.topicId" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ttuo.mutation.TagId(); !ok {
		return nil, &ValidationError{Name: "tagId", err: errors.New(`ent: missing "TopicTagging.tagId" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !topictagging.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TopicTable,
			Columns: []string{topictagging.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TopicTable,
			Columns: []string{topictagging.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TagTable,
			Columns: []string{topictagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topictagging.TagTable,
			Columns: []string{topictagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topictag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopicTagging{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topictagging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
