// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usertopicnotification"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserTopicNotificationUpdate is the builder for updating UserTopicNotification entities.
type UserTopicNotificationUpdate struct {
	config
	hooks    []Hook
	mutation *UserTopicNotificationMutation
}

// Where appends a list predicates to the UserTopicNotificationUpdate builder.
func (utnu *UserTopicNotificationUpdate) Where(ps ...predicate.UserTopicNotification) *UserTopicNotificationUpdate {
	utnu.mutation.Where(ps...)
	return utnu
}

// SetUserID sets the "user_id" field.
func (utnu *UserTopicNotificationUpdate) SetUserID(i int) *UserTopicNotificationUpdate {
	utnu.mutation.SetUserID(i)
	return utnu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utnu *UserTopicNotificationUpdate) SetNillableUserID(i *int) *UserTopicNotificationUpdate {
	if i != nil {
		utnu.SetUserID(*i)
	}
	return utnu
}

// SetTopicID sets the "topic_id" field.
func (utnu *UserTopicNotificationUpdate) SetTopicID(i int) *UserTopicNotificationUpdate {
	utnu.mutation.SetTopicID(i)
	return utnu
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (utnu *UserTopicNotificationUpdate) SetNillableTopicID(i *int) *UserTopicNotificationUpdate {
	if i != nil {
		utnu.SetTopicID(*i)
	}
	return utnu
}

// SetCreatedAt sets the "created_at" field.
func (utnu *UserTopicNotificationUpdate) SetCreatedAt(t time.Time) *UserTopicNotificationUpdate {
	utnu.mutation.SetCreatedAt(t)
	return utnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utnu *UserTopicNotificationUpdate) SetNillableCreatedAt(t *time.Time) *UserTopicNotificationUpdate {
	if t != nil {
		utnu.SetCreatedAt(*t)
	}
	return utnu
}

// SetUser sets the "user" edge to the User entity.
func (utnu *UserTopicNotificationUpdate) SetUser(u *User) *UserTopicNotificationUpdate {
	return utnu.SetUserID(u.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utnu *UserTopicNotificationUpdate) SetTopic(t *Topic) *UserTopicNotificationUpdate {
	return utnu.SetTopicID(t.ID)
}

// Mutation returns the UserTopicNotificationMutation object of the builder.
func (utnu *UserTopicNotificationUpdate) Mutation() *UserTopicNotificationMutation {
	return utnu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utnu *UserTopicNotificationUpdate) ClearUser() *UserTopicNotificationUpdate {
	utnu.mutation.ClearUser()
	return utnu
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utnu *UserTopicNotificationUpdate) ClearTopic() *UserTopicNotificationUpdate {
	utnu.mutation.ClearTopic()
	return utnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utnu *UserTopicNotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utnu.sqlSave, utnu.mutation, utnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utnu *UserTopicNotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := utnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utnu *UserTopicNotificationUpdate) Exec(ctx context.Context) error {
	_, err := utnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utnu *UserTopicNotificationUpdate) ExecX(ctx context.Context) {
	if err := utnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utnu *UserTopicNotificationUpdate) check() error {
	if _, ok := utnu.mutation.UserID(); utnu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicNotification.user"`)
	}
	if _, ok := utnu.mutation.TopicID(); utnu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicNotification.topic"`)
	}
	return nil
}

func (utnu *UserTopicNotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopicnotification.Table, usertopicnotification.Columns, sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt))
	if ps := utnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utnu.mutation.CreatedAt(); ok {
		_spec.SetField(usertopicnotification.FieldCreatedAt, field.TypeTime, value)
	}
	if utnu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.UserTable,
			Columns: []string{usertopicnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utnu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.UserTable,
			Columns: []string{usertopicnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utnu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.TopicTable,
			Columns: []string{usertopicnotification.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utnu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.TopicTable,
			Columns: []string{usertopicnotification.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopicnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utnu.mutation.done = true
	return n, nil
}

// UserTopicNotificationUpdateOne is the builder for updating a single UserTopicNotification entity.
type UserTopicNotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTopicNotificationMutation
}

// SetUserID sets the "user_id" field.
func (utnuo *UserTopicNotificationUpdateOne) SetUserID(i int) *UserTopicNotificationUpdateOne {
	utnuo.mutation.SetUserID(i)
	return utnuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utnuo *UserTopicNotificationUpdateOne) SetNillableUserID(i *int) *UserTopicNotificationUpdateOne {
	if i != nil {
		utnuo.SetUserID(*i)
	}
	return utnuo
}

// SetTopicID sets the "topic_id" field.
func (utnuo *UserTopicNotificationUpdateOne) SetTopicID(i int) *UserTopicNotificationUpdateOne {
	utnuo.mutation.SetTopicID(i)
	return utnuo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (utnuo *UserTopicNotificationUpdateOne) SetNillableTopicID(i *int) *UserTopicNotificationUpdateOne {
	if i != nil {
		utnuo.SetTopicID(*i)
	}
	return utnuo
}

// SetCreatedAt sets the "created_at" field.
func (utnuo *UserTopicNotificationUpdateOne) SetCreatedAt(t time.Time) *UserTopicNotificationUpdateOne {
	utnuo.mutation.SetCreatedAt(t)
	return utnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (utnuo *UserTopicNotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *UserTopicNotificationUpdateOne {
	if t != nil {
		utnuo.SetCreatedAt(*t)
	}
	return utnuo
}

// SetUser sets the "user" edge to the User entity.
func (utnuo *UserTopicNotificationUpdateOne) SetUser(u *User) *UserTopicNotificationUpdateOne {
	return utnuo.SetUserID(u.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (utnuo *UserTopicNotificationUpdateOne) SetTopic(t *Topic) *UserTopicNotificationUpdateOne {
	return utnuo.SetTopicID(t.ID)
}

// Mutation returns the UserTopicNotificationMutation object of the builder.
func (utnuo *UserTopicNotificationUpdateOne) Mutation() *UserTopicNotificationMutation {
	return utnuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utnuo *UserTopicNotificationUpdateOne) ClearUser() *UserTopicNotificationUpdateOne {
	utnuo.mutation.ClearUser()
	return utnuo
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (utnuo *UserTopicNotificationUpdateOne) ClearTopic() *UserTopicNotificationUpdateOne {
	utnuo.mutation.ClearTopic()
	return utnuo
}

// Where appends a list predicates to the UserTopicNotificationUpdate builder.
func (utnuo *UserTopicNotificationUpdateOne) Where(ps ...predicate.UserTopicNotification) *UserTopicNotificationUpdateOne {
	utnuo.mutation.Where(ps...)
	return utnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utnuo *UserTopicNotificationUpdateOne) Select(field string, fields ...string) *UserTopicNotificationUpdateOne {
	utnuo.fields = append([]string{field}, fields...)
	return utnuo
}

// Save executes the query and returns the updated UserTopicNotification entity.
func (utnuo *UserTopicNotificationUpdateOne) Save(ctx context.Context) (*UserTopicNotification, error) {
	return withHooks(ctx, utnuo.sqlSave, utnuo.mutation, utnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utnuo *UserTopicNotificationUpdateOne) SaveX(ctx context.Context) *UserTopicNotification {
	node, err := utnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utnuo *UserTopicNotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := utnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utnuo *UserTopicNotificationUpdateOne) ExecX(ctx context.Context) {
	if err := utnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utnuo *UserTopicNotificationUpdateOne) check() error {
	if _, ok := utnuo.mutation.UserID(); utnuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicNotification.user"`)
	}
	if _, ok := utnuo.mutation.TopicID(); utnuo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserTopicNotification.topic"`)
	}
	return nil
}

func (utnuo *UserTopicNotificationUpdateOne) sqlSave(ctx context.Context) (_node *UserTopicNotification, err error) {
	if err := utnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertopicnotification.Table, usertopicnotification.Columns, sqlgraph.NewFieldSpec(usertopicnotification.FieldID, field.TypeInt))
	id, ok := utnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTopicNotification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertopicnotification.FieldID)
		for _, f := range fields {
			if !usertopicnotification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertopicnotification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utnuo.mutation.CreatedAt(); ok {
		_spec.SetField(usertopicnotification.FieldCreatedAt, field.TypeTime, value)
	}
	if utnuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.UserTable,
			Columns: []string{usertopicnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utnuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.UserTable,
			Columns: []string{usertopicnotification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utnuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.TopicTable,
			Columns: []string{usertopicnotification.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utnuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usertopicnotification.TopicTable,
			Columns: []string{usertopicnotification.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserTopicNotification{config: utnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopicnotification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utnuo.mutation.done = true
	return _node, nil
}
