// Code generated by ent, DO NOT EDIT.

package topic

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the topic type in the database.
	Label = "topic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldForumId holds the string denoting the forumid field in the database.
	FieldForumId = "forum_id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldThumbnailUrl holds the string denoting the thumbnailurl field in the database.
	FieldThumbnailUrl = "thumbnail_url"
	// FieldIsAutoGenerated holds the string denoting the isautogenerated field in the database.
	FieldIsAutoGenerated = "is_auto_generated"
	// FieldIsNotifyOnComment holds the string denoting the isnotifyoncomment field in the database.
	FieldIsNotifyOnComment = "is_notify_on_comment"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeForum holds the string denoting the forum edge name in mutations.
	EdgeForum = "forum"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeLikedUsers holds the string denoting the liked_users edge name in mutations.
	EdgeLikedUsers = "liked_users"
	// EdgeSubscribedUsers holds the string denoting the subscribed_users edge name in mutations.
	EdgeSubscribedUsers = "subscribed_users"
	// EdgeTopicTaggings holds the string denoting the topic_taggings edge name in mutations.
	EdgeTopicTaggings = "topic_taggings"
	// EdgeUserTopicLike holds the string denoting the user_topic_like edge name in mutations.
	EdgeUserTopicLike = "user_topic_like"
	// EdgeUserTopicSubscription holds the string denoting the user_topic_subscription edge name in mutations.
	EdgeUserTopicSubscription = "user_topic_subscription"
	// Table holds the table name of the topic in the database.
	Table = "topics"
	// ForumTable is the table that holds the forum relation/edge.
	ForumTable = "topics"
	// ForumInverseTable is the table name for the Forum entity.
	// It exists in this package in order to avoid circular dependency with the "forum" package.
	ForumInverseTable = "forums"
	// ForumColumn is the table column denoting the forum relation/edge.
	ForumColumn = "forum_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "topics"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "topic_id"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "topic_taggings"
	// TagsInverseTable is the table name for the TopicTag entity.
	// It exists in this package in order to avoid circular dependency with the "topictag" package.
	TagsInverseTable = "topic_tags"
	// LikedUsersTable is the table that holds the liked_users relation/edge. The primary key declared below.
	LikedUsersTable = "user_topic_likes"
	// LikedUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	LikedUsersInverseTable = "users"
	// SubscribedUsersTable is the table that holds the subscribed_users relation/edge. The primary key declared below.
	SubscribedUsersTable = "user_topic_subscriptions"
	// SubscribedUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SubscribedUsersInverseTable = "users"
	// TopicTaggingsTable is the table that holds the topic_taggings relation/edge.
	TopicTaggingsTable = "topic_taggings"
	// TopicTaggingsInverseTable is the table name for the TopicTagging entity.
	// It exists in this package in order to avoid circular dependency with the "topictagging" package.
	TopicTaggingsInverseTable = "topic_taggings"
	// TopicTaggingsColumn is the table column denoting the topic_taggings relation/edge.
	TopicTaggingsColumn = "topic_id"
	// UserTopicLikeTable is the table that holds the user_topic_like relation/edge.
	UserTopicLikeTable = "user_topic_likes"
	// UserTopicLikeInverseTable is the table name for the UserTopicLike entity.
	// It exists in this package in order to avoid circular dependency with the "usertopiclike" package.
	UserTopicLikeInverseTable = "user_topic_likes"
	// UserTopicLikeColumn is the table column denoting the user_topic_like relation/edge.
	UserTopicLikeColumn = "topic_id"
	// UserTopicSubscriptionTable is the table that holds the user_topic_subscription relation/edge.
	UserTopicSubscriptionTable = "user_topic_subscriptions"
	// UserTopicSubscriptionInverseTable is the table name for the UserTopicSubscription entity.
	// It exists in this package in order to avoid circular dependency with the "usertopicsubscription" package.
	UserTopicSubscriptionInverseTable = "user_topic_subscriptions"
	// UserTopicSubscriptionColumn is the table column denoting the user_topic_subscription relation/edge.
	UserTopicSubscriptionColumn = "topic_id"
)

// Columns holds all SQL columns for topic fields.
var Columns = []string{
	FieldID,
	FieldForumId,
	FieldUserId,
	FieldTitle,
	FieldDescription,
	FieldThumbnailUrl,
	FieldIsAutoGenerated,
	FieldIsNotifyOnComment,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"topicId", "tagId"}
	// LikedUsersPrimaryKey and LikedUsersColumn2 are the table columns denoting the
	// primary key for the liked_users relation (M2M).
	LikedUsersPrimaryKey = []string{"userId", "topicId"}
	// SubscribedUsersPrimaryKey and SubscribedUsersColumn2 are the table columns denoting the
	// primary key for the subscribed_users relation (M2M).
	SubscribedUsersPrimaryKey = []string{"userId", "topicId"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultIsAutoGenerated holds the default value on creation for the "isAutoGenerated" field.
	DefaultIsAutoGenerated bool
	// DefaultIsNotifyOnComment holds the default value on creation for the "isNotifyOnComment" field.
	DefaultIsNotifyOnComment bool
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOpen is the default value of the Status enum.
const DefaultStatus = StatusOpen

// Status values.
const (
	StatusOpen     Status = "Open"
	StatusClosed   Status = "Closed"
	StatusArchived Status = "Archived"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpen, StatusClosed, StatusArchived:
		return nil
	default:
		return fmt.Errorf("topic: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Topic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByForumId orders the results by the forumId field.
func ByForumId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForumId, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByThumbnailUrl orders the results by the thumbnailUrl field.
func ByThumbnailUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailUrl, opts...).ToFunc()
}

// ByIsAutoGenerated orders the results by the isAutoGenerated field.
func ByIsAutoGenerated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAutoGenerated, opts...).ToFunc()
}

// ByIsNotifyOnComment orders the results by the isNotifyOnComment field.
func ByIsNotifyOnComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNotifyOnComment, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByForumField orders the results by forum field.
func ByForumField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newForumStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikedUsersCount orders the results by liked_users count.
func ByLikedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikedUsersStep(), opts...)
	}
}

// ByLikedUsers orders the results by liked_users terms.
func ByLikedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribedUsersCount orders the results by subscribed_users count.
func BySubscribedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribedUsersStep(), opts...)
	}
}

// BySubscribedUsers orders the results by subscribed_users terms.
func BySubscribedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTopicTaggingsCount orders the results by topic_taggings count.
func ByTopicTaggingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopicTaggingsStep(), opts...)
	}
}

// ByTopicTaggings orders the results by topic_taggings terms.
func ByTopicTaggings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicTaggingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserTopicLikeCount orders the results by user_topic_like count.
func ByUserTopicLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTopicLikeStep(), opts...)
	}
}

// ByUserTopicLike orders the results by user_topic_like terms.
func ByUserTopicLike(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTopicLikeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserTopicSubscriptionCount orders the results by user_topic_subscription count.
func ByUserTopicSubscriptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTopicSubscriptionStep(), opts...)
	}
}

// ByUserTopicSubscription orders the results by user_topic_subscription terms.
func ByUserTopicSubscription(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTopicSubscriptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newForumStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ForumInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ForumTable, ForumColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newLikedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikedUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LikedUsersTable, LikedUsersPrimaryKey...),
	)
}
func newSubscribedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribedUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
	)
}
func newTopicTaggingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicTaggingsInverseTable, TopicTaggingsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, TopicTaggingsTable, TopicTaggingsColumn),
	)
}
func newUserTopicLikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTopicLikeInverseTable, UserTopicLikeColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserTopicLikeTable, UserTopicLikeColumn),
	)
}
func newUserTopicSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTopicSubscriptionInverseTable, UserTopicSubscriptionColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserTopicSubscriptionTable, UserTopicSubscriptionColumn),
	)
}
