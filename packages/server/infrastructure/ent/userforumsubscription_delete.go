// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/userforumsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserForumSubscriptionDelete is the builder for deleting a UserForumSubscription entity.
type UserForumSubscriptionDelete struct {
	config
	hooks    []Hook
	mutation *UserForumSubscriptionMutation
}

// Where appends a list predicates to the UserForumSubscriptionDelete builder.
func (ufsd *UserForumSubscriptionDelete) Where(ps ...predicate.UserForumSubscription) *UserForumSubscriptionDelete {
	ufsd.mutation.Where(ps...)
	return ufsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufsd *UserForumSubscriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufsd.sqlExec, ufsd.mutation, ufsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufsd *UserForumSubscriptionDelete) ExecX(ctx context.Context) int {
	n, err := ufsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufsd *UserForumSubscriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userforumsubscription.Table, nil)
	if ps := ufsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufsd.mutation.done = true
	return affected, err
}

// UserForumSubscriptionDeleteOne is the builder for deleting a single UserForumSubscription entity.
type UserForumSubscriptionDeleteOne struct {
	ufsd *UserForumSubscriptionDelete
}

// Where appends a list predicates to the UserForumSubscriptionDelete builder.
func (ufsdo *UserForumSubscriptionDeleteOne) Where(ps ...predicate.UserForumSubscription) *UserForumSubscriptionDeleteOne {
	ufsdo.ufsd.mutation.Where(ps...)
	return ufsdo
}

// Exec executes the deletion query.
func (ufsdo *UserForumSubscriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := ufsdo.ufsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userforumsubscription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufsdo *UserForumSubscriptionDeleteOne) ExecX(ctx context.Context) {
	if err := ufsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
