// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/usercommentsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserCommentSubscriptionDelete is the builder for deleting a UserCommentSubscription entity.
type UserCommentSubscriptionDelete struct {
	config
	hooks    []Hook
	mutation *UserCommentSubscriptionMutation
}

// Where appends a list predicates to the UserCommentSubscriptionDelete builder.
func (ucsd *UserCommentSubscriptionDelete) Where(ps ...predicate.UserCommentSubscription) *UserCommentSubscriptionDelete {
	ucsd.mutation.Where(ps...)
	return ucsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucsd *UserCommentSubscriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucsd.sqlExec, ucsd.mutation, ucsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucsd *UserCommentSubscriptionDelete) ExecX(ctx context.Context) int {
	n, err := ucsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucsd *UserCommentSubscriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usercommentsubscription.Table, nil)
	if ps := ucsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucsd.mutation.done = true
	return affected, err
}

// UserCommentSubscriptionDeleteOne is the builder for deleting a single UserCommentSubscription entity.
type UserCommentSubscriptionDeleteOne struct {
	ucsd *UserCommentSubscriptionDelete
}

// Where appends a list predicates to the UserCommentSubscriptionDelete builder.
func (ucsdo *UserCommentSubscriptionDeleteOne) Where(ps ...predicate.UserCommentSubscription) *UserCommentSubscriptionDeleteOne {
	ucsdo.ucsd.mutation.Where(ps...)
	return ucsdo
}

// Exec executes the deletion query.
func (ucsdo *UserCommentSubscriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := ucsdo.ucsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usercommentsubscription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucsdo *UserCommentSubscriptionDeleteOne) ExecX(ctx context.Context) {
	if err := ucsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
