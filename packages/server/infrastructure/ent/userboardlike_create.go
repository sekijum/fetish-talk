// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userboardlike"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBoardLikeCreate is the builder for creating a UserBoardLike entity.
type UserBoardLikeCreate struct {
	config
	mutation *UserBoardLikeMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (ublc *UserBoardLikeCreate) SetUserId(i int) *UserBoardLikeCreate {
	ublc.mutation.SetUserId(i)
	return ublc
}

// SetBoardId sets the "boardId" field.
func (ublc *UserBoardLikeCreate) SetBoardId(i int) *UserBoardLikeCreate {
	ublc.mutation.SetBoardId(i)
	return ublc
}

// SetLikedAt sets the "likedAt" field.
func (ublc *UserBoardLikeCreate) SetLikedAt(t time.Time) *UserBoardLikeCreate {
	ublc.mutation.SetLikedAt(t)
	return ublc
}

// SetNillableLikedAt sets the "likedAt" field if the given value is not nil.
func (ublc *UserBoardLikeCreate) SetNillableLikedAt(t *time.Time) *UserBoardLikeCreate {
	if t != nil {
		ublc.SetLikedAt(*t)
	}
	return ublc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ublc *UserBoardLikeCreate) SetUserID(id int) *UserBoardLikeCreate {
	ublc.mutation.SetUserID(id)
	return ublc
}

// SetUser sets the "user" edge to the User entity.
func (ublc *UserBoardLikeCreate) SetUser(u *User) *UserBoardLikeCreate {
	return ublc.SetUserID(u.ID)
}

// SetBoardID sets the "board" edge to the Board entity by ID.
func (ublc *UserBoardLikeCreate) SetBoardID(id int) *UserBoardLikeCreate {
	ublc.mutation.SetBoardID(id)
	return ublc
}

// SetBoard sets the "board" edge to the Board entity.
func (ublc *UserBoardLikeCreate) SetBoard(b *Board) *UserBoardLikeCreate {
	return ublc.SetBoardID(b.ID)
}

// Mutation returns the UserBoardLikeMutation object of the builder.
func (ublc *UserBoardLikeCreate) Mutation() *UserBoardLikeMutation {
	return ublc.mutation
}

// Save creates the UserBoardLike in the database.
func (ublc *UserBoardLikeCreate) Save(ctx context.Context) (*UserBoardLike, error) {
	ublc.defaults()
	return withHooks(ctx, ublc.sqlSave, ublc.mutation, ublc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ublc *UserBoardLikeCreate) SaveX(ctx context.Context) *UserBoardLike {
	v, err := ublc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ublc *UserBoardLikeCreate) Exec(ctx context.Context) error {
	_, err := ublc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ublc *UserBoardLikeCreate) ExecX(ctx context.Context) {
	if err := ublc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ublc *UserBoardLikeCreate) defaults() {
	if _, ok := ublc.mutation.LikedAt(); !ok {
		v := userboardlike.DefaultLikedAt()
		ublc.mutation.SetLikedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ublc *UserBoardLikeCreate) check() error {
	if _, ok := ublc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserBoardLike.userId"`)}
	}
	if _, ok := ublc.mutation.BoardId(); !ok {
		return &ValidationError{Name: "boardId", err: errors.New(`ent: missing required field "UserBoardLike.boardId"`)}
	}
	if _, ok := ublc.mutation.LikedAt(); !ok {
		return &ValidationError{Name: "likedAt", err: errors.New(`ent: missing required field "UserBoardLike.likedAt"`)}
	}
	if _, ok := ublc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserBoardLike.user"`)}
	}
	if _, ok := ublc.mutation.BoardID(); !ok {
		return &ValidationError{Name: "board", err: errors.New(`ent: missing required edge "UserBoardLike.board"`)}
	}
	return nil
}

func (ublc *UserBoardLikeCreate) sqlSave(ctx context.Context) (*UserBoardLike, error) {
	if err := ublc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ublc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ublc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ublc *UserBoardLikeCreate) createSpec() (*UserBoardLike, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBoardLike{config: ublc.config}
		_spec = sqlgraph.NewCreateSpec(userboardlike.Table, nil)
	)
	if value, ok := ublc.mutation.LikedAt(); ok {
		_spec.SetField(userboardlike.FieldLikedAt, field.TypeTime, value)
		_node.LikedAt = value
	}
	if nodes := ublc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userboardlike.UserTable,
			Columns: []string{userboardlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ublc.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userboardlike.BoardTable,
			Columns: []string{userboardlike.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BoardId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserBoardLikeCreateBulk is the builder for creating many UserBoardLike entities in bulk.
type UserBoardLikeCreateBulk struct {
	config
	err      error
	builders []*UserBoardLikeCreate
}

// Save creates the UserBoardLike entities in the database.
func (ublcb *UserBoardLikeCreateBulk) Save(ctx context.Context) ([]*UserBoardLike, error) {
	if ublcb.err != nil {
		return nil, ublcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ublcb.builders))
	nodes := make([]*UserBoardLike, len(ublcb.builders))
	mutators := make([]Mutator, len(ublcb.builders))
	for i := range ublcb.builders {
		func(i int, root context.Context) {
			builder := ublcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBoardLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ublcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ublcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ublcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ublcb *UserBoardLikeCreateBulk) SaveX(ctx context.Context) []*UserBoardLike {
	v, err := ublcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ublcb *UserBoardLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := ublcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ublcb *UserBoardLikeCreateBulk) ExecX(ctx context.Context) {
	if err := ublcb.Exec(ctx); err != nil {
		panic(err)
	}
}
