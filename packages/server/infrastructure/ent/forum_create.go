// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/forum"
	"server/infrastructure/ent/topic"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ForumCreate is the builder for creating a Forum entity.
type ForumCreate struct {
	config
	mutation *ForumMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (fc *ForumCreate) SetUserId(i int) *ForumCreate {
	fc.mutation.SetUserId(i)
	return fc
}

// SetTitle sets the "title" field.
func (fc *ForumCreate) SetTitle(s string) *ForumCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *ForumCreate) SetDescription(s string) *ForumCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *ForumCreate) SetNillableDescription(s *string) *ForumCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetThumbnailUrl sets the "thumbnailUrl" field.
func (fc *ForumCreate) SetThumbnailUrl(s string) *ForumCreate {
	fc.mutation.SetThumbnailUrl(s)
	return fc
}

// SetNillableThumbnailUrl sets the "thumbnailUrl" field if the given value is not nil.
func (fc *ForumCreate) SetNillableThumbnailUrl(s *string) *ForumCreate {
	if s != nil {
		fc.SetThumbnailUrl(*s)
	}
	return fc
}

// SetStatus sets the "status" field.
func (fc *ForumCreate) SetStatus(f forum.Status) *ForumCreate {
	fc.mutation.SetStatus(f)
	return fc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fc *ForumCreate) SetNillableStatus(f *forum.Status) *ForumCreate {
	if f != nil {
		fc.SetStatus(*f)
	}
	return fc
}

// SetCreatedAt sets the "createdAt" field.
func (fc *ForumCreate) SetCreatedAt(t time.Time) *ForumCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (fc *ForumCreate) SetNillableCreatedAt(t *time.Time) *ForumCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updatedAt" field.
func (fc *ForumCreate) SetUpdatedAt(t time.Time) *ForumCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (fc *ForumCreate) SetNillableUpdatedAt(t *time.Time) *ForumCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *ForumCreate) SetID(i int) *ForumCreate {
	fc.mutation.SetID(i)
	return fc
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (fc *ForumCreate) AddLikedUserIDs(ids ...int) *ForumCreate {
	fc.mutation.AddLikedUserIDs(ids...)
	return fc
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (fc *ForumCreate) AddLikedUsers(u ...*User) *ForumCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fc.AddLikedUserIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (fc *ForumCreate) AddSubscribedUserIDs(ids ...int) *ForumCreate {
	fc.mutation.AddSubscribedUserIDs(ids...)
	return fc
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (fc *ForumCreate) AddSubscribedUsers(u ...*User) *ForumCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fc.AddSubscribedUserIDs(ids...)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (fc *ForumCreate) AddTopicIDs(ids ...int) *ForumCreate {
	fc.mutation.AddTopicIDs(ids...)
	return fc
}

// AddTopics adds the "topics" edges to the Topic entity.
func (fc *ForumCreate) AddTopics(t ...*Topic) *ForumCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fc.AddTopicIDs(ids...)
}

// Mutation returns the ForumMutation object of the builder.
func (fc *ForumCreate) Mutation() *ForumMutation {
	return fc.mutation
}

// Save creates the Forum in the database.
func (fc *ForumCreate) Save(ctx context.Context) (*Forum, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *ForumCreate) SaveX(ctx context.Context) *Forum {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *ForumCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *ForumCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *ForumCreate) defaults() {
	if _, ok := fc.mutation.Status(); !ok {
		v := forum.DefaultStatus
		fc.mutation.SetStatus(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := forum.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := forum.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *ForumCreate) check() error {
	if _, ok := fc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "Forum.userId"`)}
	}
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Forum.title"`)}
	}
	if v, ok := fc.mutation.Title(); ok {
		if err := forum.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Forum.title": %w`, err)}
		}
	}
	if v, ok := fc.mutation.Description(); ok {
		if err := forum.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Forum.description": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Forum.status"`)}
	}
	if v, ok := fc.mutation.Status(); ok {
		if err := forum.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Forum.status": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Forum.createdAt"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Forum.updatedAt"`)}
	}
	return nil
}

func (fc *ForumCreate) sqlSave(ctx context.Context) (*Forum, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *ForumCreate) createSpec() (*Forum, *sqlgraph.CreateSpec) {
	var (
		_node = &Forum{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(forum.Table, sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.UserId(); ok {
		_spec.SetField(forum.FieldUserId, field.TypeInt, value)
		_node.UserId = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(forum.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(forum.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.ThumbnailUrl(); ok {
		_spec.SetField(forum.FieldThumbnailUrl, field.TypeString, value)
		_node.ThumbnailUrl = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(forum.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(forum.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(forum.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   forum.LikedUsersTable,
			Columns: forum.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumSubscriptionCreate{config: fc.config, mutation: newUserForumSubscriptionMutation(fc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   forum.SubscribedUsersTable,
			Columns: forum.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserForumLikeCreate{config: fc.config, mutation: newUserForumLikeMutation(fc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.TopicsTable,
			Columns: []string{forum.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ForumCreateBulk is the builder for creating many Forum entities in bulk.
type ForumCreateBulk struct {
	config
	err      error
	builders []*ForumCreate
}

// Save creates the Forum entities in the database.
func (fcb *ForumCreateBulk) Save(ctx context.Context) ([]*Forum, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Forum, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *ForumCreateBulk) SaveX(ctx context.Context) []*Forum {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *ForumCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *ForumCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
