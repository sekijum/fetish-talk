// Code generated by ent, DO NOT EDIT.

package board

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldID, id))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUserId, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldDescription, v))
}

// ThumbnailUrl applies equality check predicate on the "thumbnailUrl" field. It's identical to ThumbnailUrlEQ.
func ThumbnailUrl(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldThumbnailUrl, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldOrder, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldUserId, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Board {
	return predicate.Board(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Board {
	return predicate.Board(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldDescription, v))
}

// ThumbnailUrlEQ applies the EQ predicate on the "thumbnailUrl" field.
func ThumbnailUrlEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldThumbnailUrl, v))
}

// ThumbnailUrlNEQ applies the NEQ predicate on the "thumbnailUrl" field.
func ThumbnailUrlNEQ(v string) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldThumbnailUrl, v))
}

// ThumbnailUrlIn applies the In predicate on the "thumbnailUrl" field.
func ThumbnailUrlIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldThumbnailUrl, vs...))
}

// ThumbnailUrlNotIn applies the NotIn predicate on the "thumbnailUrl" field.
func ThumbnailUrlNotIn(vs ...string) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldThumbnailUrl, vs...))
}

// ThumbnailUrlGT applies the GT predicate on the "thumbnailUrl" field.
func ThumbnailUrlGT(v string) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldThumbnailUrl, v))
}

// ThumbnailUrlGTE applies the GTE predicate on the "thumbnailUrl" field.
func ThumbnailUrlGTE(v string) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldThumbnailUrl, v))
}

// ThumbnailUrlLT applies the LT predicate on the "thumbnailUrl" field.
func ThumbnailUrlLT(v string) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldThumbnailUrl, v))
}

// ThumbnailUrlLTE applies the LTE predicate on the "thumbnailUrl" field.
func ThumbnailUrlLTE(v string) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldThumbnailUrl, v))
}

// ThumbnailUrlContains applies the Contains predicate on the "thumbnailUrl" field.
func ThumbnailUrlContains(v string) predicate.Board {
	return predicate.Board(sql.FieldContains(FieldThumbnailUrl, v))
}

// ThumbnailUrlHasPrefix applies the HasPrefix predicate on the "thumbnailUrl" field.
func ThumbnailUrlHasPrefix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasPrefix(FieldThumbnailUrl, v))
}

// ThumbnailUrlHasSuffix applies the HasSuffix predicate on the "thumbnailUrl" field.
func ThumbnailUrlHasSuffix(v string) predicate.Board {
	return predicate.Board(sql.FieldHasSuffix(FieldThumbnailUrl, v))
}

// ThumbnailUrlIsNil applies the IsNil predicate on the "thumbnailUrl" field.
func ThumbnailUrlIsNil() predicate.Board {
	return predicate.Board(sql.FieldIsNull(FieldThumbnailUrl))
}

// ThumbnailUrlNotNil applies the NotNil predicate on the "thumbnailUrl" field.
func ThumbnailUrlNotNil() predicate.Board {
	return predicate.Board(sql.FieldNotNull(FieldThumbnailUrl))
}

// ThumbnailUrlEqualFold applies the EqualFold predicate on the "thumbnailUrl" field.
func ThumbnailUrlEqualFold(v string) predicate.Board {
	return predicate.Board(sql.FieldEqualFold(FieldThumbnailUrl, v))
}

// ThumbnailUrlContainsFold applies the ContainsFold predicate on the "thumbnailUrl" field.
func ThumbnailUrlContainsFold(v string) predicate.Board {
	return predicate.Board(sql.FieldContainsFold(FieldThumbnailUrl, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldOrder, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Board {
	return predicate.Board(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Board {
	return predicate.Board(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasLikedUsers applies the HasEdge predicate on the "liked_users" edge.
func HasLikedUsers() predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LikedUsersTable, LikedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikedUsersWith applies the HasEdge predicate on the "liked_users" edge with a given conditions (other predicates).
func HasLikedUsersWith(preds ...predicate.User) predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := newLikedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribedUsers applies the HasEdge predicate on the "subscribed_users" edge.
func HasSubscribedUsers() predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SubscribedUsersTable, SubscribedUsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribedUsersWith applies the HasEdge predicate on the "subscribed_users" edge with a given conditions (other predicates).
func HasSubscribedUsersWith(preds ...predicate.User) predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := newSubscribedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThreads applies the HasEdge predicate on the "threads" edge.
func HasThreads() predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThreadsTable, ThreadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadsWith applies the HasEdge predicate on the "threads" edge with a given conditions (other predicates).
func HasThreadsWith(preds ...predicate.Thread) predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := newThreadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserBoardLike applies the HasEdge predicate on the "user_board_like" edge.
func HasUserBoardLike() predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserBoardLikeTable, UserBoardLikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBoardLikeWith applies the HasEdge predicate on the "user_board_like" edge with a given conditions (other predicates).
func HasUserBoardLikeWith(preds ...predicate.UserBoardSubscription) predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := newUserBoardLikeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserBoardSubscription applies the HasEdge predicate on the "user_board_subscription" edge.
func HasUserBoardSubscription() predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserBoardSubscriptionTable, UserBoardSubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBoardSubscriptionWith applies the HasEdge predicate on the "user_board_subscription" edge with a given conditions (other predicates).
func HasUserBoardSubscriptionWith(preds ...predicate.UserBoardLike) predicate.Board {
	return predicate.Board(func(s *sql.Selector) {
		step := newUserBoardSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Board) predicate.Board {
	return predicate.Board(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Board) predicate.Board {
	return predicate.Board(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Board) predicate.Board {
	return predicate.Board(sql.NotPredicates(p))
}
