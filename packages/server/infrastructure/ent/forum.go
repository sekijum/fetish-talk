// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/forum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Forum is the model entity for the Forum schema.
type Forum struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int `json:"userId,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ThumbnailUrl holds the value of the "thumbnailUrl" field.
	ThumbnailUrl string `json:"thumbnailUrl,omitempty"`
	// Status holds the value of the "status" field.
	Status forum.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ForumQuery when eager-loading is set.
	Edges        ForumEdges `json:"edges"`
	user_forums  *int
	selectValues sql.SelectValues
}

// ForumEdges holds the relations/edges for other nodes in the graph.
type ForumEdges struct {
	// LikedUsers holds the value of the liked_users edge.
	LikedUsers []*User `json:"liked_users,omitempty"`
	// SubscribedUsers holds the value of the subscribed_users edge.
	SubscribedUsers []*User `json:"subscribed_users,omitempty"`
	// Topics holds the value of the topics edge.
	Topics []*Topic `json:"topics,omitempty"`
	// UserForumLike holds the value of the user_forum_like edge.
	UserForumLike []*UserForumSubscription `json:"user_forum_like,omitempty"`
	// UserForumSubscription holds the value of the user_forum_subscription edge.
	UserForumSubscription []*UserForumLike `json:"user_forum_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// LikedUsersOrErr returns the LikedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) LikedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.LikedUsers, nil
	}
	return nil, &NotLoadedError{edge: "liked_users"}
}

// SubscribedUsersOrErr returns the SubscribedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) SubscribedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.SubscribedUsers, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_users"}
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) TopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[2] {
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// UserForumLikeOrErr returns the UserForumLike value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) UserForumLikeOrErr() ([]*UserForumSubscription, error) {
	if e.loadedTypes[3] {
		return e.UserForumLike, nil
	}
	return nil, &NotLoadedError{edge: "user_forum_like"}
}

// UserForumSubscriptionOrErr returns the UserForumSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) UserForumSubscriptionOrErr() ([]*UserForumLike, error) {
	if e.loadedTypes[4] {
		return e.UserForumSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_forum_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Forum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case forum.FieldID, forum.FieldUserId:
			values[i] = new(sql.NullInt64)
		case forum.FieldTitle, forum.FieldDescription, forum.FieldThumbnailUrl, forum.FieldStatus:
			values[i] = new(sql.NullString)
		case forum.FieldCreatedAt, forum.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case forum.ForeignKeys[0]: // user_forums
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Forum fields.
func (f *Forum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case forum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case forum.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				f.UserId = int(value.Int64)
			}
		case forum.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case forum.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case forum.FieldThumbnailUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnailUrl", values[i])
			} else if value.Valid {
				f.ThumbnailUrl = value.String
			}
		case forum.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = forum.Status(value.String)
			}
		case forum.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case forum.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case forum.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_forums", value)
			} else if value.Valid {
				f.user_forums = new(int)
				*f.user_forums = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Forum.
// This includes values selected through modifiers, order, etc.
func (f *Forum) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryLikedUsers queries the "liked_users" edge of the Forum entity.
func (f *Forum) QueryLikedUsers() *UserQuery {
	return NewForumClient(f.config).QueryLikedUsers(f)
}

// QuerySubscribedUsers queries the "subscribed_users" edge of the Forum entity.
func (f *Forum) QuerySubscribedUsers() *UserQuery {
	return NewForumClient(f.config).QuerySubscribedUsers(f)
}

// QueryTopics queries the "topics" edge of the Forum entity.
func (f *Forum) QueryTopics() *TopicQuery {
	return NewForumClient(f.config).QueryTopics(f)
}

// QueryUserForumLike queries the "user_forum_like" edge of the Forum entity.
func (f *Forum) QueryUserForumLike() *UserForumSubscriptionQuery {
	return NewForumClient(f.config).QueryUserForumLike(f)
}

// QueryUserForumSubscription queries the "user_forum_subscription" edge of the Forum entity.
func (f *Forum) QueryUserForumSubscription() *UserForumLikeQuery {
	return NewForumClient(f.config).QueryUserForumSubscription(f)
}

// Update returns a builder for updating this Forum.
// Note that you need to call Forum.Unwrap() before calling this method if this Forum
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Forum) Update() *ForumUpdateOne {
	return NewForumClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Forum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Forum) Unwrap() *Forum {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Forum is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Forum) String() string {
	var builder strings.Builder
	builder.WriteString("Forum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", f.UserId))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("thumbnailUrl=")
	builder.WriteString(f.ThumbnailUrl)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Forums is a parsable slice of Forum.
type Forums []*Forum
