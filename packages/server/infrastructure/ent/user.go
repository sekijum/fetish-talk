// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserName holds the value of the "userName" field.
	UserName string `json:"userName,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// DisplayName holds the value of the "displayName" field.
	DisplayName string `json:"displayName,omitempty"`
	// AvatarUrl holds the value of the "avatarUrl" field.
	AvatarUrl string `json:"avatarUrl,omitempty"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Forums holds the value of the forums edge.
	Forums []*Forum `json:"forums,omitempty"`
	// Topics holds the value of the topics edge.
	Topics []*Topic `json:"topics,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// LikedForums holds the value of the liked_forums edge.
	LikedForums []*Forum `json:"liked_forums,omitempty"`
	// LikedTopics holds the value of the liked_topics edge.
	LikedTopics []*Topic `json:"liked_topics,omitempty"`
	// LikedComments holds the value of the liked_comments edge.
	LikedComments []*Comment `json:"liked_comments,omitempty"`
	// SubscribedForums holds the value of the subscribed_forums edge.
	SubscribedForums []*Forum `json:"subscribed_forums,omitempty"`
	// SubscribedTopics holds the value of the subscribed_topics edge.
	SubscribedTopics []*Topic `json:"subscribed_topics,omitempty"`
	// SubscribedComments holds the value of the subscribed_comments edge.
	SubscribedComments []*Comment `json:"subscribed_comments,omitempty"`
	// UserForumLike holds the value of the user_forum_like edge.
	UserForumLike []*UserForumLike `json:"user_forum_like,omitempty"`
	// UserTopicLike holds the value of the user_topic_like edge.
	UserTopicLike []*UserTopicLike `json:"user_topic_like,omitempty"`
	// UserCommentLike holds the value of the user_comment_like edge.
	UserCommentLike []*UserCommentLike `json:"user_comment_like,omitempty"`
	// UserForumSubscription holds the value of the user_forum_subscription edge.
	UserForumSubscription []*UserForumSubscription `json:"user_forum_subscription,omitempty"`
	// UserTopicSubscription holds the value of the user_topic_subscription edge.
	UserTopicSubscription []*UserTopicSubscription `json:"user_topic_subscription,omitempty"`
	// UserCommentSubscription holds the value of the user_comment_subscription edge.
	UserCommentSubscription []*UserCommentSubscription `json:"user_comment_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// ForumsOrErr returns the Forums value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ForumsOrErr() ([]*Forum, error) {
	if e.loadedTypes[0] {
		return e.Forums, nil
	}
	return nil, &NotLoadedError{edge: "forums"}
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[1] {
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikedForumsOrErr returns the LikedForums value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedForumsOrErr() ([]*Forum, error) {
	if e.loadedTypes[3] {
		return e.LikedForums, nil
	}
	return nil, &NotLoadedError{edge: "liked_forums"}
}

// LikedTopicsOrErr returns the LikedTopics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedTopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[4] {
		return e.LikedTopics, nil
	}
	return nil, &NotLoadedError{edge: "liked_topics"}
}

// LikedCommentsOrErr returns the LikedComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedCommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[5] {
		return e.LikedComments, nil
	}
	return nil, &NotLoadedError{edge: "liked_comments"}
}

// SubscribedForumsOrErr returns the SubscribedForums value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscribedForumsOrErr() ([]*Forum, error) {
	if e.loadedTypes[6] {
		return e.SubscribedForums, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_forums"}
}

// SubscribedTopicsOrErr returns the SubscribedTopics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscribedTopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[7] {
		return e.SubscribedTopics, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_topics"}
}

// SubscribedCommentsOrErr returns the SubscribedComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscribedCommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[8] {
		return e.SubscribedComments, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_comments"}
}

// UserForumLikeOrErr returns the UserForumLike value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserForumLikeOrErr() ([]*UserForumLike, error) {
	if e.loadedTypes[9] {
		return e.UserForumLike, nil
	}
	return nil, &NotLoadedError{edge: "user_forum_like"}
}

// UserTopicLikeOrErr returns the UserTopicLike value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTopicLikeOrErr() ([]*UserTopicLike, error) {
	if e.loadedTypes[10] {
		return e.UserTopicLike, nil
	}
	return nil, &NotLoadedError{edge: "user_topic_like"}
}

// UserCommentLikeOrErr returns the UserCommentLike value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCommentLikeOrErr() ([]*UserCommentLike, error) {
	if e.loadedTypes[11] {
		return e.UserCommentLike, nil
	}
	return nil, &NotLoadedError{edge: "user_comment_like"}
}

// UserForumSubscriptionOrErr returns the UserForumSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserForumSubscriptionOrErr() ([]*UserForumSubscription, error) {
	if e.loadedTypes[12] {
		return e.UserForumSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_forum_subscription"}
}

// UserTopicSubscriptionOrErr returns the UserTopicSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTopicSubscriptionOrErr() ([]*UserTopicSubscription, error) {
	if e.loadedTypes[13] {
		return e.UserTopicSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_topic_subscription"}
}

// UserCommentSubscriptionOrErr returns the UserCommentSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCommentSubscriptionOrErr() ([]*UserCommentSubscription, error) {
	if e.loadedTypes[14] {
		return e.UserCommentSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_comment_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUserName, user.FieldEmail, user.FieldPassword, user.FieldDisplayName, user.FieldAvatarUrl, user.FieldStatus:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayName", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldAvatarUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatarUrl", values[i])
			} else if value.Valid {
				u.AvatarUrl = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryForums queries the "forums" edge of the User entity.
func (u *User) QueryForums() *ForumQuery {
	return NewUserClient(u.config).QueryForums(u)
}

// QueryTopics queries the "topics" edge of the User entity.
func (u *User) QueryTopics() *TopicQuery {
	return NewUserClient(u.config).QueryTopics(u)
}

// QueryComments queries the "comments" edge of the User entity.
func (u *User) QueryComments() *CommentQuery {
	return NewUserClient(u.config).QueryComments(u)
}

// QueryLikedForums queries the "liked_forums" edge of the User entity.
func (u *User) QueryLikedForums() *ForumQuery {
	return NewUserClient(u.config).QueryLikedForums(u)
}

// QueryLikedTopics queries the "liked_topics" edge of the User entity.
func (u *User) QueryLikedTopics() *TopicQuery {
	return NewUserClient(u.config).QueryLikedTopics(u)
}

// QueryLikedComments queries the "liked_comments" edge of the User entity.
func (u *User) QueryLikedComments() *CommentQuery {
	return NewUserClient(u.config).QueryLikedComments(u)
}

// QuerySubscribedForums queries the "subscribed_forums" edge of the User entity.
func (u *User) QuerySubscribedForums() *ForumQuery {
	return NewUserClient(u.config).QuerySubscribedForums(u)
}

// QuerySubscribedTopics queries the "subscribed_topics" edge of the User entity.
func (u *User) QuerySubscribedTopics() *TopicQuery {
	return NewUserClient(u.config).QuerySubscribedTopics(u)
}

// QuerySubscribedComments queries the "subscribed_comments" edge of the User entity.
func (u *User) QuerySubscribedComments() *CommentQuery {
	return NewUserClient(u.config).QuerySubscribedComments(u)
}

// QueryUserForumLike queries the "user_forum_like" edge of the User entity.
func (u *User) QueryUserForumLike() *UserForumLikeQuery {
	return NewUserClient(u.config).QueryUserForumLike(u)
}

// QueryUserTopicLike queries the "user_topic_like" edge of the User entity.
func (u *User) QueryUserTopicLike() *UserTopicLikeQuery {
	return NewUserClient(u.config).QueryUserTopicLike(u)
}

// QueryUserCommentLike queries the "user_comment_like" edge of the User entity.
func (u *User) QueryUserCommentLike() *UserCommentLikeQuery {
	return NewUserClient(u.config).QueryUserCommentLike(u)
}

// QueryUserForumSubscription queries the "user_forum_subscription" edge of the User entity.
func (u *User) QueryUserForumSubscription() *UserForumSubscriptionQuery {
	return NewUserClient(u.config).QueryUserForumSubscription(u)
}

// QueryUserTopicSubscription queries the "user_topic_subscription" edge of the User entity.
func (u *User) QueryUserTopicSubscription() *UserTopicSubscriptionQuery {
	return NewUserClient(u.config).QueryUserTopicSubscription(u)
}

// QueryUserCommentSubscription queries the "user_comment_subscription" edge of the User entity.
func (u *User) QueryUserCommentSubscription() *UserCommentSubscriptionQuery {
	return NewUserClient(u.config).QueryUserCommentSubscription(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("userName=")
	builder.WriteString(u.UserName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("displayName=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("avatarUrl=")
	builder.WriteString(u.AvatarUrl)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
