// Code generated by ent, DO NOT EDIT.

package userboardlike

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userboardlike type in the database.
	Label = "user_board_like"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldBoardId holds the string denoting the boardid field in the database.
	FieldBoardId = "board_id"
	// FieldLikedAt holds the string denoting the likedat field in the database.
	FieldLikedAt = "liked_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBoard holds the string denoting the board edge name in mutations.
	EdgeBoard = "board"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// BoardFieldID holds the string denoting the ID field of the Board.
	BoardFieldID = "id"
	// Table holds the table name of the userboardlike in the database.
	Table = "user_board_likes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_board_likes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// BoardTable is the table that holds the board relation/edge.
	BoardTable = "user_board_likes"
	// BoardInverseTable is the table name for the Board entity.
	// It exists in this package in order to avoid circular dependency with the "board" package.
	BoardInverseTable = "boards"
	// BoardColumn is the table column denoting the board relation/edge.
	BoardColumn = "board_id"
)

// Columns holds all SQL columns for userboardlike fields.
var Columns = []string{
	FieldUserId,
	FieldBoardId,
	FieldLikedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLikedAt holds the default value on creation for the "likedAt" field.
	DefaultLikedAt func() time.Time
)

// OrderOption defines the ordering options for the UserBoardLike queries.
type OrderOption func(*sql.Selector)

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByBoardId orders the results by the boardId field.
func ByBoardId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoardId, opts...).ToFunc()
}

// ByLikedAt orders the results by the likedAt field.
func ByLikedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBoardField orders the results by board field.
func ByBoardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newBoardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, BoardColumn),
		sqlgraph.To(BoardInverseTable, BoardFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BoardTable, BoardColumn),
	)
}
