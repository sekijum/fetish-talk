package datasource

import (
	"context"
	"server/domain/model"
	"server/infrastructure/ent"

	"github.com/mitchellh/mapstructure"
)

type BoardClientDatasource struct {
	client *ent.Client
}

func NewBoardClientDatasource(client *ent.Client) *BoardClientDatasource {
	return &BoardClientDatasource{client: client}
}

func (ds *BoardClientDatasource) Create(ctx context.Context, board *model.Board, thread *model.Thread) (*model.Board, error) {
	boardBuilder := ds.client.Board.Create().
		SetTitle(board.Title).
		SetUserId(board.UserId).
		SetStatus(int(board.Status)).
		AddThreads()
	if board.Description != nil {
		boardBuilder.SetDescription(*board.Description)
	}
	if board.ThumbnailUrl != nil {
		boardBuilder.SetThumbnailUrl(*board.ThumbnailUrl)
	}

	savedBoard, err := boardBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	threadBuilder := ds.client.Thread.Create().
		SetBoard(savedBoard).
		SetTitle(thread.Title).
		SetUserId(thread.UserId).
		SetIsAutoGenerated(thread.IsAutoGenerated).
		SetIsNotifyOnComment(thread.IsNotifyOnComment).
		SetIPAddress(thread.IpAddress).
		SetStatus(int(thread.Status))
	if thread.Description != nil {
		threadBuilder.SetDescription(*thread.Description)
	}

	_, err = threadBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	modelBoard, err := entBoardToModelBoard(savedBoard)
	if err != nil {
		return nil, err
	}

	return modelBoard, nil
}

func entBoardToModelBoard(entBoard *ent.Board) (*model.Board, error) {
	var modelBoard model.Board
	err := mapstructure.Decode(entBoard, &modelBoard)
	if err != nil {
		return nil, err
	}
	return &modelBoard, nil
}
