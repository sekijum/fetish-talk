package datasource

import (
	"context"
	"server/domain/model"
	"server/infrastructure/ent"
)

type BoardClientDatasource struct {
	client *ent.Client
}

func NewBoardClientDatasource(client *ent.Client) *BoardClientDatasource {
	return &BoardClientDatasource{client: client}
}

func (ds *BoardClientDatasource) Create(ctx context.Context, board *model.Board) (*model.Board, error) {
	newThread, err := ds.client.Thread.Create().
		SetTitle(board.Threads[0].Title).
		SetDescription(board.Threads[0].Description).
		SetUserId(board.UserId).
		SetIsAutoGenerated(board.Threads[0].IsAutoGenerated).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// 新しいボードを作成してスレッドを追加
	createdBoard, err := ds.client.Board.Create().
		SetTitle(board.Title).
		SetDescription(board.Description).
		SetUserId(board.UserId).
		AddThreads(newThread).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	board.Id = createdBoard.ID
	return board, nil
}

// ここから削除
// var Provider = wire.NewSet(
// 	NewBoardClientDatasource,
// 	wire.Bind(new(repository.BoardClientRepository), new(*BoardClientDatasource)),
// )
// ここまで削除
