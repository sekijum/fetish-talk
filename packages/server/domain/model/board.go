package model

import (
	"errors"
	"fmt"
	"net"
	"net/url"
	"time"
)

type Board struct {
	Id           int
	UserId       int
	Title        string
	Description  *string
	ThumbnailUrl *string
	Status       BoardStatus
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Threads      []*Thread
}

func (b *Board) Validate() error {
	if b.UserId == 0 {
		return errors.New("ユーザーIDは必須です")
	}
	if b.Title == "" {
		return errors.New("タイトルは必須です")
	}
	if len(b.Title) > 50 {
		return errors.New("タイトルは50文字以内で入力してください")
	}
	if b.Description != nil && len(*b.Description) > 255 {
		return errors.New("説明は255文字以内で入力してください")
	}
	if b.ThumbnailUrl != nil {
		if _, err := url.ParseRequestURI(*b.ThumbnailUrl); err != nil {
			return errors.New("サムネイルURLは有効なURLである必要があります")
		}
	}
	if err := b.Status.Validate(); err != nil {
		return err
	}
	return nil
}

func (b *Board) ValidateDefaultThreads() error {
	if len(b.Threads) != 1 {
		return errors.New("スレッドの数は1つである必要があります")
	}
	for _, t := range b.Threads {
		if t.UserId == 0 {
			return errors.New("ユーザーIDは必須です")
		}
		if t.Title == "" {
			return errors.New("スレッドのタイトルは必須です")
		}
		if len(t.Title) > 50 {
			return errors.New("スレッドのタイトルは50文字以内である必要があります")
		}
		if b.Description != nil && len(*b.Description) > 255 {
			return errors.New("説明は255文字以内で入力してください")
		}
		if b.ThumbnailUrl != nil {
			if _, err := url.ParseRequestURI(*b.ThumbnailUrl); err != nil {
				return errors.New("サムネイルURLは有効なURLである必要があります")
			}
		}
		if !t.IsAutoGenerated {
			return errors.New("スレッドは自動生成である必要があります")
		}
		if t.IpAddress == "" {
			return errors.New("スレッドのIPアドレスは必須です")
		}
		if net.ParseIP(t.IpAddress) == nil {
			return errors.New("スレッドのIPアドレスは有効な形式である必要があります")
		}
		if err := t.Status.Validate(); err != nil {
			return err
		}
	}
	return nil
}

type BoardStatus string

const (
	BoardStatusPublic   BoardStatus = "Public"
	BoardStatusPrivate  BoardStatus = "Private"
	BoardStatusPending  BoardStatus = "Pending"
	BoardStatusArchived BoardStatus = "Archived"
)

func (s BoardStatus) ToInt() int {
	boardStatusToInt := map[BoardStatus]int{
		BoardStatusPublic:   0,
		BoardStatusPrivate:  1,
		BoardStatusPending:  2,
		BoardStatusArchived: 3,
	}
	return boardStatusToInt[s]
}

func (s BoardStatus) Label() string {
	switch s {
	case BoardStatusPublic:
		return "公開"
	case BoardStatusPrivate:
		return "非公開"
	case BoardStatusPending:
		return "保留"
	case BoardStatusArchived:
		return "アーカイブ"
	default:
		return "不明なステータス"
	}
}

func (s BoardStatus) Validate() error {
	switch s {
	case BoardStatusPublic, BoardStatusPrivate, BoardStatusPending, BoardStatusArchived:
		return nil
	default:
		return fmt.Errorf("無効な板ステータスです: %s", s)
	}
}

func BoardStatusFromInt(i int) (BoardStatus, error) {
	intToBoardStatus := map[int]BoardStatus{
		0: BoardStatusPublic,
		1: BoardStatusPrivate,
		2: BoardStatusPending,
		3: BoardStatusArchived,
	}
	status, ok := intToBoardStatus[i]
	if !ok {
		return "", fmt.Errorf("無効な板ステータスです: %d", i)
	}
	return status, nil
}
